# onboarding_config.py
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

from typing import Dict, Any, List
from datetime import timedelta
from logger import get_logger

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–∫–∏
# –î–µ–Ω—å 1 = —Å–µ–≥–æ–¥–Ω—è, –î–µ–Ω—å 2 = –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.
ONBOARDING_FUNNEL = {
    1: {
        "time_after_registration": timedelta(hours=1),
        "message_type": "welcome",
        "tariff_key": None,  # –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        "price": None,
        "description": "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ"
    },
    2: {
        "time": "11:15",  # –í—Ä–µ–º—è –ø–æ –ú–°–ö
        "message_type": "reminder_day2",
        "tariff_key": "–º–∏–Ω–∏",
        "price": 399,
        "description": "–ú–∏–Ω–∏-–ø–∞–∫–µ—Ç: 10 —Ñ–æ—Ç–æ –∑–∞ 399‚ÇΩ. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è."
    },
    3: {
        "time": "11:15",
        "message_type": "reminder_day3",
        "tariff_key": "–º–∏–Ω–∏",
        "price": 399,
        "description": "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ú–∏–Ω–∏ ‚Äî 10 —Ñ–æ—Ç–æ –∑–∞ 399‚ÇΩ. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª–∏, –ø—Ä–æ–±—É–π –æ–∂–∏–≤–ª–µ–Ω–∏—è ‚Äî —Ñ–æ—Ç–æ –Ω–µ —Å–≥–æ—Ä—è—Ç."
    },
    4: {
        "time": "11:15",
        "message_type": "reminder_day4",
        "tariff_key": "–ª–∞–π—Ç",
        "price": 599,
        "description": "–ü–æ–ø—Ä–æ–±—É–π –õ–∞–π—Ç: 20 —Ñ–æ—Ç–æ –∑–∞ 599‚ÇΩ. –û—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑—ã."
    },
    5: {
        "time": "11:15",
        "message_type": "reminder_day5",
        "tariff_key": "–∫–æ–º—Ñ–æ—Ä—Ç",
        "price": 1199,
        "description": "–ü–∞–∫–µ—Ç –ö–æ–º—Ñ–æ—Ä—Ç ‚Äî 50 —Ñ–æ—Ç–æ –∑–∞ 1199‚ÇΩ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ, –æ–±—Ä–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞."
    }
}

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_TEXTS = {
    "welcome": {
        "text": "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤ PixelPie üç™ ‚Äî –∞ –∑–Ω–∞—á–∏—Ç, —Ç–≤–æ—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π —Å—Ç–∏–ª—å ‚Äî –∏ –ø–æ–ª—É—á–∏ –∫—Ä—É—Ç–æ–π –æ–±—Ä–∞–∑ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–≤–æ–µ–º—É —Å–µ–ª—Ñ–∏ ‚Äî –∏ –≤—ã–¥–∞—ë—Ç –≤–æ–ª—à–µ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
        "button_text": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
        "callback_data": "proceed_to_tariff"
    },
    "reminder_day2": {
        "text": "üç™ –ú–∏–Ω–∏-–ø–∞–∫–µ—Ç: 10 —Ñ–æ—Ç–æ –∑–∞ 399‚ÇΩ. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è.",
        "button_text": "–ö—É–ø–∏—Ç—å –õ–∞–π—Ç-–ú–∏–Ω–∏",
        "callback_data": "pay_399"
    },
    "reminder_day3": {
        "text": "üç™ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ú–∏–Ω–∏ ‚Äî 10 —Ñ–æ—Ç–æ –∑–∞ 399‚ÇΩ. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª–∏, –ø—Ä–æ–±—É–π –æ–∂–∏–≤–ª–µ–Ω–∏—è ‚Äî —Ñ–æ—Ç–æ –Ω–µ —Å–≥–æ—Ä—è—Ç.",
        "button_text": "–í—ã–±—Ä–∞—Ç—å –ú–∏–Ω–∏",
        "callback_data": "pay_399"
    },
    "reminder_day4": {
        "text": "üç™ –ü–æ–ø—Ä–æ–±—É–π –õ–∞–π—Ç: 20 —Ñ–æ—Ç–æ –∑–∞ 599‚ÇΩ. –û—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑—ã.",
        "button_text": "–í—ã–±—Ä–∞—Ç—å –õ–∞–π—Ç",
        "callback_data": "pay_599"
    },
    "reminder_day5": {
        "text": "üç™ –ü–∞–∫–µ—Ç –ö–æ–º—Ñ–æ—Ä—Ç ‚Äî 50 —Ñ–æ—Ç–æ –∑–∞ 1199‚ÇΩ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ, –æ–±—Ä–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.",
        "button_text": "–í—ã–±—Ä–∞—Ç—å –ö–æ–º—Ñ–æ—Ä—Ç",
        "callback_data": "pay_1199"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–Ω—è
def get_day_config(day: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –≤–æ—Ä–æ–Ω–∫–∏"""
    return ONBOARDING_FUNNEL.get(day, {})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_message_text(message_type: str, first_name: str) -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if message_type not in MESSAGE_TEXTS:
        return {}

    text_data = MESSAGE_TEXTS[message_type].copy()
    text_data["text"] = text_data["text"].format(first_name=first_name)
    return text_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
async def has_user_purchases(user_id: int, database_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏"""
    import aiosqlite
    try:
        async with aiosqlite.connect(database_path) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("""
                SELECT COUNT(*) as count
                FROM payments
                WHERE user_id = ? AND status = 'succeeded'
            """, (user_id,))
            result = await c.fetchone()
            return result['count'] > 0 if result else False
    except Exception as e:
        logger = get_logger('database')
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è user_id={user_id}: {e}")
        return False
