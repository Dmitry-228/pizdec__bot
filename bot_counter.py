import logging
import aiosqlite
from aiogram import Bot
from aiogram.types import Message
from config import ADMIN_IDS, DATABASE_PATH
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

logger = logging.getLogger(__name__)

class BotCounter:
    async def start(self, bot: Bot):
        logger.info("BotCounter started")
    async def stop(self):
        logger.info("BotCounter stopped")
    
    def __init__(self):
        self.additional_users = 0
        self.db_path = DATABASE_PATH  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_PATH –∏–∑ config.py
        
    async def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS bot_counter_settings (
                        key TEXT PRIMARY KEY,
                        value TEXT
                    )
                """)
                await db.commit()
                
                cursor = await db.execute(
                    "SELECT value FROM bot_counter_settings WHERE key = 'additional_users'"
                )
                result = await cursor.fetchone()
                if result:
                    self.additional_users = int(result[0])
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
    
    async def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS bot_counter_settings (
                        key TEXT PRIMARY KEY,
                        value TEXT
                    )
                """)
                
                await db.execute("""
                    INSERT OR REPLACE INTO bot_counter_settings (key, value)
                    VALUES ('additional_users', ?)
                """, (str(self.additional_users),))
                
                await db.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        
    async def get_real_users_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    "SELECT COUNT(DISTINCT user_id) FROM users WHERE user_id IS NOT NULL"
                )
                result = await cursor.fetchone()
                return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞: {e}", exc_info=True)
            return 0
    
    async def get_total_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
        await self.load_settings()
        real_count = await self.get_real_users_count()
        return real_count + self.additional_users
    
    def format_number(self, num: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏."""
        return f"{num:,}".replace(",", " ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
bot_counter = BotCounter()

async def get_beautiful_main_menu_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    total = await bot_counter.get_total_count()
    formatted = bot_counter.format_number(total)
    
    return (
        f"<b>üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>PixelPie AI | üë• {formatted}</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä AI-—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞!</b> üé®\n\n"
        f"<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?</b>\n\n"
        f"üñº <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</b> ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é AI\n\n"
        f"üé≠ <b>–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã</b> ‚Äî —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ AI-–∞–≤–∞—Ç–∞—Ä–∞–º–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
        f"üíé <b>–ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç</b> ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n"
        f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
        f"üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá</i>"
    )

async def get_main_menu_variant2() -> str:
    """–í–∞—Ä–∏–∞–Ω—Ç 2: –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π."""
    total = await bot_counter.get_total_count()
    formatted = bot_counter.format_number(total)
    
    return (
        f"<b>üé® PixelPie AI</b>\n"
        f"<i>–ù–∞—Å —É–∂–µ {formatted} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        f"üñº <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è</b> ‚Äì —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
        f"üé≠ <b>–ê–≤–∞—Ç–∞—Ä—ã</b> ‚Äì –≤–∞—à–∏ AI-–º–æ–¥–µ–ª–∏\n"
        f"üíé <b>–ü–∞–∫–µ—Ç—ã</b> ‚Äì –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äì –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äì –ø–æ–º–æ—â—å 24/7"
    )

async def get_main_menu_variant3() -> str:
    """–í–∞—Ä–∏–∞–Ω—Ç 3: –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π."""
    total = await bot_counter.get_total_count()
    formatted = bot_counter.format_number(total)
    
    return (
        f"<b>PixelPie AI | {formatted} users</b>\n\n"
        f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ\n"
        f"üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞–º–∏\n"
        f"üíé –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        f"üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
    )

async def cmd_bot_name(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–º."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return
    
    await bot_counter.load_settings()
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        real = await bot_counter.get_real_users_count()
        total = await bot_counter.get_total_count()
        
        text = (
            f"üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–º</b>\n\n"
            f"<b>–†–µ–∞–ª—å–Ω—ã—Ö:</b> {bot_counter.format_number(real)}\n"
            f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> +{bot_counter.format_number(bot_counter.additional_users)}\n"
            f"<b>–í—Å–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è:</b> {bot_counter.format_number(total)}\n\n"
            f"<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/botname set 88027 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            f"/botname add 1000 - –¥–æ–±–∞–≤–∏—Ç—å\n"
            f"/botname show - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é\n"
            f"/botname reset - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ"
        )
        
        await message.answer(text, parse_mode='HTML')
        return
    
    cmd = args[0].lower()
    
    if cmd == "show":
        menu1 = await get_beautiful_main_menu_text()
        await message.answer(
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç 1 (–æ—Å–Ω–æ–≤–Ω–æ–π):</b>\n\n{menu1}",
            parse_mode='HTML'
        )
        
        menu2 = await get_main_menu_variant2()
        await message.answer(
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç 2 (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π):</b>\n\n{menu2}",
            parse_mode='HTML'
        )
        
        menu3 = await get_main_menu_variant3()
        await message.answer(
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç 3 (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π):</b>\n\n{menu3}",
            parse_mode='HTML'
        )
        
    elif cmd == "set" and len(args) > 1:
        try:
            target = int(args[1])
            real = await bot_counter.get_real_users_count()
            bot_counter.additional_users = max(0, target - real)
            await bot_counter.save_settings()
            
            await message.answer(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {bot_counter.format_number(target)}",
                parse_mode='HTML'
            )
        except ValueError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")
            
    elif cmd == "add" and len(args) > 1:
        try:
            amount = int(args[1])
            bot_counter.additional_users += amount
            await bot_counter.save_settings()
            total = await bot_counter.get_total_count()
            
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +{amount}\n"
                f"–í—Å–µ–≥–æ: {bot_counter.format_number(total)}",
                parse_mode='HTML'
            )
        except ValueError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")
            
    elif cmd == "reset":
        bot_counter.additional_users = 0
        await bot_counter.save_settings()
        real = await bot_counter.get_real_users_count()
        
        await message.answer(
            f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ: {bot_counter.format_number(real)}",
            parse_mode='HTML'
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
from aiogram import Router
bot_counter_router = Router()

@bot_counter_router.message(Command("botname"))
async def cmd_bot_name_handler(message: Message, state: FSMContext):
    await cmd_bot_name(message, state)