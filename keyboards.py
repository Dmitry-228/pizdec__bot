# keyboards.py

import os
import asyncio
import logging
from typing import List, Optional, Dict, Any
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from database import check_user_resources, get_user_payments, get_user_trainedmodels, get_active_trainedmodel, update_user_balance, update_user_credits, check_database_user
from config import ADMIN_IDS, TARIFFS, ADMIN_PANEL_BUTTON_NAMES, ALLOWED_BROADCAST_CALLBACKS
from generation_config import NEW_MALE_AVATAR_STYLES, NEW_FEMALE_AVATAR_STYLES

from logger import get_logger
logger = get_logger('keyboards')

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
ASPECT_RATIOS = {
    "1:1": {
        "display": "1:1 üì± –ö–≤–∞–¥—Ä–∞—Ç",
        "description": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è Instagram –ø–æ—Å—Ç–æ–≤ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤",
        "width": 1024,
        "height": 1024
    },
    "16:9": {
        "display": "16:9 üñ•Ô∏è –®–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω—ã–π",
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è YouTube –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π",
        "width": 1920,
        "height": 1080
    },
    "4:3": {
        "display": "4:3 üì∫ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
        "description": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        "width": 1024,
        "height": 768
    },
    "5:4": {
        "display": "5:4 üñºÔ∏è –ê–ª—å–±–æ–º–Ω—ã–π",
        "description": "–û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        "width": 1280,
        "height": 1024
    },
    "9:16": {
        "display": "9:16 üì≤ Stories",
        "description": "–î–ª—è Instagram Stories –∏ TikTok",
        "width": 1080,
        "height": 1920
    },
    "9:21": {
        "display": "9:21 üì± –£–ª—å—Ç—Ä–∞-–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π",
        "description": "–î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "width": 1080,
        "height": 2520
    },
    "3:4": {
        "display": "3:4 üë§ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        "width": 768,
        "height": 1024
    },
    "4:5": {
        "display": "4:5 üìñ –ö–Ω–∏–∂–Ω—ã–π",
        "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤ Instagram –¥–ª—è —Ñ–æ—Ç–æ",
        "width": 1080,
        "height": 1350
    },
    "21:9": {
        "display": "21:9 üé¨ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π",
        "description": "–®–∏—Ä–æ–∫–∏–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç",
        "width": 2560,
        "height": 1097
    },
    "2:3": {
        "display": "2:3 üì∑ –§–æ—Ç–æ",
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç",
        "width": 1024,
        "height": 1536
    },
    "1.1:1": {
        "display": "1.1:1 üìê –°–ª–µ–≥–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π",
        "description": "–ü–æ—á—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º —É–∫–ª–æ–Ω–æ–º",
        "width": 1126,
        "height": 1024
    }
}

async def create_style_selection_keyboard(generation_type: str = 'with_avatar') -> InlineKeyboardMarkup:

    try:
        prefix = 'admin_style' if generation_type == 'admin_with_user_avatar' else 'style'
        keyboard = [
            [
                InlineKeyboardButton(text="üë§ –ü–æ—Ä—Ç—Ä–µ—Ç", callback_data=f"{prefix}_portrait"),
                InlineKeyboardButton(text="üòä –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data=f"{prefix}_casual")
            ],
            [
                InlineKeyboardButton(text="üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", callback_data=f"{prefix}_artistic"),
                InlineKeyboardButton(text="üíº –î–µ–ª–æ–≤–æ–µ", callback_data=f"{prefix}_business")
            ],
            [
                InlineKeyboardButton(text="üåÖ –ù–∞ –ø—Ä–∏—Ä–æ–¥–µ", callback_data=f"{prefix}_outdoor"),
                InlineKeyboardButton(text="üè† –í –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ", callback_data=f"{prefix}_indoor")
            ],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", callback_data=f"{prefix}_custom")
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_generation_menu" if generation_type != 'admin_with_user_avatar' else "admin_users_list"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_style_selection_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_main_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        admin_panel_button_text = ADMIN_PANEL_BUTTON_NAMES.get(user_id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è user_id={user_id} —Å –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–æ–π '{admin_panel_button_text}'")

        keyboard = [
            [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="photo_generate_menu")],
            [InlineKeyboardButton(text="üé¨ –í–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="video_generate_menu")],
            [InlineKeyboardButton(text="üé≠ –§–æ—Ç–æ –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="photo_transform")],  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
            [InlineKeyboardButton(text="üë• –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")],
            [
                InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile"),
                InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referrals")
            ],
            [
                InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç", callback_data="subscribe"),
                InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
            ],
            [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
        ]

        if user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton(text=admin_panel_button_text, callback_data="admin_panel")])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_main_menu_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_photo_generate_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è (—Å –∞–≤–∞—Ç–∞—Ä–æ–º)", callback_data="generate_with_avatar")],
            [InlineKeyboardButton(text="üñº –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É", callback_data="photo_to_photo")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_photo_generate_menu_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_video_generate_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üé¨ AI-–≤–∏–¥–µ–æ (Kling 2.1)", callback_data="ai_video_v2_1")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_video_generate_menu_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_video_styles_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        video_styles = [
            ("dynamic_action", "üèÉ‚Äç‚ôÇÔ∏è –î–∏–Ω–∞–º–∏—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
            ("slow_motion", "üê¢ –ó–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
            ("cinematic_pan", "üé• –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥"),
            ("facial_expression", "üòä –í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–º–∏–∫–∞"),
            ("object_movement", "‚è≥ –î–≤–∏–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"),
            ("dance_sequence", "üíÉ –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
            ("nature_flow", "üåä –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—á–µ–Ω–∏–µ"),
            ("urban_vibe", "üèô –ì–æ—Ä–æ–¥—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"),
            ("fantasy_motion", "‚ú® –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
            ("retro_wave", "üìº –†–µ—Ç—Ä–æ-–≤–æ–ª–Ω–∞")
        ]

        keyboard = []
        row = []
        for style_key, style_name in video_styles:
            row.append(InlineKeyboardButton(text=style_name, callback_data=f"video_style_{style_key}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)

        keyboard.extend([
            [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–≤—Ä—É—á–Ω—É—é)", callback_data="enter_custom_prompt_manual")],
            [InlineKeyboardButton(text="ü§ñ –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–ü–æ–º–æ—â–Ω–∏–∫ AI)", callback_data="enter_custom_prompt_llama")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="video_generate_menu")]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_video_styles_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_avatar_style_choice_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [
                InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="select_new_male_avatar_styles"),
                InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="select_new_female_avatar_styles")
            ],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generate_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_avatar_style_choice_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_new_male_avatar_styles_keyboard(page: int = 1) -> InlineKeyboardMarkup:

    try:
        keyboard = []
        row = []

        styles_per_page = 20
        total_styles = len(NEW_MALE_AVATAR_STYLES)
        total_pages = (total_styles + styles_per_page - 1) // styles_per_page

        page = max(1, min(page, total_pages))

        start_idx = (page - 1) * styles_per_page
        end_idx = min(start_idx + styles_per_page, total_styles)

        styles_items = list(NEW_MALE_AVATAR_STYLES.items())
        styles_to_show = styles_items[start_idx:end_idx]

        for style_key, style_name in styles_to_show:
            row.append(InlineKeyboardButton(text=style_name, callback_data=f"style_new_male_{style_key}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        nav_row = []
        if total_pages > 1:
            if page > 1:
                nav_row.append(InlineKeyboardButton(text="‚èÆ –ü–µ—Ä–≤–∞—è", callback_data="male_styles_page_1"))
                nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"male_styles_page_{page-1}"))

            nav_row.append(InlineKeyboardButton(text=f"üìÑ {page}/{total_pages}", callback_data="page_info"))

            if page < total_pages:
                nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"male_styles_page_{page+1}"))
                nav_row.append(InlineKeyboardButton(text="‚è≠ –ü–æ—Å–ª–µ–¥–Ω—è—è", callback_data=f"male_styles_page_{total_pages}"))

        if nav_row:
            keyboard.append(nav_row)

        keyboard.extend([
            [InlineKeyboardButton(text="ü§ñ –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–ü–æ–º–æ—â–Ω–∏–∫ AI)", callback_data="enter_custom_prompt_llama")],
            [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–≤—Ä—É—á–Ω—É—é)", callback_data="enter_custom_prompt_manual")],
            [InlineKeyboardButton(text="üîô –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="generate_with_avatar")]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_new_male_avatar_styles_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_new_female_avatar_styles_keyboard(page: int = 1) -> InlineKeyboardMarkup:

    try:
        keyboard = []
        row = []

        styles_per_page = 20
        total_styles = len(NEW_FEMALE_AVATAR_STYLES)
        total_pages = (total_styles + styles_per_page - 1) // styles_per_page

        page = max(1, min(page, total_pages))

        start_idx = (page - 1) * styles_per_page
        end_idx = min(start_idx + styles_per_page, total_styles)

        styles_items = list(NEW_FEMALE_AVATAR_STYLES.items())
        styles_to_show = styles_items[start_idx:end_idx]

        for style_key, style_name in styles_to_show:
            row.append(InlineKeyboardButton(text=style_name, callback_data=f"style_new_female_{style_key}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        nav_row = []
        if total_pages > 1:
            if page > 1:
                nav_row.append(InlineKeyboardButton(text="‚èÆ –ü–µ—Ä–≤–∞—è", callback_data="female_styles_page_1"))
                nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"female_styles_page_{page-1}"))

            nav_row.append(InlineKeyboardButton(text=f"üìÑ {page}/{total_pages}", callback_data="page_info"))

            if page < total_pages:
                nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"female_styles_page_{page+1}"))
                nav_row.append(InlineKeyboardButton(text="‚è≠ –ü–æ—Å–ª–µ–¥–Ω—è—è", callback_data=f"female_styles_page_{total_pages}"))

        if nav_row:
            keyboard.append(nav_row)

        keyboard.extend([
            [InlineKeyboardButton(text="ü§ñ –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–ü–æ–º–æ—â–Ω–∏–∫ AI)", callback_data="enter_custom_prompt_llama")],
            [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–≤—Ä—É—á–Ω—É—é)", callback_data="enter_custom_prompt_manual")],
            [InlineKeyboardButton(text="üîô –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="generate_with_avatar")]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_new_female_avatar_styles_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_aspect_ratio_keyboard(back_callback: str = "back_to_style_selection") -> InlineKeyboardMarkup:

    try:
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω —Å back_callback={back_callback}")
        keyboard = []

        square_ratios = ["1:1"]
        landscape_ratios = ["16:9", "21:9", "4:3", "5:4"]
        portrait_ratios = ["9:16", "9:21", "3:4", "4:5", "2:3"]

        keyboard.append([InlineKeyboardButton(text="üìê –ö–í–ê–î–†–ê–¢–ù–´–ï –§–û–†–ú–ê–¢–´", callback_data="category_info")])
        for ratio in square_ratios:
            if ratio in ASPECT_RATIOS:
                display = f"{ratio} üì± {'–ö–≤–∞–¥—Ä–∞—Ç' if ratio == 'square' else '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π'}"
                keyboard.append([InlineKeyboardButton(text=display, callback_data=f"aspect_{ratio}")])

        keyboard.append([InlineKeyboardButton(text="üñ•Ô∏è –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´", callback_data="category_info")])
        row = []
        for ratio in landscape_ratios:
            if ratio in ASPECT_RATIOS:
                display = f"{ratio} üñ•Ô∏è {'–ê–ª—å–±–æ–º' if ratio == 'landscape' else '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π'}"
                row.append(InlineKeyboardButton(text=display, callback_data=f"aspect_{ratio}"))
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
        if row:
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton(text="üì± –í–ï–†–¢–ò–ö–ê–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´", callback_data="category_info")])
        row = []
        for ratio in portrait_ratios:
            if ratio in ASPECT_RATIOS:
                display = f"{ratio} üì≤ {'–ü–æ—Ä—Ç—Ä–µ—Ç' if ratio == 'portrait' else '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π'}"
                row.append(InlineKeyboardButton(text=display, callback_data=f"aspect_{ratio}"))
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
        if row:
            keyboard.append(row)

        keyboard.extend([
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö", callback_data="aspect_ratio_info")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {len(keyboard)} —Å—Ç—Ä–æ–∫")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_aspect_ratio_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_user_profile_keyboard(user_id: int, bot: Bot) -> InlineKeyboardMarkup:

    try:
        subscription_data = await check_database_user(user_id)
        generations_left, avatar_left = (0, 0)

        if subscription_data and len(subscription_data) >= 2:
            generations_left, avatar_left = subscription_data[0], subscription_data[1]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ create_user_profile_keyboard –¥–ª—è user_id={user_id}: {e}")
        generations_left, avatar_left = ('?', '?')

    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {generations_left} –ø–µ—á–µ–Ω–µ–∫, {avatar_left} –∞–≤–∞—Ç–∞—Ä",
                    callback_data="check_subscription"
                )
            ],
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
            [InlineKeyboardButton(text="üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
            [InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è", callback_data="check_training")],
            [InlineKeyboardButton(text="üë• –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
            [InlineKeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="change_email")],
            [InlineKeyboardButton(text="üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://telegra.ph/Polzovatelskoe-soglashenie-07-26-12")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_user_profile_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_avatar_selection_keyboard(user_id: int) -> InlineKeyboardMarkup:

    try:
        models = await get_user_trainedmodels(user_id)
        active_model_data = await get_active_trainedmodel(user_id)
        active_avatar_id = active_model_data[0] if active_model_data else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ create_avatar_selection_keyboard –¥–ª—è user_id={user_id}: {e}")
        models = []
        active_avatar_id = None

    try:
        keyboard = []
        ready_avatars_exist = False

        if models:
            for model_tuple in models:
                if len(model_tuple) >= 9:
                    avatar_id, _, _, status, _, _, _, _, avatar_name = model_tuple[:9]
                    display_name = avatar_name if avatar_name else f"–ê–≤–∞—Ç–∞—Ä {avatar_id}"

                    if status == 'success':
                        ready_avatars_exist = True
                        if avatar_id == active_avatar_id:
                            button_text = f"‚úÖ {display_name} (–∞–∫—Ç–∏–≤–Ω—ã–π)"
                        else:
                            button_text = f"üîò –í—ã–±—Ä–∞—Ç—å: {display_name}"
                        keyboard.append([
                            InlineKeyboardButton(text=button_text, callback_data=f"select_avatar_{avatar_id}")
                        ])
                else:
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è user_id={user_id}: {model_tuple}")

        if not ready_avatars_exist:
            keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤", callback_data="no_ready_avatars_info")])

        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
            [InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤", callback_data="check_training")],
            [InlineKeyboardButton(text="üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_avatar_selection_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_training_keyboard(user_id: int, photo_count: int) -> InlineKeyboardMarkup:

    try:
        keyboard = []

        if photo_count >= 10:
            keyboard.append([InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!", callback_data="confirm_start_training")])

        if photo_count < 20:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ({photo_count}/20)",
                    callback_data="continue_upload"
                )
            ])

        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_profile")])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}, photo_count={photo_count}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_training_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_admin_keyboard(user_id: Optional[int] = None) -> InlineKeyboardMarkup:

    try:
        admin_panel_button_text = ADMIN_PANEL_BUTTON_NAMES.get(user_id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è user_id={user_id}")

        keyboard = [
            [
                InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_search_user")
            ],
            [
                InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payments"),
                InlineKeyboardButton(text="ÔøΩÔøΩ –û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")
            ],
            [
                InlineKeyboardButton(text="üîó –û—Ç—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_referral_stats"),
                InlineKeyboardButton(text="üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="admin_visualization")
            ],
            [
                InlineKeyboardButton(text="üí∞ –†–∞—Å—Ö–æ–¥—ã Replicate", callback_data="admin_replicate_costs"),
                InlineKeyboardButton(text="üßπ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="admin_failed_avatars")
            ],
            [
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="broadcast_all"),
                InlineKeyboardButton(text="üì¢ –û–ø–ª–∞—Ç–∏–≤—à–∏–º", callback_data="broadcast_paid")
            ],
            [
                InlineKeyboardButton(text="üì¢ –ù–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º", callback_data="broadcast_non_paid"),
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π", callback_data="broadcast_with_payment")
            ],
            [InlineKeyboardButton(text="üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏", callback_data="list_broadcasts")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_admin_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_admin_user_actions_keyboard(target_user_id: int, is_blocked: bool) -> InlineKeyboardMarkup:

    try:
        block_text = "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if is_blocked else "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        block_callback = f"block_user_{target_user_id}_unblock" if is_blocked else f"block_user_{target_user_id}_block"

        keyboard = [
            [
                InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_user_profile_{target_user_id}"),
                InlineKeyboardButton(text="üñº –ê–≤–∞—Ç–∞—Ä—ã", callback_data=f"user_avatars_{target_user_id}")
            ],
            [
                InlineKeyboardButton(text="üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ", callback_data=f"admin_generate:{target_user_id}"),
                InlineKeyboardButton(text="üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", callback_data=f"admin_video:{target_user_id}")
            ],
            [
                InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data=f"change_balance_{target_user_id}"),
                InlineKeyboardButton(text="üìú –õ–æ–≥–∏", callback_data=f"user_logs_{target_user_id}")
            ],
            [
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"chat_with_user_{target_user_id}"),
                InlineKeyboardButton(text=block_text, callback_data=block_callback)
            ],
            [
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–æ–≤", callback_data=f"reset_avatar_{target_user_id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{target_user_id}")
            ]
        ]

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_admin_user_actions_keyboard –¥–ª—è target_user_id={target_user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_subscription_keyboard(hide_mini_tariff: bool = False) -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ",
                    callback_data="ignore"
                )
            ]
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}
        if hide_mini_tariff:
            available_tariffs = {k: v for k, v in available_tariffs.items() if k != "–º–∏–Ω–∏"}

        for plan_key, plan_details in available_tariffs.items():
            keyboard.append([
                InlineKeyboardButton(
                    text=plan_details["display"],
                    callback_data=plan_details["callback"]
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
        ])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {len(keyboard)} —Å—Ç—Ä–æ–∫, hide_mini_tariff={hide_mini_tariff}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_subscription_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_rating_keyboard(
    generation_type: Optional[str] = None,
    model_key: Optional[str] = None,
    user_id: Optional[int] = None,
    bot: Optional[Bot] = None
) -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [
                InlineKeyboardButton(text="1‚≠ê", callback_data="rate_1"),
                InlineKeyboardButton(text="2‚≠ê", callback_data="rate_2"),
                InlineKeyboardButton(text="3‚≠ê", callback_data="rate_3"),
                InlineKeyboardButton(text="4‚≠ê", callback_data="rate_4"),
                InlineKeyboardButton(text="5‚≠ê", callback_data="rate_5")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat_last_generation"),
                InlineKeyboardButton(text="‚ú® –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_menu")
            ]
        ]

        if user_id and bot:
            try:
                subscription_data = await check_user_resources(bot, user_id, required_photos=5)
                if isinstance(subscription_data, tuple) and len(subscription_data) >= 2:
                    generations_left = subscription_data[0]
                    if generations_left < 5:
                        keyboard.append([InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="subscribe")])
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_data}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ create_rating_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)

        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_rating_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_confirmation_keyboard(
    confirm_callback: str = "confirm_action",
    cancel_callback: str = "cancel_action",
    confirm_text: str = "‚úÖ –î–∞",
    cancel_text: str = "‚ùå –ù–µ—Ç"
) -> InlineKeyboardMarkup:

    try:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=confirm_text, callback_data=confirm_callback),
                InlineKeyboardButton(text=cancel_text, callback_data=cancel_callback)
            ]
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_confirmation_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_back_keyboard(
    callback_data: str = "back_to_menu",
    text: str = "üîô –ù–∞–∑–∞–¥"
) -> InlineKeyboardMarkup:

    try:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=text, callback_data=callback_data)]
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_back_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_prompt_selection_keyboard(
    back_callback_data: str = "back_to_menu",
    style_source_dict: Optional[dict] = None,
    style_prefix: str = "style_"
) -> InlineKeyboardMarkup:

    try:
        keyboard = []
        row = []

        if not style_source_dict:
            style_source_dict = {**NEW_MALE_AVATAR_STYLES, **NEW_FEMALE_AVATAR_STYLES}

        if not style_source_dict:
            keyboard.append([InlineKeyboardButton(text="‚ö†Ô∏è –°—Ç–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", callback_data="no_styles_configured")])
        else:
            styles_to_show = list(style_source_dict.items())

            for style_key, style_name in styles_to_show:
                row.append(InlineKeyboardButton(text=style_name, callback_data=f"{style_prefix}{style_key}"))
                if len(row) == 2:
                    keyboard.append(row)
                    row = []

            if row:
                keyboard.append(row)

        keyboard.extend([
            [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (–≤—Ä—É—á–Ω—É—é)", callback_data="enter_custom_prompt_manual")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_prompt_selection_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_video_status_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∏–¥–µ–æ", callback_data="my_videos")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_video_status_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_payment_success_keyboard(user_id: int) -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
            [InlineKeyboardButton(text="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate_menu")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_payment_success_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_photo_upload_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="cancel_upload")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help_upload")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_photo_upload_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_generation_in_progress_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="‚è∏ –û—Ç–º–µ–Ω–∞ (–≤ –º–µ–Ω—é)", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_generation_in_progress_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_broadcast_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="send_broadcast_no_text")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_broadcast_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_faq_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="üì∏ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ?", callback_data="faq_photo")],
            [InlineKeyboardButton(text="üé¨ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ?", callback_data="faq_video")],
            [InlineKeyboardButton(text="üë§ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä?", callback_data="faq_avatar")],
            [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º", callback_data="faq_prompts")],
            [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="faq_problems")],
            [InlineKeyboardButton(text="üíé –û –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="faq_subscription")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_faq_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_support_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/AXIDI_Help")],
            [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_support_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_error_keyboard() -> InlineKeyboardMarkup:

    try:
        keyboard = [
            [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back_to_menu")],
            [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_error_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_referral_keyboard(user_id: int, bot_username: str) -> InlineKeyboardMarkup:

    try:
        referral_link = f"t.me/{bot_username}?start=ref_{user_id}"

        keyboard = [
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∞–π –ø–µ—á–µ–Ω—å–∫–∏ –∑–∞ –¥—Ä—É–≥–∞!", callback_data="ignore")],
            [
                InlineKeyboardButton(
                    text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                    url=f"https://t.me/share/url?url={referral_link}&text=–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –∫—Ä—É—Ç–æ–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ! –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å–Ω—ã–µ –ø–µ—á–µ–Ω—å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
                )
            ],
            [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_referral_link")],
            [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_referral_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def send_avatar_training_message(bot, user_id: int, text: str, reply_markup=None, parse_mode=ParseMode.MARKDOWN) -> None:

    try:
        avatar_image_path = "/root/axidi_test/images/avatar.img"

        if os.path.exists(avatar_image_path):
            try:
                with open(avatar_image_path, 'rb') as photo:
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                return
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å avatar.img –¥–ª—è user_id={user_id}: {e}", exc_info=True)

        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_avatar_training_message –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]),
            parse_mode=ParseMode.MARKDOWN
        )

async def create_payment_only_keyboard(user_id: int, time_since_registration: float, days_since_registration: int, last_reminder_type: str = None, is_old_user: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        time_since_registration: –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        days_since_registration: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        last_reminder_type: –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        is_old_user: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ –æ—Ç—Å–µ—á–∫–∏)

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        subscription_data = await check_database_user(user_id)
        payments = await get_user_payments(user_id)
        is_paying_user = bool(payments) or (subscription_data and len(subscription_data) > 5 and not bool(subscription_data[5]))
        logger.debug(f"create_payment_only_keyboard: user_id={user_id}, is_paying_user={is_paying_user}, days_since_registration={days_since_registration}, time_since_registration={time_since_registration}, is_old_user={is_old_user}")

        if is_paying_user:
            return await create_subscription_keyboard(hide_mini_tariff=False)

        keyboard = []
        available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}

        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        if is_old_user:
            keyboard.extend([
                [InlineKeyboardButton(text=available_tariffs["–∫–æ–º—Ñ–æ—Ä—Ç"]["display"], callback_data="pay_1199")],
                [InlineKeyboardButton(text=available_tariffs["–ª–∞–π—Ç"]["display"], callback_data="pay_599")],
                [InlineKeyboardButton(text=available_tariffs["–º–∏–Ω–∏"]["display"], callback_data="pay_399")],
                [InlineKeyboardButton(text=available_tariffs["–∞–≤–∞—Ç–∞—Ä"]["display"], callback_data="pay_590")]
            ])
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id}")
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ
            if days_since_registration == 0:
                logger.debug(f"Day 0: time_since_registration={time_since_registration}")
                if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                    tariff_key = "–∫–æ–º—Ñ–æ—Ä—Ç"
                    callback_data = "pay_1199"
                elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                    tariff_key = "–ª–∞–π—Ç"
                    callback_data = "pay_599"
                else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                    tariff_key = "–º–∏–Ω–∏"
                    callback_data = "pay_399"
            elif days_since_registration == 1:
                tariff_key = "–ª–∞–π—Ç"
                callback_data = "pay_599"
            elif 2 <= days_since_registration <= 4:
                tariff_key = "–º–∏–Ω–∏"
                callback_data = "pay_399"
            else:
                # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å days_since_registration >= 5 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
                keyboard.extend([
                    [InlineKeyboardButton(text=available_tariffs["–∫–æ–º—Ñ–æ—Ä—Ç"]["display"], callback_data="pay_1199")],
                    [InlineKeyboardButton(text=available_tariffs["–ª–∞–π—Ç"]["display"], callback_data="pay_599")],
                    [InlineKeyboardButton(text=available_tariffs["–º–∏–Ω–∏"]["display"], callback_data="pay_399")],
                    [InlineKeyboardButton(text=available_tariffs["–∞–≤–∞—Ç–∞—Ä"]["display"], callback_data="pay_590")]
                ])
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id} —Å days_since_registration={days_since_registration}")
                keyboard.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu_safe")])
                keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="tariff_info")])
                return InlineKeyboardMarkup(inline_keyboard=keyboard)

            tariff = TARIFFS.get(tariff_key)
            if not tariff:
                logger.error(f"–¢–∞—Ä–∏—Ñ {tariff_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id={user_id}")
                return InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞", callback_data="error")]
                ])

            keyboard.append([InlineKeyboardButton(text=tariff["display"], callback_data=callback_data)])

        # –£—Å–ª–æ–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–í –º–µ–Ω—é" –∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"
        generations_left = subscription_data[0] if subscription_data and len(subscription_data) > 0 else 0
        avatar_left = subscription_data[1] if subscription_data and len(subscription_data) > 1 else 0
        if generations_left > 0 or avatar_left > 0 or user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu_safe")])
            keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="tariff_info")])
        else:
            keyboard.append([InlineKeyboardButton(text="üîê –ö—É–ø–∏ –ø–∞–∫–µ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞", callback_data="subscribe")])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}: days={days_since_registration}, time={time_since_registration}, is_old_user={is_old_user}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_payment_only_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞", callback_data="error")]
        ])

async def create_broadcast_with_payment_audience_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üë• –í—Å–µ–º", callback_data="broadcast_with_payment_all")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏–≤—à–∏–º", callback_data="broadcast_with_payment_paid")],
            [InlineKeyboardButton(text="üÜì –ù–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º", callback_data="broadcast_with_payment_non_paid")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_broadcast_with_payment_audience_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_dynamic_broadcast_keyboard(buttons: List[Dict[str, str]], user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        keyboard = []
        row = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_data = await check_database_user(user_id)
        payments = await get_user_payments(user_id)
        is_paying_user = bool(payments) or (subscription_data and len(subscription_data) > 5 and not bool(subscription_data[5]))
        has_resources = subscription_data and len(subscription_data) > 1 and (subscription_data[0] > 0 or subscription_data[1] > 0)
        is_admin = user_id in ADMIN_IDS

        for button in buttons[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∫–Ω–æ–ø–æ–∫
            button_text = button["text"][:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            callback_data = button["callback_data"][:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ callback'–∏ –∏–∑ ALLOWED_BROADCAST_CALLBACKS (–∫—Ä–æ–º–µ 'subscribe') –Ω–∞ 'subscribe' –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –±–µ–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
            if (not is_paying_user and not has_resources and not is_admin and
                callback_data in ALLOWED_BROADCAST_CALLBACKS and callback_data != "subscribe"):
                callback_data = "subscribe"
                logger.debug(f"–ó–∞–º–µ–Ω—ë–Ω callback_data='{button['callback_data']}' –Ω–∞ 'subscribe' –¥–ª—è user_id={user_id}")
            row.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
            if len(row) == 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è user_id={user_id} —Å {len(buttons)} –∫–Ω–æ–ø–∫–∞–º–∏: {buttons}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_dynamic_broadcast_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[])
