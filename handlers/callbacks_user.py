import re
import asyncio
import aiosqlite
import logging
import os
import time
import pytz
from aiogram.utils.markdown import text, bold
from typing import Optional
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command
from datetime import datetime
from states import BotStates, VideoStates
from config import ADMIN_IDS, DATABASE_PATH, TARIFFS
from generation_config import IMAGE_GENERATION_MODELS, ASPECT_RATIOS, NEW_MALE_AVATAR_STYLES, NEW_FEMALE_AVATAR_STYLES, get_video_generation_cost
from style import new_male_avatar_prompts, new_female_avatar_prompts
from database import (
    check_database_user, update_user_balance, add_rating, get_user_trainedmodels,
    get_active_trainedmodel, delete_trained_model, get_user_video_tasks,
    get_user_rating_and_registration, get_user_generation_stats, get_user_payments,
    is_user_blocked, user_cache, update_user_credits, check_user_resources, is_old_user
)
from keyboards import (
    create_main_menu_keyboard, create_photo_generate_menu_keyboard,
    create_video_generate_menu_keyboard, create_video_styles_keyboard,
    create_aspect_ratio_keyboard, create_back_keyboard, create_avatar_style_choice_keyboard,
    create_subscription_keyboard, create_user_profile_keyboard, create_prompt_selection_keyboard, create_referral_keyboard,
    create_rating_keyboard, create_new_male_avatar_styles_keyboard, create_new_female_avatar_styles_keyboard, create_avatar_selection_keyboard, create_payment_only_keyboard
)
from generation.training import TrainingStates
from generation.videos import handle_generate_video_callback, create_video_photo_keyboard
from generation import reset_generation_context, generate_image, start_training, check_training_status
from handlers.utils import (
    safe_escape_markdown as escape_md, safe_answer_callback,
    check_resources, check_active_avatar, check_style_config, create_payment_link,
    get_tariff_text, send_typing_action, clean_admin_context, escape_message_parts, safe_escape_markdown
)
from handlers.onboarding import send_onboarding_message

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback'–æ–≤
user_callbacks_router = Router()

async def handle_proceed_to_payment_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä—ë–¥ üöÄ' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤."""
    logger.info(f"handle_proceed_to_payment_callback: user_id={user_id}")

    try:
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è user_id={user_id}")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        keyboard = await create_subscription_keyboard()
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}")

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            escape_md("üéØ –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ!", version=2) + "\n\n" +
            escape_md("üí° –ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ –≤–∫–ª—é—á–∞–µ—Ç:", version=2) + "\n" +
            escape_md("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ", version=2) + "\n" +
            escape_md("‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –≤ –ª—é–±—ã—Ö —Å—Ç–∏–ª—è—Ö", version=2) + "\n" +
            escape_md("‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", version=2) + "\n" +
            escape_md("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7", version=2)
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await query.message.edit_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as edit_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {edit_error}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.answer(
                text=message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )

        await query.answer()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_proceed_to_payment_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def handle_user_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    user_id = query.from_user.id
    callback_data = query.data
    logger.info(f"handle_user_callback: user_id={user_id}, callback_data={callback_data}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å callback: {callback_data}")
        await query.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        await query.message.answer(
            escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    user_data = await state.get_data()
    if any(key in user_data for key in [
        'awaiting_broadcast_message', 'awaiting_broadcast_schedule',
        'awaiting_balance_change', 'awaiting_block_reason', 'awaiting_user_search'
    ]):
        logger.warning(f"User {user_id} in FSM state, clearing FSM data: {user_data}")
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if user_data.get('admin_generation_for_user') or user_data.get('admin_target_user_id'):
        admin_callbacks = [
            'select_new_male_avatar_styles', 'select_new_female_avatar_styles',
            'confirm_generation', 'back_to_style_selection', 'back_to_aspect_selection',
            'enter_custom_prompt_manual', 'enter_custom_prompt_llama',
            'confirm_assisted_prompt', 'edit_assisted_prompt', 'video_style_'
        ]
        if (callback_data in admin_callbacks or
            callback_data.startswith(('style_', 'male_styles_page_', 'female_styles_page_', 'aspect_', 'video_style_'))):
            logger.info(f"User {user_id} in admin generation state, preserving context for callback: {callback_data}")
        else:
            logger.warning(f"User {user_id} in admin generation state, clearing admin context")
            await clean_admin_context(state)

    try:
        if callback_data == "proceed_to_payment":
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º proceed_to_payment –¥–ª—è user_id={user_id}")
            await handle_proceed_to_payment_callback(query, state, user_id)
        elif callback_data == "photo_generate_menu":
            await handle_photo_generate_menu_callback(query, state, user_id)
        elif callback_data == "photo_transform":
            from handlers.photo_transform import start_photo_transform
            await start_photo_transform(query, state)
        elif callback_data == "video_generate_menu":
            await handle_video_generate_menu_callback(query, state, user_id)
        elif callback_data == "generate_menu":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            await handle_photo_generate_menu_callback(query, state, user_id)
        elif callback_data == "photo_to_photo":
            await handle_photo_to_photo_callback(query, state, user_id)
        elif callback_data == "ai_video_v2_1":
            await handle_ai_video_callback(query, state, user_id)
        elif callback_data == "repeat_last_generation":
            await handle_repeat_last_generation_callback(query, state, user_id)
        elif callback_data == "generate_with_avatar":
            await handle_style_selection_callback(query, state)
        elif callback_data == "select_new_male_avatar_styles":
            await handle_style_selection_callback(query, state)
        elif callback_data == "select_new_female_avatar_styles":
            await handle_style_selection_callback(query, state)
        elif callback_data.startswith("style_"):
            await handle_style_choice_callback(query, state)
        elif callback_data.startswith("video_style_"):
            await handle_video_style_choice_callback(query, state)
        elif callback_data.startswith("male_styles_page_"):
            await handle_male_styles_page_callback(query, state)
        elif callback_data.startswith("female_styles_page_"):
            await handle_female_styles_page_callback(query, state)
        elif callback_data == "page_info":
            await query.answer("‚ÑπÔ∏è –≠—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∏–ª–µ–π.", show_alert=True)
        elif callback_data == "enter_custom_prompt_manual":
            await handle_custom_prompt_manual_callback(query, state)
        elif callback_data == "confirm_video_generation":
            await handle_confirm_video_generation_callback(query, state, user_id)
        elif callback_data == "enter_custom_prompt_llama":
            await handle_custom_prompt_llama_callback(query, state,)
        elif callback_data == "confirm_assisted_prompt":
            await handle_confirm_assisted_prompt_callback(query, state,)
        elif callback_data == "edit_assisted_prompt":
            await handle_edit_assisted_prompt_callback(query, state, user_id)
        elif callback_data == "skip_prompt":
            await handle_skip_prompt_callback(query, state)
        elif callback_data.startswith("aspect_"):
            await handle_aspect_ratio_callback(query, state)
        elif callback_data == "aspect_ratio_info":
            from handlers.callbacks_utils import handle_aspect_ratio_info_callback
            await handle_aspect_ratio_info_callback(query, state, user_id)
        elif callback_data == "back_to_aspect_selection":
            await handle_back_to_aspect_selection_callback(query, state)
        elif callback_data == "back_to_style_selection":
            await handle_back_to_style_selection_callback(query, state, user_id)
        elif callback_data == "confirm_generation":
            await handle_confirm_generation_callback(query, state, user_id)
        elif callback_data == "confirm_photo_quality":
            await handle_confirm_photo_quality_callback(query, state, user_id)
        elif callback_data == "skip_mask":
            await handle_skip_mask_callback(query, state, user_id)
        elif callback_data.startswith("rate_"):
            await handle_rating_callback(query, state)
        elif callback_data == "user_profile":
            await handle_user_profile_callback(query, state, user_id)
        elif callback_data == "check_subscription":
            await handle_check_subscription_callback(query, state, user_id)
        elif callback_data == "user_stats":
            await handle_user_stats_callback(query, state, user_id)
        elif callback_data == "subscribe":
            await handle_subscribe_callback(query, state, user_id)
        elif callback_data.startswith("pay_"):
            await handle_payment_callback(query, state, user_id, callback_data)
        elif callback_data == "change_email":
            await handle_change_email_callback(query, state, user_id)
        elif callback_data == "confirm_change_email":
            await handle_confirm_change_email_callback(query, state, user_id)
        elif callback_data == "my_avatars":
            await handle_my_avatars_callback(query, state, user_id)
        elif callback_data.startswith("select_avatar_"):
            await handle_select_avatar_callback(query, state, user_id, callback_data)
        elif callback_data == "train_flux":
            await handle_train_flux_callback(query, state, user_id)
        elif callback_data == "continue_upload":
            await handle_continue_upload_callback(query, state, user_id)
        elif callback_data == "start_training":
            await start_training(query.message, state, user_id)
        elif callback_data == "confirm_start_training":
            await handle_confirm_start_training_callback(query, state, user_id)
        elif callback_data == "back_to_avatar_name_input":
            await handle_back_to_avatar_name_input_callback(query, state, user_id)
        elif callback_data.startswith("use_suggested_trigger_"):
            await handle_use_suggested_trigger_callback(query, state, user_id, callback_data)
        elif callback_data == "check_training":
            user_data = await state.get_data()
            target_user_id = user_data.get('admin_generation_for_user', user_id)
            from handlers.commands import check_training
            await check_training(query.message, state, target_user_id)
        elif callback_data == "terms_of_service":
            from handlers.callbacks_utils import handle_terms_of_service_callback
            await handle_terms_of_service_callback(query, state, user_id)
        elif callback_data == "tariff_info":
            await handle_tariff_info_callback(query, state, user_id)
        elif callback_data == "back_to_menu":
            await handle_back_to_menu_callback(query, state, user_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data} –¥–ª—è user_id={user_id}")
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            await query.message.answer(
                escape_md("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π /menu.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback –¥–ª—è user_id={user_id}, data={callback_data}: {e}", exc_info=True)
        await state.clear()
        await safe_answer_callback(query, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_tariff_info_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö'."""
    logger.debug(f"handle_tariff_info_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    subscription_data = await check_database_user(user_id)
    first_purchase = bool(subscription_data[5]) if subscription_data and len(subscription_data) > 5 else True
    payments = await get_user_payments(user_id)
    is_paying_user = bool(payments) or not first_purchase

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    moscow_tz = pytz.timezone('Europe/Moscow')
    registration_date = datetime.now(moscow_tz)
    time_since_registration = float('inf')
    days_since_registration = 0
    last_reminder_type = subscription_data[9] if subscription_data and len(subscription_data) > 9 else None
    if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
        try:
            registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
            time_since_registration = (datetime.now(moscow_tz) - registration_date).total_seconds()
            days_since_registration = (datetime.now(moscow_tz).date() - registration_date.date()).days
            logger.debug(f"Calculated time_since_registration={time_since_registration}, days_since_registration={days_since_registration} for user_id={user_id}")
        except ValueError as e:
            logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {subscription_data[10]}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞. –û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
    is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} is_old_user={is_old_user_flag}")

    try:
        text_parts = [
            "üî• –ì–æ—Ä—è—á–∏–π –≤—ã–±–æ—Ä –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ!\n\n",
            "–•–æ—á–µ—à—å –∫—Ä—É—Ç—ã–µ –∫–∞–¥—Ä—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç? –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–∞–∫–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Ç–≤–æ—Ä–∏—Ç—å! üöÄ\n\n",
        ]
        keyboard = []
        available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}

        if is_paying_user or is_old_user_flag or (days_since_registration >= 5 and last_reminder_type == "reminder_day5"):
            # –î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ—Å–ª–µ 5 –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
            tariff_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=True, time_since_registration=time_since_registration)
            for tariff_key, tariff in available_tariffs.items():
                keyboard.append([InlineKeyboardButton(text=tariff["display"], callback_data=tariff["callback"])])
            logger.debug(f"–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è user_id={user_id} (is_paying_user={is_paying_user}, is_old_user={is_old_user_flag}, days_since_registration={days_since_registration}, last_reminder_type={last_reminder_type})")
            await query.message.edit_text(
                text=tariff_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id} (is_paying_user={is_paying_user})")
        else:
            # –î–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞—Ä–∏—Ñ—É
            if days_since_registration == 0:
                if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                    tariff_key = "–∫–æ–º—Ñ–æ—Ä—Ç"
                    text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                    text_parts.append("–ö–æ–º—Ñ–æ—Ä—Ç: 70 –ø–µ—á–µ–Ω–µ–∫ + 1 –∞–≤–∞—Ç–∞—Ä –∑–∞ 1199‚ÇΩ\n")
                elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                    tariff_key = "–ª–∞–π—Ç"
                    text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                    text_parts.append("–õ–∞–π—Ç: 30 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 599‚ÇΩ\n")
                else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                    tariff_key = "–º–∏–Ω–∏"
                    text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                    text_parts.append("–ú–∏–Ω–∏: 10 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 399‚ÇΩ\n")
            elif days_since_registration == 1:
                tariff_key = "–ª–∞–π—Ç"
                text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                text_parts.append("–õ–∞–π—Ç: 30 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 599‚ÇΩ\n")
            elif 2 <= days_since_registration <= 4:
                tariff_key = "–º–∏–Ω–∏"
                text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                text_parts.append("–ú–∏–Ω–∏: 10 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 399‚ÇΩ\n")

            if first_purchase:
                text_parts.append("\n")
                text_parts.append("üéÅ –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –∫ –ª—é–±–æ–º—É –∫—É–ø–ª–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –≤–ø–µ—Ä–≤—ã–µ 1 –ê–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!\n")

            text_parts.append("\n")
            text_parts.append("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–∞–∫–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Ç–≤–æ—Ä–∏—Ç—å üöÄ")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.append([InlineKeyboardButton(text=available_tariffs[tariff_key]["display"], callback_data=available_tariffs[tariff_key]["callback"])])
            keyboard.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")])

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            MAX_MESSAGE_LENGTH = 4000
            messages = []
            current_message = []
            current_length = 0

            for part in text_parts:
                part_length = len(part) + 1
                if current_length + part_length < MAX_MESSAGE_LENGTH:
                    current_message.append(part)
                    current_length += part_length
                else:
                    messages.append(''.join(current_message))
                    current_message = [part]
                    current_length = part_length
            if current_message:
                messages.append(''.join(current_message))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for i, message_text in enumerate(messages):
                text = escape_message_parts(message_text, version=2)
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard) if i == len(messages) - 1 else None
                await query.message.answer(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                logger.debug(f"handle_tariff_info_callback: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(messages)}, –¥–ª–∏–Ω–∞={len(text)}")
            logger.info(f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ user_id={user_id}: {tariff_key}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help"),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_back_to_menu_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    logger.debug(f"handle_back_to_menu_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await state.clear()
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 11:
        logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_data}")
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            version=2
        )
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    generations_left = subscription_data[0] if subscription_data and len(subscription_data) > 0 else 0
    avatar_left = subscription_data[1] if subscription_data and len(subscription_data) > 1 else 0
    first_purchase = bool(subscription_data[5]) if len(subscription_data) > 5 else True
    created_at = subscription_data[10] if subscription_data and len(subscription_data) > 10 else None
    last_reminder_type = subscription_data[9] if subscription_data and len(subscription_data) > 9 else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    payments = await get_user_payments(user_id)
    is_paying_user = bool(payments) or not first_purchase
    logger.debug(f"handle_back_to_menu_callback: user_id={user_id}, is_paying_user={is_paying_user}, first_purchase={first_purchase}")

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏ –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    registration_date = datetime.now(moscow_tz)
    time_since_registration = float('inf')
    days_since_registration = 0
    if created_at:
        try:
            registration_date = moscow_tz.localize(datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S'))
            time_since_registration = (datetime.now(moscow_tz) - registration_date).total_seconds()
            days_since_registration = (datetime.now(moscow_tz).date() - registration_date.date()).days
            logger.debug(f"Calculated time_since_registration={time_since_registration} for user_id={user_id}")
        except ValueError as e:
            logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {created_at}. –û—à–∏–±–∫–∞: {e}")

    if generations_left > 0 or avatar_left > 0 or user_id in ADMIN_IDS:
        await delete_all_videos(state, user_id, query.bot)
        menu_text = (
            "üåà –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? üòä\n\n"
            "üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n"
            "üë§ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ\n"
            "üí≥ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n"
            "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
        )
        try:
            await query.message.answer(
                escape_md(menu_text),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help"),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    else:
        # –î–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
        if not is_paying_user:
            text = escape_md(
                "üîê –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é! üòî\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–≤–æ—Ä–∏—Ç—å —Å PixelPie. üöÄ",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_payment_only_keyboard(user_id, time_since_registration, days_since_registration, last_reminder_type),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–î–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è user_id={user_id} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
        else:
            # –î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
            tariff_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=True)
            try:
                await query.message.answer(
                    tariff_text,
                    reply_markup=await create_subscription_keyboard(hide_mini_tariff=False),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                logger.info(f"–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
                await query.message.answer(
                    escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help"),
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )

    await state.update_data(user_id=user_id)

async def delete_all_videos(state: FSMContext, user_id: int, bot: Bot) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ (–º–µ–Ω—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏), –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."""
    user_data = await state.get_data()
    for key in ['menu_video_message_id', 'generation_video_message_id']:
        if key in user_data:
            try:
                await bot.delete_message(chat_id=user_id, message_id=user_data[key])
                await state.update_data({key: None})
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ {key} –¥–ª—è user_id={user_id}: {e}")

async def handle_photo_generate_menu_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}")
    await delete_all_videos(state, user_id, query.bot)
    await state.clear()
    text = (
        escape_md("‚ú® –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:", version=2) + "\n\n" +
        escape_md("üì∏ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º", version=2) + "\n" +
        escape_md("–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º AI-–∞–≤–∞—Ç–∞—Ä–æ–º. ", version=2) +
        escape_md("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –∑–∞ —Å–µ–∫—É–Ω–¥—ã!", version=2) + "\n\n" +
        escape_md("üñº –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É", version=2) + "\n" +
        escape_md("–ó–∞–≥—Ä—É–∑–∏ –ª—é–±–æ–µ —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏ –µ–≥–æ –≤ —à–µ–¥–µ–≤—Ä —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º. ", version=2) +
        escape_md("–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –æ–±—Ä–∞–∑–æ–≤!", version=2)
    )
    try:
        await query.message.answer(
            text,
            reply_markup=await create_photo_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–ú–µ–Ω—é —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_video_generate_menu_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}")
    await delete_all_videos(state, user_id, query.bot)
    await state.clear()
    await state.update_data(acting_as_user=True, user_id=user_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
    text = escape_message_parts(
        "üé¨ –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n",
        "üé¨ AI-–≤–∏–¥–µ–æ (Kling 2.1)\n",
        "–û–∂–∏–≤–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ—Ä–æ—Ç–∫–æ–µ ",
        "–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏.",
        version=2
    )
    try:
        await query.message.answer(
            text,
            reply_markup=await create_video_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–ú–µ–Ω—é –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_generate_with_avatar_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º."""
    user_id = query.from_user.id
    logger.debug(f"handle_generate_with_avatar_callback –≤—ã–∑–≤–∞–Ω: user_id={user_id}")

    try:
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if not is_admin_generation:
            await state.clear()
            await state.update_data(generation_type='with_avatar', model_key='flux-trained')
        else:
            await state.update_data(
                generation_type='with_avatar',
                model_key='flux-trained',
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º' –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")

        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏
        try:
            if hasattr(user_cache, 'invalidate'):
                await user_cache.delete(target_user_id)
                logger.debug(f"–ö—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id={target_user_id}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ user_cache –¥–ª—è user_id={target_user_id}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_data = await check_resources(query.bot, target_user_id)
        if not subscription_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={target_user_id}: subscription_data={subscription_data}")
            await state.clear()
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ subscription_data ‚Äî —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂
        if not isinstance(subscription_data, tuple) or len(subscription_data) < 10:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={target_user_id}: {subscription_data}")
            await state.clear()
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            await query.message.answer(
                escape_md("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        generations_left, avatar_left, has_trained_model, _, _, _, _, active_avatar_id, _, is_blocked, _, _, _, _ = subscription_data
        logger.info(f"–ë–∞–ª–∞–Ω—Å user_id={target_user_id}: generations_left={generations_left}, avatar_left={avatar_left}, has_trained_model={has_trained_model}, active_avatar_id={active_avatar_id}, is_blocked={is_blocked}")

        if is_blocked:
            logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={target_user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º'")
            await state.clear()
            await query.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            await query.message.answer(
                escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        if not has_trained_model or not active_avatar_id:
            logger.info(f"–ù–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={target_user_id}")
            await state.clear()
            text = escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ /menu ‚Üí –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã.", version=2)
            await query.answer("‚ùå –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞", show_alert=True)
            await query.message.answer(
                text, reply_markup=await create_user_profile_keyboard(user_id, query.bot),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        if not is_admin_generation and generations_left < 1:
            logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è user_id={target_user_id}: generations_left={generations_left}")
            await state.clear()
            text = escape_md("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /menu ‚Üí –¢–∞—Ä–∏—Ñ—ã.", version=2)
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", show_alert=True)
            await query.message.answer(
                text, reply_markup=await create_subscription_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        text = escape_md(f"üé® –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:", version=2)
        keyboard = await create_avatar_style_choice_keyboard()
        await query.answer("–í—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception:
            pass

        await query.message.answer(
            text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
        await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_generate_with_avatar_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_style_selection_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π."""
    user_id = query.from_user.id
    callback_data = query.data
    logger.debug(f"handle_style_selection_callback –≤—ã–∑–≤–∞–Ω: user_id={user_id}, callback_data={callback_data}")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        generation_type = user_data.get('generation_type', 'with_avatar')
        model_key = user_data.get('model_key', 'flux-trained')
        current_style_set = user_data.get('current_style_set', 'generic_avatar')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )
        else:
            await state.clear()

        await state.update_data(generation_type=generation_type, model_key=model_key)
        logger.info(f"–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}, target_user_id={target_user_id}: callback_data={callback_data}")

        if callback_data == "select_new_male_avatar_styles" or (callback_data == "back_to_style_selection" and current_style_set == 'new_male_avatar'):
            await state.update_data(current_style_set='new_male_avatar', selected_gender='man')
            if not check_style_config('new_male_avatar'):
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}")
                await state.clear()
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π", show_alert=True)
                await query.message.answer(
                    escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return
            keyboard = await create_new_male_avatar_styles_keyboard(page=1)
            text = escape_md(f"üë® –í—ã–±–µ—Ä–∏ –º—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:", version=2)
        elif callback_data == "select_new_female_avatar_styles" or (callback_data == "back_to_style_selection" and current_style_set == 'new_female_avatar'):
            await state.update_data(current_style_set='new_female_avatar', selected_gender='woman')
            if not check_style_config('new_female_avatar'):
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}")
                await state.clear()
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π", show_alert=True)
                await query.message.answer(
                    escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return
            keyboard = await create_new_female_avatar_styles_keyboard(page=1)
            text = escape_md(f"üë© –í—ã–±–µ—Ä–∏ –∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:", version=2)
        else:
            await state.update_data(current_style_set='generic_avatar')
            if not check_style_config('generic_avatar'):
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—â–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}")
                await state.clear()
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π", show_alert=True)
                await query.message.answer(
                    escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—â–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return
            keyboard = await create_prompt_selection_keyboard(back_callback_data="generate_with_avatar", style_source_dict={**NEW_MALE_AVATAR_STYLES, **NEW_FEMALE_AVATAR_STYLES})
            text = escape_md(f"üé® –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:", version=2)

        try:
            await query.message.delete()
        except Exception:
            pass
        try:
            await query.message.edit_text(
                text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception:
            await query.message.answer(
                text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
            )
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∏–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}: callback_data={callback_data}")
        await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_style_selection_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_style_choice_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""
    user_id = query.from_user.id
    callback_data = query.data
    logger.info(f"handle_style_choice_callback: user_id={user_id}, callback_data={callback_data}")

    try:
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        generation_type = user_data.get('generation_type', 'with_avatar')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∏ –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback_data
        if callback_data.startswith("style_generic_"):
            style_key = callback_data.replace("style_generic_", "")
            prompt = new_male_avatar_prompts.get(style_key) or new_female_avatar_prompts.get(style_key)
            style_name = NEW_MALE_AVATAR_STYLES.get(style_key) or NEW_FEMALE_AVATAR_STYLES.get(style_key, style_key)
        elif callback_data.startswith("style_new_male_"):
            style_key = callback_data.replace("style_new_male_", "")
            prompt = new_male_avatar_prompts.get(style_key)
            style_name = NEW_MALE_AVATAR_STYLES.get(style_key, style_key)
            logger.debug(f"–ú—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å: style_key={style_key}, prompt={prompt}, style_name={style_name}")
        elif callback_data.startswith("style_new_female_"):
            style_key = callback_data.replace("style_new_female_", "")
            prompt = new_female_avatar_prompts.get(style_key)
            style_name = NEW_FEMALE_AVATAR_STYLES.get(style_key, style_key)
            logger.debug(f"–ñ–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å: style_key={style_key}, prompt={prompt}, style_name={style_name}")
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è —Å—Ç–∏–ª—è: {callback_data}")
            await state.clear()
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è", show_alert=True)
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", version=2),
                reply_markup=await create_photo_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        if not prompt:
            logger.error(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–∏–ª—è '{style_key}'")
            await state.clear()
            await query.answer("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await query.message.answer(
                escape_md(f"‚ùå –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª—è '{style_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                reply_markup=await create_photo_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∏–ª—è
        await state.update_data(
            prompt=prompt,
            style_name=style_name,
            generation_type=generation_type,
            model_key=user_data.get('model_key', 'flux-trained')
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if generation_type == 'ai_video_v2_1':
            await state.update_data(
                video_prompt=prompt,
                video_cost=get_video_generation_cost("ai_video_v2_1"),
                awaiting_video_photo=True
            )
            await query.message.answer(
                escape_md(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_name}\n\n"
                    f"üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}",
                    version=2
                ),
                reply_markup=await create_back_keyboard("ai_video_v2_1"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(VideoStates.AWAITING_VIDEO_PHOTO)
            logger.info(f"–°—Ç–∏–ª—å '{style_name}' –≤—ã–±—Ä–∞–Ω –¥–ª—è –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, user_id={user_id}, target_user_id={target_user_id}, prompt={prompt[:50]}...")
        else:
            try:
                await query.message.delete()
            except Exception:
                pass
            try:
                await query.message.edit_text(
                    escape_md(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_name}", version=2),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception:
                await query.message.answer(
                    escape_md(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_name}", version=2),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            await ask_for_aspect_ratio_callback(query, state)
            logger.info(f"–°—Ç–∏–ª—å '{style_name}' –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, user_id={user_id}, target_user_id={target_user_id}, prompt={prompt[:50]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_style_choice_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_male_styles_page_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π."""
    user_id = query.from_user.id
    callback_data = query.data
    try:
        page = int(callback_data.replace("male_styles_page_", ""))
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è male_styles_page: {callback_data}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
        return

    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π page={page} –¥–ª—è user_id={user_id}")
    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    generation_type = user_data.get('generation_type', 'with_avatar')
    model_key = user_data.get('model_key', 'flux-trained')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )
    else:
        await state.clear()

    await state.update_data(
        generation_type=generation_type,
        model_key=model_key,
        current_style_set='new_male_avatar',
        selected_gender='man'
    )
    if not check_style_config('new_male_avatar'):
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}")
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    keyboard = await create_new_male_avatar_styles_keyboard(page)
    text = escape_md(f"üë® –í—ã–±–µ—Ä–∏ –º—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:", version=2)
    try:
        await query.answer()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception:
            pass

        await query.message.edit_text(
            text=text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π page={page} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.message.answer(
            text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.set_state(BotStates.AWAITING_STYLE_SELECTION)

async def handle_female_styles_page_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π."""
    user_id = query.from_user.id
    callback_data = query.data
    try:
        page = int(callback_data.replace("female_styles_page_", ""))
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è female_styles_page: {callback_data}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
        return

    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π page={page} –¥–ª—è user_id={user_id}")
    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    generation_type = user_data.get('generation_type', 'with_avatar')
    model_key = user_data.get('model_key', 'flux-trained')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )
    else:
        await state.clear()

    await state.update_data(
        generation_type=generation_type,
        model_key=model_key,
        current_style_set='new_female_avatar',
        selected_gender='woman'
    )
    if not check_style_config('new_female_avatar'):
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}")
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    keyboard = await create_new_female_avatar_styles_keyboard(page)
    text = escape_md(f"üë© –í—ã–±–µ—Ä–∏ –∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:", version=2)
    try:
        await query.answer()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception:
            pass

        await query.message.edit_text(
            text=text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π page={page} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.message.answer(
            text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.set_state(BotStates.AWAITING_STYLE_SELECTION)

async def handle_photo_to_photo_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ photo-to-photo –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    await delete_all_videos(state, user_id, query.bot)
    if not await check_active_avatar(query.bot, user_id):
        return
    if not await check_resources(query.bot, user_id, required_photos=2):
        return
    await state.clear()
    await reset_generation_context(state, "photo_to_photo")
    await state.update_data(generation_type='photo_to_photo', model_key="flux-trained", waiting_for_photo=True)
    text = (
        escape_md("üñº –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É", version=2) + "\n\n" +
        escape_md("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º. ", version=2) +
        escape_md("üìù PixelPie AI —Å–æ–∑–¥–∞—Å—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ —Å–∞–º!", version=2)
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception:
        pass

    await query.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="generate_menu")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}: {text}")

async def handle_ai_video_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–≤–∏–¥–µ–æ (Kling 2.1)."""
    logger.debug(f"handle_ai_video_callback: user_id={user_id}")
    try:
        model_key = "kwaivgi/kling-v2.1"
        from generation_config import get_video_generation_cost
        required_photos = get_video_generation_cost("ai_video_v2_1")
        generation_type = "ai_video_v2_1"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await check_resources(query.bot, user_id, required_photos=required_photos):
            logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ user_id={user_id}, required_photos={required_photos}")
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await state.clear()
        await reset_generation_context(state, generation_type, user_id=user_id)
        await state.update_data(
            generation_type=generation_type,
            model_key=model_key,
            video_cost=required_photos,
            acting_as_user=True,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
            user_id=user_id
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        model_name = IMAGE_GENERATION_MODELS.get(model_key, {}).get('name', 'AI-–í–∏–¥–µ–æ (Kling 2.1)')
        text = escape_message_parts(
            f"üé¨ {model_name}\n\n",
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è *{required_photos} –ø–µ—á–µ–Ω–µ–∫* —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n",
            "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:",
            version=2
        )
        logger.debug(f"handle_ai_video_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = await create_video_styles_keyboard()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.answer(
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}, model_name={model_name}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –≤–∏–¥–µ–æ")
        await state.set_state(BotStates.AWAITING_VIDEO_STYLE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ai_video_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.message.answer(
            text=safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", show_alert=True)
        await state.update_data(user_id=user_id)

async def handle_video_style_choice_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –≤–∏–¥–µ–æ."""
    user_id = query.from_user.id
    style_key = query.data.replace("video_style_", "")
    logger.info(f"handle_video_style_choice_callback: user_id={user_id}, style_key={style_key}")

    try:
        from generation_config import VIDEO_GENERATION_STYLES, VIDEO_STYLE_PROMPTS, get_video_generation_cost
        prompt = VIDEO_STYLE_PROMPTS.get(style_key)
        style_name = VIDEO_GENERATION_STYLES.get(style_key, style_key)
        if not prompt:
            logger.error(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–∏–ª—è '{style_name}' (style_key={style_key})")
            await query.message.answer(
                escape_md(f"‚ùå –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª—è '{style_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                reply_markup=await create_video_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        await state.update_data(
            generation_type="ai_video_v2_1",
            model_key="kwaivgi/kling-v2.1",
            video_prompt=prompt,
            style_name=style_name,
            video_cost=get_video_generation_cost("ai_video_v2_1"),
            awaiting_video_photo=True
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception:
            pass

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ (–±–µ–∑ –æ–ø—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π)
        await query.message.answer(
            escape_md(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_name}\n\nüì∏ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:", version=2),
            reply_markup=await create_back_keyboard("ai_video_v2_1"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(VideoStates.AWAITING_VIDEO_PHOTO)
        logger.info(f"–°—Ç–∏–ª—å '{style_name}' –≤—ã–±—Ä–∞–Ω –¥–ª—è user_id={user_id}, prompt={prompt[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_video_style_choice_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_video_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_custom_prompt_manual_callback(query: CallbackQuery, state: FSMContext) -> None:
    user_id = query.from_user.id
    logger.debug(f"handle_custom_prompt_manual_callback: user_id={user_id}, data={await state.get_data()}")

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")

        from generation_config import get_video_generation_cost
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        generation_type = user_data.get('generation_type', 'with_avatar')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ generation_type
        if generation_type not in ['with_avatar', 'photo_to_photo', 'ai_video_v2_1']:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π generation_type –¥–ª—è user_id={user_id}: {generation_type}")
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            await state.update_data(user_id=user_id)
            return

        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: user_id={user_id}, target_user_id={target_user_id}, generation_type={generation_type}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.clear()
        preserved_data = {
            'generation_type': generation_type,
            'model_key': "kwaivgi/kling-v2.1" if generation_type == 'ai_video_v2_1' else 'flux-trained',
            'video_cost': get_video_generation_cost("ai_video_v2_1") if generation_type == 'ai_video_v2_1' else None,
            'came_from_custom_prompt': True,
            'awaiting_llama_after_photo': False,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            'user_id': user_id,
            'acting_as_user': True
        }

        if is_admin_generation:
            preserved_data.update({
                'is_admin_generation': True,
                'admin_generation_for_user': target_user_id,
                'message_recipient': user_id,
                'generation_target_user': target_user_id,
                'original_admin_user': user_id
            })

        await state.update_data(**preserved_data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if generation_type in ['with_avatar', 'photo_to_photo']:
            if not await check_active_avatar(query.bot, target_user_id):
                logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è target_user_id={target_user_id}")
                await query.message.answer(
                    escape_md("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –°–æ–∑–¥–∞–π –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", version=2),
                    reply_markup=await create_user_profile_keyboard(user_id, query.bot),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.clear()
                await state.update_data(user_id=user_id)
                return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if generation_type == 'ai_video_v2_1':
            await state.update_data(awaiting_video_photo=True)
            text = escape_md(
                f"üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ñ–æ—Ç–æ{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_video_photo_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(VideoStates.AWAITING_VIDEO_PHOTO)
        else:
            await state.update_data(waiting_for_custom_prompt_manual=True)
            text = escape_md(
                f"üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:\n"
                f"–ü—Ä–∏–º–µ—Ä: \"–î–µ–≤—É—à–∫–∞ –Ω–∞ –∑–∞–∫–∞—Ç–µ —É –º–æ—Ä—è\" –∏–ª–∏ \"–ë–∏–∑–Ω–µ—Å–º–µ–Ω –≤ –æ—Ñ–∏—Å–µ\"",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_back_keyboard("back_to_style_selection"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω {'–≤–≤–æ–¥ —Ñ–æ—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ' if generation_type == 'ai_video_v2_1' else '–≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ'}, user_id={user_id}, target_user_id={target_user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_custom_prompt_manual_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.clear()
        await state.update_data(user_id=user_id)

async def handle_custom_prompt_llama_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–í–≤–æ–¥ –∏–¥–µ–∏ –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞."""
    user_id = query.from_user.id
    logger.info(f"handle_custom_prompt_llama_callback: user_id={user_id}, data={await state.get_data()}")
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")

        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        generation_type = user_data.get('generation_type', 'with_avatar')

        if generation_type not in ['with_avatar', 'photo_to_photo', 'ai_video_v2_1']:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π generation_type –¥–ª—è user_id={user_id}: {generation_type}")
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            await state.update_data(user_id=user_id)
            return

        if generation_type in ['with_avatar', 'photo_to_photo'] and not await check_active_avatar(query.bot, target_user_id):
            logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è target_user_id={target_user_id}")
            return

        preserved_data = {
            'selected_gender': user_data.get('selected_gender'),
            'generation_type': generation_type,
            'model_key': "kwaivgi/kling-v2.1" if generation_type == 'ai_video_v2_1' else 'flux-trained',
            'current_style_set': user_data.get('current_style_set'),
            'is_admin_generation': is_admin_generation,
            'admin_generation_for_user': target_user_id,
            'message_recipient': user_id,
            'generation_target_user': target_user_id,
            'original_admin_user': user_id if is_admin_generation else None,
            'video_cost': get_video_generation_cost("ai_video_v2_1") if generation_type == 'ai_video_v2_1' else None,
            'use_llama_prompt': True,
            'user_id': user_id,
            'acting_as_user': True,
            'awaiting_llama_after_photo': True if generation_type == 'ai_video_v2_1' else False
        }

        await state.clear()
        await state.update_data(**preserved_data)

        if generation_type == 'ai_video_v2_1':
            await state.update_data(awaiting_video_photo=True)
            text = escape_md(
                f"üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ñ–æ—Ç–æ{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_video_photo_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(VideoStates.AWAITING_VIDEO_PHOTO)
        else:
            await state.update_data(waiting_for_custom_prompt_llama=True)
            text = escape_md(
                f"ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏{' —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º' if generation_type == 'with_avatar' else ''}{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}!\n\n"
                f"–û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: _\"–¥–µ–ª–æ–≤–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ –æ—Ñ–∏—Å–µ\"_ –∏–ª–∏ _\"–¥–µ–≤—É—à–∫–∞ –Ω–∞ –ø–ª—è–∂–µ –Ω–∞ –∑–∞–∫–∞—Ç–µ\"_",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_back_keyboard("back_to_style_selection"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω {'–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI-–ø—Ä–æ–º–ø—Ç–∞' if generation_type != 'ai_video_v2_1' else '–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è AI-–ø—Ä–æ–º–ø—Ç–∞'}, user_id={user_id}, target_user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_custom_prompt_llama_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_confirm_video_generation_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    logger.debug(f"handle_confirm_video_generation_callback: user_id={user_id}, data={await state.get_data()}")
    try:
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        generation_type = user_data.get('generation_type', 'ai_video_v2_1')
        model_key = user_data.get('model_key', 'kwaivgi/kling-v2.1')
        style_name = user_data.get('style_name', 'custom')
        prompt = user_data.get('video_prompt')
        start_image_path = user_data.get('start_image')

        if not prompt:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç video_prompt –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
                reply_markup=await create_video_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            await state.update_data(user_id=user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        from generation_config import get_video_generation_cost
        cost = user_data.get('video_cost', get_video_generation_cost(generation_type))
        if not await check_user_resources(query.bot, target_user_id, required_photos=cost):
            logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è user_id={target_user_id}, required_photos={cost}")
            await state.clear()
            await state.update_data(user_id=user_id)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )

        await state.update_data(
            generation_type=generation_type,
            model_key=model_key,
            video_cost=cost,
            style_name=style_name,
            user_id=user_id
        )

        logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}, style={style_name}, prompt={prompt[:50]}...")
        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        from generation.videos import generate_video
        await generate_video(query.message, state)
        await query.answer("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_video_generation_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_video_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_confirm_assisted_prompt_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ AI-–ø—Ä–æ–º–ø—Ç–∞."""
    user_id = query.from_user.id
    logger.info(f"handle_confirm_assisted_prompt_callback: user_id={user_id}, data={await state.get_data()}")
    try:
        user_data = await state.get_data()
        prompt = user_data.get('prompt')
        generation_type = user_data.get('generation_type', 'with_avatar')
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        model_key = user_data.get('model_key', 'flux-trained')
        style_name = user_data.get('style_name', 'custom')

        if not prompt:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç assisted_prompt –¥–ª—è user_id={user_id}")
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            await state.update_data(user_id=user_id)
            return

        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )

        if generation_type == 'ai_video_v2_1':
            await state.update_data(
                video_prompt=prompt,
                style_name=style_name,
                video_cost=get_video_generation_cost("ai_video_v2_1"),
                awaiting_video_photo=user_data.get('awaiting_video_photo', False),
                start_image=user_data.get('start_image'),
                user_id=user_id
            )
            text = escape_md(
                f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ: _{prompt[:50]}{'...' if len(prompt) > 50 else ''}_\n\n"
                f"üì∏ –§–æ—Ç–æ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if user_data.get('start_image') else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", callback_data="confirm_video_generation")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="edit_assisted_prompt")],
                    [InlineKeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_video_photo")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_video_v2_1")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(VideoStates.AWAITING_VIDEO_CONFIRMATION)
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ AI-–ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, user_id={user_id}, target_user_id={target_user_id}, prompt={prompt[:50]}...")
        else:
            await state.update_data(
                prompt=prompt,
                style_name=style_name,
                user_id=user_id
            )
            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é..."
            try:
                await query.message.edit_text(
                    escape_md("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–∏ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é PixelPie_AI. üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ò–ò –Ω–µ–π—Ä–æ—Å–µ—Ç—å! ‚ö° PixelPie_AI —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à —à–µ–¥–µ–≤—Ä!", version=2),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")
                await query.message.answer(
                    escape_md("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–∏ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é PixelPie_AI. üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ò–ò –Ω–µ–π—Ä–æ—Å–µ—Ç—å! ‚ö° PixelPie_AI —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à —à–µ–¥–µ–≤—Ä!", version=2),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            await ask_for_aspect_ratio_callback(query, state)
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ AI-–ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, user_id={user_id}, target_user_id={target_user_id}, prompt={prompt[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_assisted_prompt_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_edit_assisted_prompt_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞."""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")

    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    await state.clear()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )
    await state.update_data(waiting_for_custom_prompt_manual=True, came_from_custom_prompt=True)
    current_prompt = user_data.get('prompt', '')
    text = (
        f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n`{escape_md(current_prompt, version=2)}`"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="confirm_assisted_prompt")]])
    await query.message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")

async def handle_skip_prompt_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞."""
    user_id = query.from_user.id
    logger.info(f"skip_prompt: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è user_id={user_id}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")

    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    generation_type = user_data.get('generation_type', 'photo_to_photo')
    model_key = user_data.get('model_key', 'flux-trained')
    reference_image_url = user_data.get('reference_image_url')
    photo_path = user_data.get('photo_path')
    await state.clear()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )
    await state.update_data(
        prompt="copy reference style",
        generation_type=generation_type,
        model_key=model_key
    )
    if reference_image_url:
        await state.update_data(reference_image_url=reference_image_url)
    if photo_path:
        await state.update_data(photo_path=photo_path)
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: generation_type={generation_type}, model_key={model_key}, target_user_id={target_user_id}")
    await query.answer()
    await query.message.answer(
        escape_md("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await ask_for_aspect_ratio_callback(query, state)
    await state.set_state(BotStates.AWAITING_STYLE_SELECTION)

async def handle_aspect_ratio_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    user_id = query.from_user.id
    callback_data = query.data
    logger.debug(f"handle_aspect_ratio_callback –≤—ã–∑–≤–∞–Ω: user_id={user_id}, callback_data={callback_data}")

    try:
        aspect_ratio = callback_data.replace("aspect_", "")
        if not aspect_ratio or aspect_ratio not in ASPECT_RATIOS:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}")
            await query.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}", show_alert=True)
            await query.message.answer(
                escape_md(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
                reply_markup=await create_aspect_ratio_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )

        await state.update_data(aspect_ratio=aspect_ratio)

        if not user_data.get('generation_type'):
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç generation_type –¥–ª—è user_id={user_id}")
            await state.clear()
            await query.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω", show_alert=True)
            await query.message.answer(
                escape_md("‚ùå –¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.", version=2),
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        if not user_data.get('prompt'):
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç prompt –¥–ª—è user_id={user_id}")
            await state.clear()
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω", show_alert=True)
            await query.message.answer(
                escape_md("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.", version=2),
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        generation_type = user_data.get('generation_type', 'unknown')
        prompt = user_data.get('prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')
        generation_type_display = {
            'with_avatar': '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
            'photo_to_photo': '–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É',
            'ai_video_v2_1': 'AI-–≤–∏–¥–µ–æ (Kling 2.1)',
            'prompt_assist': '–° –ø–æ–º–æ—â–Ω–∏–∫–æ–º AI'
        }.get(generation_type, generation_type)
        prompt_source = ""
        selected_gender = user_data.get('selected_gender')
        current_style_set = user_data.get('current_style_set')
        if current_style_set == 'new_male_avatar':
            prompt_source = "üë® –ú—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å"
            for style_key, style_name in NEW_MALE_AVATAR_STYLES.items():
                if new_male_avatar_prompts.get(style_key) == prompt:
                    prompt_source += f": {style_name}"
                    break
        elif current_style_set == 'new_female_avatar':
            prompt_source = "üë© –ñ–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å"
            for style_key, style_name in NEW_FEMALE_AVATAR_STYLES.items():
                if new_female_avatar_prompts.get(style_key) == prompt:
                    prompt_source += f": {style_name}"
                    break
        elif current_style_set == 'generic_avatar':
            prompt_source = "üé® –û–±—â–∏–π —Å—Ç–∏–ª—å"
            for style_key, style_name in GENERATION_STYLES.items():
                if style_prompts.get(style_key) == prompt:
                    prompt_source += f": {style_name}"
                    break
        if user_data.get('came_from_custom_prompt'):
            if user_data.get('user_input_for_llama'):
                prompt_source = "ü§ñ –ü—Ä–æ–º–ø—Ç –æ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞"
            else:
                prompt_source = "‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç"
        prompt_preview = prompt[:150] + '...' if len(prompt) > 150 else prompt
        confirm_text_parts = [
            f"üìã –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n",
            f"üé® –¢–∏–ø: {escape_md(generation_type_display, version=2)}\n"
        ]
        if prompt_source:
            confirm_text_parts.append(f"üìù –í—ã–±–æ—Ä: {escape_md(prompt_source, version=2)}\n")
        confirm_text_parts.extend([
            f"üìê –§–æ—Ä–º–∞—Ç: {escape_md(aspect_ratio, version=2)}\n\n",
            f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
        ])
        confirm_text = "".join(confirm_text_parts)
        await query.answer()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception:
            pass

        await query.message.answer(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", callback_data="confirm_generation")],
                [InlineKeyboardButton(text="üîô –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="back_to_style_selection")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω '{aspect_ratio}' –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_aspect_ratio_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_back_to_aspect_selection_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    user_id = query.from_user.id
    logger.debug(f"handle_back_to_aspect_selection_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception:
        pass

    await ask_for_aspect_ratio_callback(query, state)
    await state.set_state(BotStates.AWAITING_STYLE_SELECTION)

async def handle_back_to_style_selection_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª–µ–π."""
    logger.debug(f"handle_back_to_style_selection_callback –≤—ã–∑–≤–∞–Ω: user_id={user_id}")

    try:
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        current_style_set = user_data.get('current_style_set', 'generic_avatar')
        callback_data_map = {
            'new_male_avatar': 'select_new_male_avatar_styles',
            'new_female_avatar': 'select_new_female_avatar_styles',
            'generic_avatar': 'select_generic_avatar_styles'
        }
        callback_data = callback_data_map.get(current_style_set, 'select_generic_avatar_styles')
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª–µ–π –¥–ª—è user_id={user_id}, target_user_id={target_user_id}: current_style_set={current_style_set}, callback_data={callback_data}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )
        await handle_style_selection_callback(query, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_style_selection_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_confirm_generation_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    generation_type = user_data.get('generation_type')
    if generation_type == 'admin_with_user_avatar':
        await state.update_data(generation_type='with_avatar')
        generation_type = 'with_avatar'
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å 'admin_with_user_avatar' –Ω–∞ 'with_avatar' –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )

    if not user_data.get('model_key'):
        if generation_type in ['with_avatar', 'photo_to_photo']:
            await state.update_data(model_key='flux-trained')
        elif generation_type == 'ai_video_v2_1':
            model_key = 'kwaivgi/kling-v2.1'
            await state.update_data(model_key=model_key)
        else:
            await state.update_data(model_key='flux-trained')
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω model_key='{user_data.get('model_key')}' –¥–ª—è generation_type='{generation_type}'")

    if generation_type == 'photo_to_photo':
        required_fields = ['reference_image_url', 'prompt', 'aspect_ratio']
        missing_fields = [f for f in required_fields if not user_data.get(f)]
        if missing_fields:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è photo_to_photo: {missing_fields}")
            await state.clear()
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.", version=2),
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        reference_url = user_data.get('reference_image_url')
        if not reference_url or not reference_url.startswith('http'):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π reference_image_url: {reference_url}")
            await state.clear()
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}, generation_type={generation_type}, "
                f"model_key={user_data.get('model_key')}")

    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        await query.message.edit_text(
            escape_md(
                f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–∏ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é PixelPie_AI.\n"
                f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ò–ò –Ω–µ–π—Ä–æ—Å–µ—Ç—å!\n"
                f"‚ö° PixelPie_AI —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à —à–µ–¥–µ–≤—Ä!", version=2
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.answer(
            escape_md(
                f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–∏ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é PixelPie_AI.\n"
                f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ò–ò –Ω–µ–π—Ä–æ—Å–µ—Ç—å!\n"
                f"‚ö° PixelPie_AI —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à —à–µ–¥–µ–≤—Ä!", version=2
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    try:
        if generation_type in ['with_avatar', 'photo_to_photo']:
            await generate_image(query.message, state, num_outputs=2, user_id=user_id)
        elif generation_type == 'ai_video_v2_1':
            await handle_generate_video_callback(query, state)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_type}")
            await state.clear()
            await query.message.answer(
                escape_md("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_generation: {e}", exc_info=True)
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", version=2),
            reply_markup=await create_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_rating_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = query.from_user.id
    callback_data = query.data
    logger.debug(f"handle_rating_callback –≤—ã–∑–≤–∞–Ω: user_id={user_id}, callback_data={callback_data}")

    try:
        rating = int(callback_data.split('_')[1])
        if not 1 <= rating <= 5:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è user_id={user_id}: {rating}")
            await safe_answer_callback(query, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥.", show_alert=True)
            return

        user_data = await state.get_data()
        generation_type = user_data.get('generation_type', 'unknown')
        model_key = user_data.get('model_key', 'unknown')

        try:
            await add_rating(user_id, generation_type, model_key, rating)
            logger.info(f"–û—Ü–µ–Ω–∫–∞ {rating} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}, generation_type={generation_type}, model_key={model_key}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_rating –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await safe_answer_callback(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        await state.clear()
        await safe_answer_callback(query, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} ‚≠ê!", show_alert=True)
        await query.message.answer(
            escape_message_parts(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} ‚≠ê! –¢–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ."),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help"),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_user_profile_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    logger.debug(f"handle_user_profile_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await delete_all_videos(state, user_id, query.bot)
    await state.clear()
    await reset_generation_context(state, "user_profile", user_id=user_id)
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 9:
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            version=2
        )
        logger.debug(f"handle_user_profile_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return
    generations_left, avatar_left = subscription_data[0], subscription_data[1]
    text_parts = [
        "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n",
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {generations_left} –ø–µ—á–µ–Ω–µ–∫, {avatar_left} –∞–≤–∞—Ç–∞—Ä{'–æ–≤' if avatar_left != 1 else ''}"
    ]
    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"handle_user_profile_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=await create_user_profile_keyboard(user_id, query.bot),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def handle_check_subscription_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    logger.debug(f"handle_check_subscription_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 9:
        await state.clear()
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            version=2
        )
        logger.debug(f"handle_check_subscription_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return
    generations_left, avatar_left, _, username, _, _, email, _, _, _, _, _, _, _ = subscription_data
    text_parts = [
        "üí≥ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n",
        f"üì∏ –ü–µ—á–µ–Ω–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {generations_left}\n",
        f"üë§ –ê–≤–∞—Ç–∞—Ä—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {avatar_left}"
    ]
    if email:
        text_parts.append(f"\nüìß Email: {email}")
    text_parts.extend([
        "\n\n",
        "_–ü–µ—á–µ–Ω—å–∫–∏ —Ç—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ._\n",
        "_–ê–≤–∞—Ç–∞—Ä—ã –Ω—É–∂–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π._"
    ])
    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"handle_check_subscription_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="subscribe")],
            [InlineKeyboardButton(text="üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}")
    await state.update_data(user_id=user_id)

async def handle_user_stats_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞–∑–±–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç Telegram."""
    logger.debug(f"handle_user_stats_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await state.clear()
    try:
        gen_stats = await get_user_generation_stats(user_id)
        payments = await get_user_payments(user_id)
        total_spent = sum(p[2] for p in payments if p[2] is not None)
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("SELECT referred_id, status, completed_at FROM referrals WHERE referrer_id = ?", (user_id,))
            my_referrals = await c.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            version=2
        )
        logger.debug(f"handle_user_stats_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    active_referrals = 0
    total_bonuses = 0
    for ref in my_referrals:
        ref_user_id = ref['referred_id']
        ref_status = ref['status']
        ref_data = await check_database_user(ref_user_id)
        has_purchased = ref_status == 'completed' or (ref_data and len(ref_data) > 5 and not bool(ref_data[5]))
        if has_purchased:
            active_referrals += 1
            total_bonuses += 5

    bot_username = (await query.bot.get_me()).username
    text_parts = [
        "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    ]
    if gen_stats:
        text_parts.append("–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n")
        type_names = {
            'with_avatar': '–§–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
            'photo_to_photo': '–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É',
            'ai_video_v2_1': 'AI-–≤–∏–¥–µ–æ (Kling 2.1)',
            'train_flux': '–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤',
            'prompt_assist': '–ü–æ–º–æ—â—å —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏'
        }
        for gen_type, count in gen_stats.items():
            type_name = type_names.get(gen_type, gen_type)
            text_parts.append(f"  ‚Ä¢ {type_name}: {count}\n")
    else:
        text_parts.append("_–¢—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª_\n")
    text_parts.extend([
        "\n",
        f"üíµ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} RUB\n",
        f"üí≥ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {len(payments)}\n",
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Å –ø–æ–∫—É–ø–∫–æ–π): {active_referrals}\n",
        f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_bonuses}\n\n",
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n",
        f"`t.me/{bot_username.lstrip('@')}?start=ref_{user_id}`"
    ])

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    MAX_MESSAGE_LENGTH = 4000
    messages = []
    current_message = []
    current_length = 0

    for part in text_parts:
        part_length = len(part) + 1
        if current_length + part_length < MAX_MESSAGE_LENGTH:
            current_message.append(part)
            current_length += part_length
        else:
            messages.append(''.join(current_message))
            current_message = [part]
            current_length = part_length
    if current_message:
        messages.append(''.join(current_message))

    logger.debug(f"handle_user_stats_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}")

    try:
        for i, message_text in enumerate(messages):
            text = escape_message_parts(message_text, version=2)
            reply_markup = await create_referral_keyboard(user_id, bot_username) if i == len(messages) - 1 else None
            await query.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.debug(f"handle_user_stats_callback: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(messages)}, –¥–ª–∏–Ω–∞={len(text)}")
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            version=2
        )
        logger.debug(f"handle_user_stats_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_subscribe_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–∫–∞–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ—Å–ª–µ 5 –¥–Ω–µ–π, —Ä–∞–∑–±–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏."""
    logger.debug(f"handle_subscribe_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await delete_all_videos(state, user_id, query.bot)
    await state.clear()
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 11:
        logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_data}")
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            version=2
        )
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    first_purchase = bool(subscription_data[5])
    payments = await get_user_payments(user_id)
    is_paying_user = bool(payments)
    logger.info(f"handle_subscribe_callback: user_id={user_id}, payment_count={len(payments) if payments else 0}, first_purchase={first_purchase}, is_paying_user={is_paying_user}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    moscow_tz = pytz.timezone('Europe/Moscow')
    registration_date = datetime.now(moscow_tz)
    time_since_registration = float('inf')
    days_since_registration = 0
    last_reminder_type = subscription_data[9] if subscription_data and len(subscription_data) > 9 else None
    if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
        try:
            registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
            time_since_registration = (datetime.now(moscow_tz) - registration_date).total_seconds()
            days_since_registration = (datetime.now(moscow_tz).date() - registration_date.date()).days
            logger.debug(f"Calculated time_since_registration={time_since_registration}, days_since_registration={days_since_registration} for user_id={user_id}")
        except ValueError as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {subscription_data[10]}. –û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
    is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} is_old_user={is_old_user_flag}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞—Ä–∏—Ñ–æ–≤
    text_parts = [
        "üî• –ì–æ—Ä—è—á–∏–π –≤—ã–±–æ—Ä –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ!\n\n",
        "–•–æ—á–µ—à—å –∫—Ä—É—Ç—ã–µ –∫–∞–¥—Ä—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç? –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–∞–∫–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Ç–≤–æ—Ä–∏—Ç—å! üöÄ\n\n",
    ]
    keyboard = []
    available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}

    if is_paying_user or is_old_user_flag or (days_since_registration >= 5 and last_reminder_type == "reminder_day5"):
        text_parts.append("üíé –ù–ê–®–ò –ü–ê–ö–ï–¢–´:\n")
        for tariff_key, tariff in available_tariffs.items():
            text_parts.append(f"{tariff['display']}\n")
            keyboard.append([InlineKeyboardButton(text=tariff["display"], callback_data=tariff["callback"])])
        logger.debug(f"–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è user_id={user_id} (is_paying_user={is_paying_user}, is_old_user={is_old_user_flag}, days_since_registration={days_since_registration}, last_reminder_type={last_reminder_type})")
    else:
        if days_since_registration == 0:
            if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                tariff_key = "–∫–æ–º—Ñ–æ—Ä—Ç"
                text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                text_parts.append("–ö–æ–º—Ñ–æ—Ä—Ç: 70 –ø–µ—á–µ–Ω–µ–∫ + 1 –∞–≤–∞—Ç–∞—Ä –∑–∞ 1199‚ÇΩ\n")
            elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                tariff_key = "–ª–∞–π—Ç"
                text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                text_parts.append("–õ–∞–π—Ç: 30 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 599‚ÇΩ\n")
            else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                tariff_key = "–º–∏–Ω–∏"
                text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
                text_parts.append("–ú–∏–Ω–∏: 10 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 399‚ÇΩ\n")
        elif days_since_registration == 1:
            tariff_key = "–ª–∞–π—Ç"
            text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
            text_parts.append("–õ–∞–π—Ç: 30 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 599‚ÇΩ\n")
        elif 2 <= days_since_registration <= 4:
            tariff_key = "–º–∏–Ω–∏"
            text_parts.append("üíé –¢–í–û–ô –ü–ê–ö–ï–¢:\n")
            text_parts.append("–ú–∏–Ω–∏: 10 –ø–µ—á–µ–Ω–µ–∫ –∑–∞ 399‚ÇΩ\n")
        keyboard.append([InlineKeyboardButton(text=available_tariffs[tariff_key]["display"], callback_data=available_tariffs[tariff_key]["callback"])])

    if first_purchase:
        text_parts.append("\n")
        text_parts.append("üéÅ –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –∫ –ª—é–±–æ–º—É –∫—É–ø–ª–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –≤–ø–µ—Ä–≤—ã–µ 1 –ê–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!\n")

    text_parts.append("\n")
    text_parts.append("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–∞–∫–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Ç–≤–æ—Ä–∏—Ç—å üöÄ")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å –æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏
    text_parts.append("\n\n")
    text_parts.append("üìÑ –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–∞–∫–µ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º")

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    MAX_MESSAGE_LENGTH = 4000
    messages = []
    current_message = []
    current_length = 0

    for part in text_parts:
        part_length = len(part) + 1
        if current_length + part_length < MAX_MESSAGE_LENGTH:
            current_message.append(part)
            current_length += part_length
        else:
            messages.append(''.join(current_message))
            current_message = [part]
            current_length = part_length
    if current_message:
        messages.append(''.join(current_message))

    logger.debug(f"handle_subscribe_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é" –∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"
    keyboard.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")])
    keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="tariff_info")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    keyboard.append([InlineKeyboardButton(text="üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://telegra.ph/Polzovatelskoe-soglashenie-07-26-12")])

    try:
        for i, message_text in enumerate(messages):
            text = escape_message_parts(message_text, version=2)
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard) if i == len(messages) - 1 else None
            await query.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.debug(f"handle_subscribe_callback: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(messages)}, –¥–ª–∏–Ω–∞={len(text)}")
        logger.info(f"–ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)


async def handle_payment_callback(query: CallbackQuery, state: FSMContext, user_id: int, callback_data: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    logger.info(f"–ù–∞—á–∞–ª–æ handle_payment_callback –¥–ª—è user_id={user_id}, callback_data={callback_data}")

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏–∑ callback_data
        amount_str = callback_data.replace("pay_", "")
        try:
            amount = float(amount_str)
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ callback_data: {amount_str}, user_id={user_id}")
            await safe_answer_callback(query, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞—Ä–∏—Ñ–∞", show_alert=True)
            text = escape_message_parts(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞—Ä–∏—Ñ–∞.",
                " –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ.",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_subscription_keyboard(hide_mini_tariff=True),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        # –ü–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ —Å—É–º–º–µ
        tariff_key = None
        for key, details in TARIFFS.items():
            if abs(float(details["amount"]) - amount) < 0.01:
                tariff_key = key
                break

        if not tariff_key:
            logger.error(f"–¢–∞—Ä–∏—Ñ —Å —Å—É–º–º–æ–π {amount} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TARIFFS –¥–ª—è user_id={user_id}")
            await safe_answer_callback(query, "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            text = escape_message_parts(
                "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_subscription_keyboard(hide_mini_tariff=True),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞
        moscow_tz = pytz.timezone('Europe/Moscow')
        subscription_data = await check_database_user(user_id)
        registration_date = datetime.now(moscow_tz)
        days_since_registration = 0
        time_since_registration = float('inf')
        if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
            try:
                registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
                days_since_registration = (datetime.now(moscow_tz).date() - registration_date.date()).days
                time_since_registration = (datetime.now(moscow_tz) - registration_date).total_seconds()
            except ValueError as e:
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ subscription_data[10] –¥–ª—è user_id={user_id}: {subscription_data[10]}. –û—à–∏–±–∫–∞: {e}")

        payments = await get_user_payments(user_id)
        is_paying_user = len(payments) > 0
        last_reminder_type = subscription_data[9] if subscription_data and len(subscription_data) > 9 else None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not is_paying_user:
            five_days_seconds = 5 * 24 * 3600
            show_all_tariffs = last_reminder_type == "reminder_day5" and time_since_registration >= five_days_seconds
            if not show_all_tariffs:
                expected_tariff = None
                if days_since_registration == 0:
                    if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                        expected_tariff = "–∫–æ–º—Ñ–æ—Ä—Ç"
                    elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                        expected_tariff = "–ª–∞–π—Ç"
                    else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                        expected_tariff = "–º–∏–Ω–∏"
                elif days_since_registration == 1:
                    expected_tariff = "–ª–∞–π—Ç"
                elif days_since_registration <= 4:
                    expected_tariff = "–º–∏–Ω–∏"

                if expected_tariff and tariff_key != expected_tariff:
                    logger.warning(f"–¢–∞—Ä–∏—Ñ {tariff_key} –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω –¥–ª—è user_id={user_id} –Ω–∞ –¥–µ–Ω—å {days_since_registration}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_tariff}")
                    await safe_answer_callback(query, "‚ùå –≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                    new_message_type = f"tariff_{expected_tariff}" if days_since_registration <= 4 else "subscribe"
                    await send_onboarding_message(
                        bot=query.bot,
                        user_id=user_id,
                        message_type=new_message_type,
                        subscription_data=subscription_data,
                        first_purchase=bool(subscription_data[5]) if subscription_data else True
                    )
                    await state.update_data(user_id=user_id)
                    return

        tariff = TARIFFS[tariff_key]
        amount = tariff["amount"]
        description = tariff["display"]
        logger.debug(f"–ù–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ: key={tariff_key}, amount={amount}, description={description}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        await state.clear()
        await state.update_data(
            payment_amount=amount,
            payment_description=description,
            payment_tariff_key=tariff_key,
            user_id=user_id
        )
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: amount={amount}, description={description}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        email = subscription_data[6] if subscription_data and len(subscription_data) > 6 and subscription_data[6] else None
        logger.debug(f"Email –¥–ª—è user_id={user_id}: {email}")

        if email:
            await state.update_data(email=email)
            from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
            if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
                logger.error(f"YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è user_id={user_id}")
                text = escape_message_parts(
                    "‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                    " –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                    version=2
                )
                await query.message.answer(
                    text,
                    reply_markup=await create_subscription_keyboard(hide_mini_tariff=True),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.update_data(user_id=user_id)
                return

            try:
                bot_username = (await query.bot.get_me()).username
                payment_url = await create_payment_link(user_id, email, amount, description, bot_username)
                is_first_purchase = bool(subscription_data[5]) if len(subscription_data) > 5 else True
                bonus_text = " (+ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!)" if is_first_purchase and tariff.get("photos", 0) > 0 else ""

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                text = escape_message_parts(
                    "üí≥ –û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞\n",
                    f"‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏: {description}{bonus_text}\n",
                    f"üí∞ –°—É–º–º–∞: {amount:.2f} RUB\n\n",
                    f"üîó [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa]({payment_url})\n\n",
                    "_–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_ ",
                    version=2
                )

                logger.info(f"–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}: {payment_url}")
                await query.message.answer(
                    text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="subscribe")]
                    ]),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
                text = escape_message_parts(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É.",
                    " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                    version=2
                )
                await query.message.answer(
                    text,
                    reply_markup=await create_subscription_keyboard(hide_mini_tariff=True),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        else:
            await state.update_data(awaiting_email=True)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω email –¥–ª—è user_id={user_id}, tariff={description}")
            text = escape_message_parts(
                f"üìß –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ \"{description}\" ({amount:.2f} RUB) –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="subscribe")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_payment_callback –¥–ª—è user_id={user_id}, callback_data={callback_data}: {e}", exc_info=True)
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Ä–∏—Ñ–∞", show_alert=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        await query.message.answer(
            text,
            reply_markup=await create_subscription_keyboard(hide_mini_tariff=True),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_my_avatars_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–∫–∞–∑ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"handle_my_avatars_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await delete_all_videos(state, user_id, query.bot)
    await state.clear()
    await reset_generation_context(state, "my_avatars", user_id=user_id)
    text = escape_message_parts(
        "üë• –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã\n\n",
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.",
        version=2
    )
    logger.debug(f"handle_my_avatars_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=await create_avatar_selection_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def handle_select_avatar_callback(query: CallbackQuery, state: FSMContext, user_id: int, callback_data: str) -> None:
    """–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    logger.debug(f"handle_select_avatar_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, callback_data={callback_data}")
    try:
        avatar_id = int(callback_data.split('_')[2])
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            c = await conn.cursor()
            await c.execute("SELECT avatar_id FROM user_trainedmodels WHERE avatar_id = ? AND user_id = ?", (avatar_id, user_id))
            if not await c.fetchone():
                logger.error(f"–ê–≤–∞—Ç–∞—Ä avatar_id={avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id={user_id}")
                await safe_answer_callback(query, "‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                await state.clear()
                text = escape_message_parts(
                    "‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                    version=2
                )
                logger.debug(f"handle_select_avatar_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
                await query.message.answer(
                    text,
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.update_data(user_id=user_id)
                return
        success = await update_user_credits(user_id, action="set_active_avatar", amount=avatar_id)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä avatar_id={avatar_id} –¥–ª—è user_id={user_id}")
            await safe_answer_callback(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", show_alert=True)
            await state.clear()
            text = escape_message_parts(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                version=2
            )
            logger.debug(f"handle_select_avatar_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
            await query.message.answer(
                text,
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return
        await state.clear()
        await safe_answer_callback(query, "‚úÖ –ê–≤–∞—Ç–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        await handle_my_avatars_callback(query, state, user_id)
        logger.info(f"–ê–≤–∞—Ç–∞—Ä avatar_id={avatar_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await safe_answer_callback(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", show_alert=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤–∞—Ç–∞—Ä–∞.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        logger.debug(f"handle_select_avatar_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_train_flux_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, —Ä–∞–∑–±–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç Telegram."""
    logger.debug(f"handle_train_flux_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    if not await check_resources(query.bot, user_id, required_avatars=1):
        await state.update_data(user_id=user_id)
        return
    await state.clear()
    await reset_generation_context(state, "train_flux", user_id=user_id)
    await state.update_data(training_step='upload_photos', training_photos=[], user_id=user_id)
    text_parts = [
        "üé® –°–û–ó–î–ê–ù–ò–ï –í–ê–®–ï–ì–û –ê–í–ê–¢–ê–†–ê\n\n",
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 15-20) —Å –ê–ö–¶–ï–ù–¢–û–ú –Ω–∞ –ª–∏—Ü–æ. ",
        "–ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π, —á—Ç–æ–±—ã PixelPie —Ç–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª –≤–∞—à–∏ —á–µ—Ä—Ç—ã.\n\n",
        "üì∏ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–î–ï–ê–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê:\n",
        "- –§–û–¢–û–ì–†–ê–§–ò–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–†–Ø–ú–´–ú–ò, –ß–ï–¢–ö–ò–ú–ò, –ë–ï–ó –ò–°–ö–ê–ñ–ï–ù–ò–ô –ò –†–ê–ó–ú–´–¢–ò–Ø. –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–º–µ—Ä—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º.\n",
        "- –°–Ω–∏–º–∞–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–∞—Ö: –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–Ω–æ, –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏.\n",
        "- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç, –∑–æ–ª–æ—Ç–æ–π —á–∞—Å, –º—è–≥–∫–∏–π —Å—Ç—É–¥–∏–π–Ω—ã–π —Å–≤–µ—Ç. –ò–ó–ë–ï–ì–ê–ô –¢–ï–ú–ù–´–• –¢–ï–ù–ï–ô –ò –ü–ï–†–ï–°–í–ï–¢–û–í.\n",
        "- –§–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å czyst—ã–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–º–µ–±–µ–ª—å, —Ä–∞—Å—Ç–µ–Ω–∏—è, –∂–∏–≤–æ—Ç–Ω—ã–µ). –ù–ï –î–û–ü–£–°–ö–ê–Æ–¢–°–Ø –ó–ï–†–ö–ê–õ–ê –ò –û–¢–†–ê–ñ–ï–ù–ò–Ø.\n",
        "- –°–Ω–∏–º–∞–π —Ç–æ–ª—å–∫–æ —Å–µ–±—è. –ì–†–£–ü–ü–û–í–´–ï –§–û–¢–û –ò–õ–ò –§–û–¢–û –° –î–†–£–ì–ò–ú–ò –õ–Æ–î–¨–ú–ò –ù–ï –ü–û–î–•–û–î–Ø–¢.\n",
        "- –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –û–ß–ö–ò, –®–õ–Ø–ü–´, –ú–ê–°–ö–ò –ò–õ–ò –î–†–£–ì–ò–ï –ê–ö–°–ï–°–°–£–ê–†–´, –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –ª–∏—Ü–æ. –ú–∞–∫–∏—è–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º.\n",
        "- –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–ª–∏ –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞. –ò–ó–ë–ï–ì–ê–ô –ö–†–ò–í–õ–Ø–ù–ò–ô –ò–õ–ò –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –≠–ú–û–¶–ò–ô.\n",
        "- –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ä–∞–∫—É—Ä—Å—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ñ–æ–Ω), —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–≤–∞—Ç–∞—Ä.\n\n",
        "‚ö†Ô∏è –í–ê–ñ–ù–û: –ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —à—É–º–∞ –∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. ",
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∏–∑–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º, –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –±—É–¥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ö–ê–ß–ï–°–¢–í–û –ê–í–ê–¢–ê–†–ê.\n\n",
        "üì§ –ù–∞—á–∏–Ω–∞–π –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
    ]

    MAX_MESSAGE_LENGTH = 4000
    messages = []
    current_message = []
    current_length = 0

    for part in text_parts:
        part_length = len(part) + 1
        if current_length + part_length < MAX_MESSAGE_LENGTH:
            current_message.append(part)
            current_length += part_length
        else:
            messages.append(''.join(current_message))
            current_message = [part]
            current_length = part_length
    if current_message:
        messages.append(''.join(current_message))

    logger.debug(f"handle_train_flux_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}")

    try:
        for i, message_text in enumerate(messages):
            text = escape_message_parts(message_text, version=2)
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_profile")]
            ]) if i == len(messages) - 1 else None
            await query.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.debug(f"handle_train_flux_callback: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(messages)}, –¥–ª–∏–Ω–∞={len(text)}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        logger.debug(f"handle_train_flux_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_continue_upload_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    logger.debug(f"handle_continue_upload_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    try:
        await state.clear()
        await state.update_data(training_step='upload_photos', user_id=user_id)
        user_data = await state.get_data()
        training_photos = user_data.get('training_photos', [])
        photo_count = len(training_photos)
        logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {photo_count}, training_photos={training_photos}")
        text = escape_message_parts(
            f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ.",
            " –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ \"–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\".",
            version=2
        )
        logger.debug(f"handle_continue_upload_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_training_keyboard(user_id, photo_count),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_continue_upload_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        logger.debug(f"handle_continue_upload_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_confirm_start_training_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    logger.debug(f"handle_confirm_start_training_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, user_data={await state.get_data()}")
    try:
        user_data = await state.get_data()
        avatar_name = user_data.get('avatar_name')
        training_photos = user_data.get('training_photos', [])
        photo_count = len(training_photos)

        if not avatar_name:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç avatar_name –¥–ª—è user_id={user_id} –≤ handle_confirm_start_training_callback")
            await state.set_state(TrainingStates.AWAITING_AVATAR_NAME)
            await state.update_data(training_step='enter_avatar_name', training_photos=training_photos, user_id=user_id)
            text = escape_message_parts(
                f"üè∑ –ü—Ä–∏–¥—É–º–∞–π –∏–º—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ–π —Å—Ç–∏–ª—å\", \"–ë–∏–∑–Ω–µ—Å-–æ–±—Ä–∞–∑\").",
                f"üì∏ –£ —Ç–µ–±—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ.",
                version=2
            )
            logger.debug(f"handle_confirm_start_training_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
            await query.message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞")
            await state.update_data(user_id=user_id)
            return

        if photo_count < 10:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {photo_count}")
            text = escape_message_parts(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
                f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10.",
                version=2
            )
            logger.debug(f"handle_confirm_start_training_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
            await query.message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(TrainingStates.AWAITING_PHOTOS)
            await state.update_data(user_id=user_id)
            return

        await state.update_data(user_id=user_id)
        await start_training(query.message, state)
        await state.clear()
        logger.info(f"–û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        logger.debug(f"handle_confirm_start_training_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_back_to_avatar_name_input_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞."""
    logger.debug(f"handle_back_to_avatar_name_input_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await state.clear()
    await state.update_data(training_step='enter_avatar_name', user_id=user_id)
    user_data = await state.get_data()
    photo_count = len(user_data.get('training_photos', []))
    text = escape_message_parts(
        f"üè∑ –ü—Ä–∏–¥—É–º–∞–π –∏–º—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ–π —Å—Ç–∏–ª—å\", \"–ë–∏–∑–Ω–µ—Å-–æ–±—Ä–∞–∑\").",
        f"üì∏ –£ —Ç–µ–±—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ.",
        version=2
    )
    logger.debug(f"handle_back_to_avatar_name_input_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def handle_use_suggested_trigger_callback(query: CallbackQuery, state: FSMContext, user_id: int, callback_data: str) -> None:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞."""
    logger.debug(f"handle_use_suggested_trigger_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, callback_data={callback_data}")
    trigger_word = callback_data.replace("use_suggested_trigger_", "")
    await state.clear()
    await state.update_data(trigger_word=trigger_word, training_step='confirm_training', user_id=user_id)
    from handlers.messages import handle_trigger_word_input
    await handle_trigger_word_input(query.message, state, trigger_word)
    await state.update_data(user_id=user_id)

async def handle_confirm_photo_quality_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º."""
    logger.debug(f"handle_confirm_photo_quality_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, user_data={await state.get_data()}")
    user_data = await state.get_data()
    avatar_name = user_data.get('avatar_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
    training_photos = user_data.get('training_photos', [])
    photo_count = len(training_photos)

    if photo_count < 10:
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {photo_count}")
        text = escape_message_parts(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
            f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10.",
            version=2
        )
        logger.debug(f"handle_confirm_photo_quality_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    if not avatar_name or avatar_name == '–ë–µ–∑ –∏–º–µ–Ω–∏':
        logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}")
        await state.update_data(training_step='enter_avatar_name')
        await state.set_state(TrainingStates.AWAITING_AVATAR_NAME)
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ.",
            " –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞.",
            version=2
        )
        logger.debug(f"handle_confirm_photo_quality_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    if not await check_user_resources(query.bot, user_id, required_avatars=1):
        await state.clear()
        await state.update_data(user_id=user_id)
        return

    text_parts = [
        "üëç –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n",
        f"üë§ –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞: {avatar_name}\n",
        f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {photo_count} —à—Ç.\n\n",
        "üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è!\n",
        "‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 3-5 –º–∏–Ω—É—Ç.\n",
        "üíé –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω 1 –∞–≤–∞—Ç–∞—Ä —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n",
        "–ù–∞—á–∏–Ω–∞–µ–º?"
    ]
    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"handle_confirm_photo_quality_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

    try:
        await asyncio.sleep(0.1)
        await query.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!", callback_data="confirm_start_training")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="train_flux")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            version=2
        )
        logger.debug(f"handle_confirm_photo_quality_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_repeat_last_generation_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    logger.info(f"handle_repeat_last_generation_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    try:
        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        last_gen_data = user_data.get(f'last_admin_generation_{target_user_id}' if is_admin_generation else 'last_generation_params', {})

        if not last_gen_data:
            logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
            await safe_answer_callback(query, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            text = escape_message_parts(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
                " –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
                version=2
            )
            logger.debug(f"handle_repeat_last_generation_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
            await query.message.answer(
                text,
                reply_markup=await create_photo_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        required_fields = ['prompt', 'aspect_ratio', 'generation_type', 'model_key']
        missing_fields = [f for f in required_fields if f not in last_gen_data or not last_gen_data[f]]
        if missing_fields:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {missing_fields}, user_id={user_id}")
            await safe_answer_callback(query, "‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            text = escape_message_parts(
                f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {', '.join(missing_fields)}.",
                version=2
            )
            logger.debug(f"handle_repeat_last_generation_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
            await query.message.answer(
                text,
                reply_markup=await create_photo_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        preserved_data = {
            'prompt': last_gen_data.get('prompt'),
            'aspect_ratio': last_gen_data.get('aspect_ratio'),
            'generation_type': last_gen_data.get('generation_type'),
            'model_key': last_gen_data.get('model_key'),
            'selected_gender': last_gen_data.get('selected_gender'),
            'user_input_for_llama': last_gen_data.get('user_input_for_llama'),
            'style_name': last_gen_data.get('style_name', 'custom'),
            'current_style_set': last_gen_data.get('current_style_set'),
            'came_from_custom_prompt': last_gen_data.get('came_from_custom_prompt', False),
            'use_llama_prompt': last_gen_data.get('use_llama_prompt', False),
            'last_generation_params': last_gen_data,
            'is_admin_generation': is_admin_generation,
            'admin_generation_for_user': target_user_id,
            'message_recipient': user_id,
            'generation_target_user': target_user_id,
            'original_admin_user': user_id if is_admin_generation else None,
            'user_id': user_id
        }
        if is_admin_generation:
            preserved_data[f'last_admin_generation_{target_user_id}'] = last_gen_data

        await state.clear()
        await state.update_data(**preserved_data)
        logger.debug(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {preserved_data}")

        if not is_admin_generation:
            from generation_config import get_video_generation_cost, get_image_generation_cost
            required_photos = get_video_generation_cost("ai_video_v2_1") if last_gen_data['generation_type'] == 'ai_video_v2_1' else get_image_generation_cost(last_gen_data['generation_type'])
            if not await check_resources(query.bot, user_id, required_photos=required_photos):
                logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ user_id={user_id}")
                await state.update_data(user_id=user_id)
                return

        if last_gen_data['generation_type'] in ['with_avatar', 'photo_to_photo']:
            active_model_data = await get_active_trainedmodel(target_user_id)
            if not active_model_data or active_model_data[3] != 'success':
                logger.error(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è target_user_id={target_user_id}")
                await safe_answer_callback(query, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞", show_alert=True)
                text = escape_message_parts(
                    f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.",
                    version=2
                )
                logger.debug(f"handle_repeat_last_generation_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
                await query.message.answer(
                    text,
                    reply_markup=await create_user_profile_keyboard(user_id, query.bot),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.update_data(user_id=user_id)
                return

        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è user_id={user_id}, target_user_id={target_user_id}, generation_type={last_gen_data['generation_type']}")
        text = escape_message_parts(
            "‚è≥ –ü–æ–≤—Ç–æ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...",
            version=2
        )
        logger.debug(f"handle_repeat_last_generation_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        if last_gen_data['generation_type'] in ['with_avatar', 'photo_to_photo']:
            await generate_image(query.message, state, num_outputs=2, user_id=user_id)
        elif last_gen_data['generation_type'] == 'ai_video_v2_1':
            await handle_generate_video_callback(query, state)
        else:
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {last_gen_data['generation_type']}")
            text = escape_message_parts(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
                " –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
                version=2
            )
            logger.debug(f"handle_repeat_last_generation_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
            await query.message.answer(
                text,
                reply_markup=await create_photo_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        await query.answer("‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_repeat_last_generation_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        logger.debug(f"handle_repeat_last_generation_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_photo_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def handle_change_email_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ email."""
    logger.debug(f"handle_change_email_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await state.clear()
    await state.update_data(awaiting_email_change=True, user_id=user_id)
    text = escape_message_parts(
        "üìß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
        version=2
    )
    logger.debug(f"handle_change_email_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def handle_confirm_change_email_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ email."""
    logger.warning(f"handle_confirm_change_email_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    await state.clear()
    await safe_answer_callback(query, "‚ùå –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è email –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    text = escape_message_parts(
        "‚ùå –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è email –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        " –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
        version=2
    )
    logger.debug(f"handle_confirm_change_email_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=await create_main_menu_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def handle_skip_mask_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –º–∞—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    logger.warning(f"handle_skip_mask_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    await state.clear()
    await safe_answer_callback(query, "‚ùå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –º–∞—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    text = escape_message_parts(
        "‚ùå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –º–∞—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        " –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
        version=2
    )
    logger.debug(f"handle_skip_mask_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.answer(
        text,
        reply_markup=await create_main_menu_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def ask_for_aspect_ratio_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    user_id = query.from_user.id
    logger.debug(f"ask_for_aspect_ratio_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")

        user_data = await state.get_data()
        came_from_custom = user_data.get('came_from_custom_prompt', False)
        back_callback = "enter_custom_prompt_manual" if came_from_custom else "back_to_style_selection"
        text = escape_message_parts(
            "üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            version=2
        )
        logger.debug(f"ask_for_aspect_ratio_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.answer()
        await query.message.answer(
            text,
            reply_markup=await create_aspect_ratio_keyboard(back_callback),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_for_aspect_ratio_callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω", show_alert=True)
        await state.clear()
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
            version=2
        )
        logger.debug(f"ask_for_aspect_ratio_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await query.message.answer(
            text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    logger.debug(f"cancel –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    await state.clear()
    text = escape_message_parts(
        "‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
        version=2
    )
    logger.debug(f"cancel: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    reply_markup = await create_main_menu_keyboard(user_id)
    await message.answer(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@user_callbacks_router.callback_query(
    lambda c: c.data in [
        "proceed_to_payment", "photo_generate_menu", "video_generate_menu", "generate_menu", "photo_to_photo", "ai_video_v2_1",
        "repeat_last_generation", "select_generic_avatar_styles", "select_new_male_avatar_styles",
        "select_new_female_avatar_styles", "page_info", "enter_custom_prompt_manual",
        "enter_custom_prompt_llama", "confirm_assisted_prompt", "edit_assisted_prompt",
        "skip_prompt", "aspect_ratio_info", "back_to_aspect_selection", "back_to_style_selection",
        "confirm_generation", "confirm_photo_quality", "skip_mask", "user_profile",
        "check_subscription", "user_stats", "subscribe", "change_email", "confirm_change_email",
        "my_avatars", "train_flux", "continue_upload", "start_training", "confirm_start_training",
        "back_to_avatar_name_input", "check_training", "terms_of_service", "tariff_info", "back_to_menu"
    ] or c.data.startswith(("style_", "video_style_", "male_styles_page_", "female_styles_page_", "aspect_", "confirm_video_generation", "rate_", "select_avatar_", "use_suggested_trigger_", "pay_"))
)
async def user_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f"Callback_query –ø–æ–ª—É—á–µ–Ω: id={query.id}, data={query.data}")
    await handle_user_callback(query, state)
