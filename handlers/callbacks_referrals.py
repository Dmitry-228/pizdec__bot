# handlers/callbacks_referrals.py

import asyncio
import logging
import aiosqlite
from aiogram import Router, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from config import ADMIN_IDS, DATABASE_PATH
from database import check_database_user, is_user_blocked
from handlers.utils import safe_escape_markdown as escape_md, send_message_with_fallback, safe_answer_callback
from keyboards import create_main_menu_keyboard, create_referral_keyboard, create_admin_keyboard

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö callback'–æ–≤
referrals_callbacks_router = Router()

async def handle_referrals_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    user_id = query.from_user.id
    await query.answer()

    if await is_user_blocked(user_id):
        await query.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        await query.message.answer(
            escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å callback: {query.data}")
        return

    callback_data = query.data
    logger.info(f"Callback –æ—Ç user_id={user_id}: {callback_data}")

    try:
        if callback_data == "referrals":
            await handle_referrals_menu_callback(query, state, user_id)
        elif callback_data == "referral_info":
            await handle_referral_info_callback(query, state, user_id)
        elif callback_data == "copy_referral_link":
            await handle_copy_referral_link_callback(query, state, user_id)
        elif callback_data == "referral_help":
            await handle_referral_help_callback(query, state, user_id)
        elif callback_data == "my_referrals":
            await handle_my_referrals_callback(query, state, user_id)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data} –¥–ª—è user_id={user_id}")
            await query.message.answer(
                escape_md("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback –¥–ª—è user_id={user_id}, data={callback_data}: {e}", exc_info=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_referrals_menu_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.cursor()
            await cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
            total_referrals = (await cursor.fetchone())[0]
            await cursor.execute("SELECT COUNT(*) FROM referrals WHERE referrer_id = ? AND status = 'completed'", (user_id,))
            paid_referrals = (await cursor.fetchone())[0]
            await cursor.execute("SELECT SUM(reward_photos) FROM referral_rewards WHERE referrer_id = ?", (user_id,))
            bonus_photos_result = await cursor.fetchone()
            bonus_photos = bonus_photos_result[0] if bonus_photos_result[0] is not None else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}: {e}")
        total_referrals = 0
        paid_referrals = 0
        bonus_photos = 0
    
    bot_username = (await query.bot.get_me()).username.lstrip('@')
    referral_link = f"t.me/{bot_username}?start=ref_{user_id}"
    text = (
        escape_md("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", version=2) + "\n\n" +
        escape_md("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", version=2) + "\n" +
        escape_md(f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {total_referrals}", version=2) + "\n" +
        escape_md(f"‚Ä¢ –°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É: {paid_referrals}", version=2) + "\n" +
        escape_md(f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_photos} –ø–µ—á–µ–Ω–µ–∫", version=2) + "\n\n" +
        escape_md("üéÅ –ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç —Å—É–º–º—ã –≤ –≤–∏–¥–µ –ø–µ—á–µ–Ω–µ–∫!", version=2) + "\n\n" +
        escape_md("üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:", version=2) + "\n" +
        f"`t\.me/{escape_md(bot_username, version=2)}?start=ref_{escape_md(str(user_id), version=2)}`"
    )
    keyboard = await create_referral_keyboard(user_id, bot_username)
    await query.message.answer(
        text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}: {text}")

async def handle_referral_info_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    text = (
        escape_md("üéÅ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:", version=2) + "\n\n" +
        escape_md("1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏", version=2) + "\n" +
        escape_md("2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ", version=2) + "\n" +
        escape_md("3. –ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç —Å—É–º–º—ã –≤ –≤–∏–¥–µ –ø–µ—á–µ–Ω–µ–∫", version=2) + "\n" +
        escape_md("4. –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 1 –±–æ–Ω—É—Å–Ω—É—é –ø–µ—á–µ–Ω—å–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ", version=2) + "\n\n" +
        escape_md("üí° –°–æ–≤–µ—Ç—ã:", version=2) + "\n" +
        escape_md("‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞", version=2) + "\n" +
        escape_md("‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–≤–æ–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", version=2) + "\n" +
        escape_md("‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö", version=2) + "\n\n" +
        escape_md("üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!", version=2)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="copy_referral_link")],
        [InlineKeyboardButton(text="üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
    ])
    await query.message.answer(
        text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}: {text}")

async def handle_copy_referral_link_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    bot_username = (await query.bot.get_me()).username.lstrip('@')
    referral_link = f"t.me/{bot_username}?start=ref_{user_id}"
    text = (
        escape_md("üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:", version=2) + "\n\n" +
        f"`t\.me/{escape_md(bot_username, version=2)}?start=ref_{escape_md(str(user_id), version=2)}`\n\n" +
        escape_md("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!", version=2)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", url=f"https://t.me/share/url?url={referral_link}&text=–ü–æ–ø—Ä–æ–±—É–π –∫—Ä—É—Ç–æ–π AI-–±–æ—Ç! ü§ñ")],
        [InlineKeyboardButton(text="üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
    ])
    await query.message.answer(
        text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )
    await safe_answer_callback(query, "üìã –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é!", show_alert=True)
    logger.debug(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}: {text}")

async def handle_referral_help_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–º–æ—â—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º."""
    text = (
        escape_md("‚ùì –ü–æ–º–æ—â—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", version=2) + "\n\n" +
        escape_md("üîó –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:", version=2) + "\n" +
        escape_md("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", version=2) + "\n" +
        escape_md("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É", version=2) + "\n" +
        escape_md("3. –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", version=2) + "\n" +
        escape_md("4. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å", version=2) + "\n\n" +
        escape_md("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", version=2) + "\n" +
        escape_md("‚Ä¢ –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å? –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!", version=2) + "\n" +
        escape_md("‚Ä¢ –ö–æ–≥–¥–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –±–æ–Ω—É—Å? –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏", version=2) + "\n" +
        escape_md("‚Ä¢ –°–≥–æ—Ä–∞—é—Ç –ª–∏ –±–æ–Ω—É—Å—ã? –ù–µ—Ç, –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞", version=2) + "\n\n" +
        escape_md("üí¨ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!", version=2)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
    ])
    await query.message.answer(
        text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ü–æ–º–æ—â—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}: {text}")

async def handle_my_referrals_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ–Ω—É—Å–æ–≤."""
    logger.debug(f"handle_my_referrals: user_id={user_id}")
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("SELECT referred_id, status, created_at, completed_at FROM referrals WHERE referrer_id = ?", (user_id,))
            my_referrals = await c.fetchall()
            await c.execute("SELECT SUM(reward_photos) FROM referral_rewards WHERE referrer_id = ?", (user_id,))
            total_bonuses_result = await c.fetchone()
            total_bonuses = total_bonuses_result[0] if total_bonuses_result[0] is not None else 0
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(my_referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        my_referrals = []
        total_bonuses = 0
    
    bot_username = (await query.bot.get_me()).username.lstrip('@')
    referral_link = f"t.me/{bot_username}?start=ref_{user_id}"
    text = (
        escape_md("üë• –¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:", version=2) + "\n\n"
    )
    active_referrals = 0
    if my_referrals:
        text += escape_md(f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(my_referrals)} —á–µ–ª–æ–≤–µ–∫", version=2) + "\n\n"
        for ref in my_referrals[-10:]:
            ref_user_id = ref['referred_id']
            ref_date = ref['created_at']
            ref_status = ref['status']
            completed_at = ref['completed_at']
            ref_data = await check_database_user(ref_user_id)
            has_purchased = ref_status == 'completed'
            status = "üí≥ –°–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É" if has_purchased else "‚è≥ –ë–µ–∑ –ø–æ–∫—É–ø–æ–∫"
            if has_purchased:
                active_referrals += 1
            text += (
                escape_md(f"‚Ä¢ ID {ref_user_id} - {ref_date} ({status})", version=2) + "\n"
            )
            if completed_at and has_purchased:
                text += escape_md(f"  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_at}", version=2) + "\n"
    else:
        text += escape_md("_–¢—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª_", version=2) + "\n"
        logger.info(f"–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}")
    
    text += (
        "\n" +
        escape_md("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤:", version=2) + "\n" +
        escape_md(f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –ø–æ–∫—É–ø–∫–∞–º–∏: {active_referrals}", version=2) + "\n" +
        escape_md(f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫: {total_bonuses}", version=2) + "\n\n" +
        escape_md("üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:", version=2) + "\n" +
        f"`t\.me/{escape_md(bot_username, version=2)}?start=ref_{escape_md(str(user_id), version=2)}`\n\n" +
        escape_md("_–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å 10% –æ—Ç —Å—É–º–º—ã –≤ –≤–∏–¥–µ –ø–µ—á–µ–Ω–µ–∫!_", version=2)
    )
    await query.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={referral_link}&text=–ü–æ–ø—Ä–æ–±—É–π –∫—Ä—É—Ç–æ–π AI-–±–æ—Ç! ü§ñ")],
            [InlineKeyboardButton(text="üîô –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="user_stats")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–†–µ—Ñ–µ—Ä–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è user_id={user_id}: {text}")

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    await state.clear()
    text = escape_md("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", version=2)
    reply_markup = await create_admin_keyboard() if user_id in ADMIN_IDS else await create_main_menu_keyboard(user_id)
    await message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@referrals_callbacks_router.callback_query(lambda c: c.data and (c.data.startswith("referral") or c.data == "my_referrals" or c.data == "copy_referral_link"))
async def referrals_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    await handle_referrals_callback(query, state)