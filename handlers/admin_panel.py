import asyncio
import logging
import uuid
from datetime import datetime, timedelta
import pytz
from typing import List, Dict, Optional
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from database import (
    get_all_users_stats, get_total_remaining_photos, get_payments_by_date,
    get_user_trainedmodels, get_registrations_by_date
)
from config import ADMIN_IDS, DATABASE_PATH
from keyboards import create_admin_keyboard, create_main_menu_keyboard
from handlers.utils import (
    safe_escape_markdown as escape_md, truncate_text, safe_edit_message, debug_markdown_text
)
import aiosqlite
from excel_utils import create_payments_excel, create_registrations_excel
import os

logger = logging.getLogger(__name__)

async def admin_panel(message: Message, state: FSMContext, user_id: Optional[int] = None) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = user_id or message.from_user.id
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: user_id={user_id}, ADMIN_IDS={ADMIN_IDS}")
    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    await state.clear()
    text = (
        "üõ† –ê–¥–º–∏–Ω\-–ø–∞–Ω–µ–ª—å:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    reply_markup = await create_admin_keyboard()
    await message.answer(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è user_id={user_id}")

async def show_admin_stats(callback_query: CallbackQuery, state: FSMContext, page: int = 1) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    user_id = callback_query.from_user.id
    bot = callback_query.bot
    if user_id not in ADMIN_IDS:
        await callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    page_size = 5
    try:
        users_data, total_users = await get_all_users_stats(page=page, page_size=page_size)
        all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
        total_photos_left = await get_total_remaining_photos()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ get_all_users_stats: {[dict(zip(['user_id', 'username', 'first_name', 'generations_left', 'avatar_left', 'first_purchase', 'active_avatar_id', 'email', 'referrer_id', 'referrals_made_count', 'payments_count', 'total_spent'], user)) for user in users_data]}")

        paying_users = sum(1 for user in all_users_data if len(user) >= 11 and user[10] > 0)
        non_paying_users = total_users - paying_users
        paying_percent = (paying_users / total_users * 100) if total_users > 0 else 0
        non_paying_percent = (non_paying_users / total_users * 100) if total_users > 0 else 0

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        paying_percent_str = f"{paying_percent:.2f}"
        non_paying_percent_str = f"{non_paying_percent:.2f}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí≥ –ü–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {paying_users} ({paying_percent_str}%)\n"
            f"üÜì –ù–µ–ø–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {non_paying_users} ({non_paying_percent_str}%)\n"
            f"üì∏ –°—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—á–µ–Ω–µ–∫ —É –≤—Å–µ—Ö: {total_photos_left}\n\n"
        )

        # –í—ã—á–∏—Å–ª—è–µ–º max_pages
        max_pages = (total_users + page_size - 1) // page_size or 1
        stats_text += f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max_pages}):\n"

        keyboard_buttons = []

        if not users_data:
            stats_text += "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö._\n"
        else:
            for user in users_data:
                if len(user) < 12:
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
                    continue

                # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø–æ–ª–µ–π
                u_id, u_name, f_name, g_left, a_left, f_purchase, act_avatar, email, ref_id, refs_made, pays_count, spent_total = user

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
                def clean_text(text: Optional[str]) -> str:
                    if not text:
                        return ""
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å Markdown V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∏—Å–∫–ª—é—á–∞—è '_' –∏ '.'
                    for char in ['*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '=', '|', '{', '}', '!']:
                        text = text.replace(char, f'\\{char}')
                    return text

                name_display = clean_text(f_name or u_name or f"ID {u_id}")
                username_display = f"@{clean_text(u_name)}" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
                email_display = clean_text(email or "–ù–µ —É–∫–∞–∑–∞–Ω")
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º spent_total –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∑–∞—Ä–∞–Ω–µ–µ
                spent_total_str = f"{spent_total:.2f}" if pays_count > 0 and spent_total is not None else "0.00"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—ã—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                separator = '-' * 30
                stats_text += f"\n{separator}\n"
                stats_text += f"üë§ {name_display} {username_display}\n"
                stats_text += f"üÜî ID: {u_id}\n"
                stats_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {g_left} –ø–µ—á–µ–Ω–µ–∫, {a_left} –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
                stats_text += (
                    f"üí≥ –ü–æ–∫—É–ø–æ–∫: {pays_count}, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent_total_str} RUB\n"
                    if pays_count > 0
                    else "üí≥ –ü–æ–∫—É–ø–æ–∫: –Ω–µ—Ç\n"
                )
                if ref_id:
                    stats_text += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω: ID {ref_id}\n"
                if refs_made > 0:
                    stats_text += f"üéØ –ü—Ä–∏–≤–µ–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_made}\n"
                stats_text += f"üìß Email: {email_display}\n"
                if act_avatar:
                    stats_text += f"üåü –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä ID: {act_avatar}\n"

                # –î–ª—è –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
                button_name = truncate_text(f_name or u_name or f"ID {u_id}", 20)
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üë§ {button_name} (ID: {u_id})",
                        callback_data=f"user_actions_{u_id}"
                    )
                ])

        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥.",
                callback_data=f"admin_stats_page_{page-1}"
            ))
        if page * page_size < total_users:
            nav_buttons.append(InlineKeyboardButton(
                text="–°–ª–µ–¥. ‚û°Ô∏è",
                callback_data=f"admin_stats_page_{page+1}"
            ))
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)

        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_panel"
            )
        ])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # –û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logger.debug(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç stats_text –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {stats_text[:200]}...")
        debug_markdown_text(stats_text)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_edit_message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await safe_edit_message(
            message=callback_query.message,
            text=stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}, page={page}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        error_text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2)
        reply_markup = await create_admin_keyboard()
        await safe_edit_message(
            message=callback_query.message,
            text=error_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

async def get_all_failed_avatars() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    failed_avatars = []
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute("""
                SELECT 
                    tm.avatar_id, tm.user_id, tm.model_id, tm.model_version, tm.status,
                    tm.prediction_id, tm.avatar_name, tm.created_at, u.username, u.first_name
                FROM user_trainedmodels tm
                LEFT JOIN users u ON tm.user_id = u.user_id
                WHERE tm.status IN ('failed', 'error') OR tm.status IS NULL OR tm.status = ''
                ORDER BY tm.created_at DESC
            """)
            rows = await cursor.fetchall()
            for row in rows:
                failed_avatars.append({
                    'avatar_id': row['avatar_id'],
                    'user_id': row['user_id'],
                    'model_id': row['model_id'],
                    'model_version': row['model_version'],
                    'status': row['status'] or 'unknown',
                    'prediction_id': row['prediction_id'],
                    'avatar_name': row['avatar_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏',
                    'created_at': row['created_at'],
                    'username': row['username'],
                    'full_name': row['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'
                })
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(failed_avatars)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤")
        return failed_avatars
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}", exc_info=True)
        return []

async def delete_all_failed_avatars() -> int:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("""
                DELETE FROM user_trainedmodels 
                WHERE status IN ('failed', 'error') OR status IS NULL OR status = ''
            """)
            deleted_count = cursor.rowcount
            await db.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤")
            return deleted_count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}", exc_info=True)
        return 0

async def admin_show_failed_avatars(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—É –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã."""
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_IDS:
        await callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    failed_avatars = await get_all_failed_avatars()
    if not failed_avatars:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        text = "‚úÖ –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏!"
        debug_markdown_text(text)
        await safe_edit_message(
            message=callback_query.message,
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
        return

    users_with_errors = {}
    for avatar in failed_avatars:
        user_id_key = avatar['user_id']
        if user_id_key not in users_with_errors:
            users_with_errors[user_id_key] = {
                'username': avatar['username'],
                'full_name': avatar['full_name'],
                'avatars': []
            }
        users_with_errors[user_id_key]['avatars'].append(avatar)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    def clean_text(text: Optional[str]) -> str:
        if not text:
            return ""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å Markdown V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∏—Å–∫–ª—é—á–∞—è '_' –∏ '.'
        for char in ['*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '=', '|', '{', '}', '!']:
            text = text.replace(char, f'\\{char}')
        return text

    text = (
        f"‚ùå –í—Å–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(failed_avatars)}\n"
        f"üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_with_errors)}\n\n"
    )

    for i, (user_id_key, user_data) in enumerate(list(users_with_errors.items())[:10], 1):
        user_info = clean_text(user_data['full_name'])
        if user_data['username']:
            user_info += f" (@{clean_text(user_data['username'])})"
        user_info += f" \[ID: {user_id_key}\]"
        text += f"*{i}. {user_info}*\n"
        text += f"   –û—à–∏–±–æ–∫: {len(user_data['avatars'])}\n"
        for j, avatar in enumerate(user_data['avatars'][:3], 1):
            text += f"   ‚Ä¢ {clean_text(avatar['avatar_name'])} ({clean_text(avatar['status'])})\n"
        if len(user_data['avatars']) > 3:
            text += f"   ‚Ä¢ ... –∏ –µ—â–µ {len(user_data['avatars']) - 3}\n"
        text += "\n"

    if len(users_with_errors) > 10:
        text += f"\n_...–∏ –µ—â–µ {len(users_with_errors) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="admin_delete_all_failed")],
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])

    debug_markdown_text(text)
    await safe_edit_message(
        message=callback_query.message,
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è user_id={user_id}")

async def admin_confirm_delete_all_failed(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤."""
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_IDS:
        await callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    failed_avatars = await get_all_failed_avatars()
    total_count = len(failed_avatars)
    text = (
        f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*:\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å *{total_count}* –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨*!:\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–ï", callback_data="admin_confirm_delete_all"),
            InlineKeyboardButton(text="‚ùå –û–¢–ú–ï–ù–ê", callback_data="admin_failed_avatars")
        ]
    ])

    debug_markdown_text(text)
    await safe_edit_message(
        message=callback_query.message,
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è user_id={user_id}")

async def admin_execute_delete_all_failed(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤."""
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_IDS:
        await callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    await callback_query.answer("üîÑ –£–¥–∞–ª—è—é –∞–≤–∞—Ç–∞—Ä—ã...")
    deleted_count = await delete_all_failed_avatars()

    if deleted_count > 0:
        text = (
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ!*:\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: *{deleted_count}*\n\n"
            f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
        )
    else:
        text = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏*:\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])

    debug_markdown_text(text)
    await safe_edit_message(
        message=callback_query.message,
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è user_id={user_id}, —É–¥–∞–ª–µ–Ω–æ={deleted_count}")

async def send_daily_payments_report(bot: Bot) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å."""
    msk_tz = pytz.timezone('Europe/Moscow')
    yesterday = (datetime.now(msk_tz) - timedelta(days=1)).strftime('%Y-%m-%d')

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –∑–∞ –≤—á–µ—Ä–∞
        payments = await get_payments_by_date(yesterday, yesterday)
        registrations = await get_registrations_by_date(yesterday)

        payments_file_path = None
        registrations_file_path = None

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if payments:
            payments_filename = f"payments_{yesterday}_{uuid.uuid4().hex[:8]}.xlsx"
            payments_file_path = create_payments_excel(payments, payments_filename, yesterday)
        else:
            logger.info(f"–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ {yesterday} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        if registrations:
            registrations_filename = f"registrations_{yesterday}_{uuid.uuid4().hex[:8]}.xlsx"
            registrations_file_path = create_registrations_excel(registrations, registrations_filename, yesterday)
        else:
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ {yesterday} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_payments = len(payments)
        total_amount = sum(p[2] for p in payments if p[2]) if payments else 0
        total_registrations = len(registrations)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        total_amount_str = f"{total_amount:.2f}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_escape_markdown
        text = (
            escape_md(f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {yesterday} (MSK):", version=2) + "\n\n" +
            escape_md("üí∞ –ü–ª–∞—Ç–µ–∂–∏:", version=2) + "\n" +
            escape_md(f"üî¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}", version=2) + "\n" +
            escape_md(f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount_str} RUB", version=2) + "\n\n" +
            escape_md("üë• –ù–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", version=2) + "\n" +
            escape_md(f"üî¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_registrations}", version=2) + "\n\n" +
            escape_md("üìä –î–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö.", version=2)
        )

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        if not payments and not registrations:
            text = escape_md(f"üö´ –ó–∞ {yesterday} (MSK) –Ω–µ—Ç –Ω–∏ –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∏ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.", version=2)
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=text,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏ —Ñ–∞–π–ª—ã –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    parse_mode=ParseMode.MARKDOWN_V2
                )

                if payments_file_path and os.path.exists(payments_file_path):
                    await bot.send_document(
                        chat_id=admin_id,
                        document=FSInputFile(payments_file_path, filename=payments_filename),
                        caption=escape_md(f"–û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∑–∞ {yesterday} (MSK)", version=2),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )

                if registrations_file_path and os.path.exists(registrations_file_path):
                    await bot.send_document(
                        chat_id=admin_id,
                        document=FSInputFile(registrations_file_path, filename=registrations_filename),
                        caption=escape_md(f"–û—Ç—á–µ—Ç –ø–æ –Ω–æ–≤—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º –∑–∞ {yesterday} (MSK)", version=2),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if payments_file_path and os.path.exists(payments_file_path):
            os.remove(payments_file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π {payments_file_path} —É–¥–∞–ª–µ–Ω.")
        if registrations_file_path and os.path.exists(registrations_file_path):
            os.remove(registrations_file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π {registrations_file_path} —É–¥–∞–ª–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ {yesterday}: {e}", exc_info=True)
        error_text = escape_md("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", version=2)
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=error_text,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    await state.clear()
    text = escape_md("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", version=2)
    reply_markup = await create_admin_keyboard() if user_id in ADMIN_IDS else await create_main_menu_keyboard(user_id)
    await message.answer(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è user_id={user_id}")