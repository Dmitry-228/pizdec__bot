# handlers/messages.py
import aiosqlite
import os
import uuid
import re
import time
import logging
from typing import Optional
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from transliterate import translit
from handlers.utils import safe_escape_markdown as escape_md, send_message_with_fallback, create_payment_link, get_tariff_text, safe_escape_markdown
from config import ADMIN_IDS, TARIFFS, DATABASE_PATH
from generation_config import IMAGE_GENERATION_MODELS
from database import (
    check_database_user, update_user_credits, add_resources_on_payment,
    log_generation, search_users_by_query, is_user_blocked, delete_user_activity
)
from keyboards import (
    create_main_menu_keyboard, create_subscription_keyboard,
    create_training_keyboard, create_confirmation_keyboard,
    create_admin_keyboard, create_broadcast_keyboard,
    create_aspect_ratio_keyboard, create_photo_generate_menu_keyboard,
    create_video_generate_menu_keyboard, create_user_profile_keyboard, create_back_keyboard
)
from generation.training import start_training
from generation.videos import generate_video, create_video_photo_keyboard
from llama_helper import generate_assisted_prompt
from handlers.commands import menu
from handlers.broadcast import broadcast_message_admin, broadcast_to_paid_users, broadcast_to_non_paid_users
from handlers.admin_panel import admin_panel
from states import BotStates, VideoStates
from handlers.photo_transform import PhotoTransformStates
logger = logging.getLogger(__name__)

async def notify_startup() -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    bot = Bot.get_current()
    for admin_id in ADMIN_IDS:
        try:
            await send_message_with_fallback(
                bot, admin_id,
                escape_md("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def send_daily_payments_report(bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∞–¥–º–∏–Ω–∞–º."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            await c.execute("""
                SELECT user_id, plan, amount, created_at
                FROM payments
                WHERE DATE(created_at) = ? AND status = 'succeeded'
            """, (yesterday,))
            payments = await c.fetchall()

        if not payments:
            report_text = escape_md(f"üìä –û—Ç—á–µ—Ç –∑–∞ `{yesterday}`: –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –±—ã–ª–æ.", version=2)
        else:
            total_amount = sum(p['amount'] for p in payments)
            report_text = (
                escape_md(f"üìä –û—Ç—á–µ—Ç –∑–∞ `{yesterday}`:\n\n", version=2) +
                escape_md(f"–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: `{len(payments)}`\n", version=2) +
                escape_md(f"–û–±—â–∞—è —Å—É–º–º–∞: `{total_amount:.2f}` RUB\n\n", version=2)
            )
            for p in payments[:5]:
                report_text += escape_md(f"‚Ä¢ User `{p['user_id']}`: `{p['plan']}` - `{p['amount']}`‚ÇΩ (`{p['created_at']}`)\n", version=2)
            if len(payments) > 5:
                report_text += escape_md(f"‚Ä¢ –ò –µ—â–µ `{len(payments) - 5}` –ø–ª–∞—Ç–µ–∂–µ–π...", version=2)

        for admin_id in ADMIN_IDS:
            await send_message_with_fallback(
                bot, admin_id, report_text, parse_mode=ParseMode.MARKDOWN_V2
            )
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ {yesterday}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö: {e}", exc_info=True)

async def send_welcome_message(bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            time_threshold = (datetime.now() - timedelta(minutes=2)).strftime('%Y-%m-%d %H:%M:%S')
            await c.execute("""
                SELECT user_id, username, first_name
                FROM users
                WHERE created_at >= ? AND welcome_sent = 0
            """, (time_threshold,))
            new_users = await c.fetchall()

        if not new_users:
            logger.debug("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PixelPie_AI!\n\n"
            "üé® –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!\n"
            "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –Ω–∞—á–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–µ–¥–µ–≤—Ä—ã.\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )

        for user in new_users:
            user_id = user['user_id']
            try:
                await send_message_with_fallback(
                    bot, user_id, escape_md(welcome_text, version=2),
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                async with aiosqlite.connect(DATABASE_PATH) as conn:
                    c = await conn.cursor()
                    await c.execute("UPDATE users SET welcome_sent = 1 WHERE user_id = ?", (user_id,))
                    await conn.commit()
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è user_id={user_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)

async def process_scheduled_broadcasts(bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            await c.execute("""
                SELECT id, message_text, media_type, media_id, target_group, scheduled_time
                FROM scheduled_broadcasts
                WHERE scheduled_time <= ? AND status = 'pending'
            """, (current_time,))
            broadcasts = await c.fetchall()

        if not broadcasts:
            logger.debug("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        for broadcast in broadcasts:
            broadcast_id = broadcast['id']
            message_text = broadcast['message_text']
            media_type = broadcast['media_type']
            media_id = broadcast['media_id']
            target_group = broadcast['target_group']

            try:
                if target_group == 'all':
                    await broadcast_message_admin(None, message_text, None, media_type, media_id, broadcast_id=broadcast_id)
                elif target_group == 'paid':
                    await broadcast_to_paid_users(None, message_text, None, media_type, media_id, broadcast_id=broadcast_id)
                elif target_group == 'non_paid':
                    await broadcast_to_non_paid_users(None, message_text, None, media_type, media_id, broadcast_id=broadcast_id)

                async with aiosqlite.connect(DATABASE_PATH) as conn:
                    c = await conn.cursor()
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET status = 'completed' WHERE id = ?",
                        (broadcast_id,)
                    )
                    await conn.commit()
                logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {target_group}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: {e}", exc_info=True)
                async with aiosqlite.connect(DATABASE_PATH) as conn:
                    c = await conn.cursor()
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET status = 'failed' WHERE id = ?",
                        (broadcast_id,)
                    )
                    await conn.commit()
                for admin_id in ADMIN_IDS:
                    await send_message_with_fallback(
                        bot, admin_id,
                        escape_md(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID `{broadcast_id}`: {str(e)}", version=2),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {e}", exc_info=True)

async def handle_photo(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ."""
    user_id = message.from_user.id
    bot = message.bot

    if await is_user_blocked(user_id):
        await send_message_with_fallback(
            bot, user_id, escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
        return

    if not message.photo:
        logger.warning(f"handle_photo –≤—ã–∑–≤–∞–Ω –±–µ–∑ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")
        return

    photo_file_id = message.photo[-1].file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id}, file_id={photo_file_id}")
    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_photo: user_id={user_id}, state={current_state}, user_data={user_data}")

    if current_state == PhotoTransformStates.waiting_for_photo:
        from handlers.photo_transform import handle_photo as handle_transform_photo
        await handle_transform_photo(message, state)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    if user_id in ADMIN_IDS and current_state == BotStates.AWAITING_BROADCAST_MEDIA_CONFIRM:
        from handlers.broadcast import handle_broadcast_media
        await handle_broadcast_media(message, state)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if user_id in ADMIN_IDS and user_data.get('awaiting_chat_message'):
        await state.update_data(admin_media_type='photo', admin_media_id=photo_file_id)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞'.", version=2),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{user_data.get('awaiting_chat_message')}")]]
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if user_data.get('training_step') in ['upload_photos', 'confirm_training']:
        from generation.training import handle_training_photos
        await handle_training_photos(message, state)
        return

    elif user_data.get('waiting_for_photo') and user_data.get('generation_type') == 'prompt_based':
        await handle_prompt_based_photo(message, state, photo_file_id)
        return

    elif user_data.get('generation_type') == 'photo_to_photo' and user_data.get('waiting_for_photo'):
        await handle_photo_to_photo_reference(message, state, photo_file_id)
        return

    elif user_data.get('generation_type') == 'photo_to_photo' and user_data.get('waiting_for_mask'):
        await handle_photo_to_photo_mask(message, state, photo_file_id)
        return

    elif user_data.get('awaiting_video_photo') or current_state == VideoStates.AWAITING_VIDEO_PHOTO:
        from generation.videos import handle_video_photo
        await handle_video_photo(message, state)
        return

    else:
        logger.info(f"–§–æ—Ç–æ –æ—Ç user_id={user_id} –ø–æ–ª—É—á–µ–Ω–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
        await send_message_with_fallback(
            bot, user_id,
            escape_md("üì∏ –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Ñ–æ—Ç–æ! –ï—Å–ª–∏ —Ç—ã —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –Ω–∏–º, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –≤ /menu.", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_video(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ."""
    user_id = message.from_user.id
    bot = message.bot

    if await is_user_blocked(user_id):
        await send_message_with_fallback(
            bot, user_id, escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
        return

    if not message.video:
        logger.warning(f"handle_video –≤—ã–∑–≤–∞–Ω –±–µ–∑ –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}")
        return

    video_file_id = message.video.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç user_id={user_id}, file_id={video_file_id}")

    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_video: user_id={user_id}, state={current_state}, user_data={user_data}")

    if user_id in ADMIN_IDS and (user_data.get('awaiting_broadcast_media_confirm') or current_state == BotStates.AWAITING_BROADCAST_MEDIA_CONFIRM):
        from handlers.broadcast import handle_broadcast_media
        await handle_broadcast_media(message, state)
        return

    if user_id in ADMIN_IDS and (user_data.get('awaiting_broadcast_message') or current_state == BotStates.AWAITING_BROADCAST_MESSAGE):
        await state.update_data(admin_media_type='video', admin_media_id=video_file_id)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_MESSAGE)
        return

    if user_id in ADMIN_IDS and user_data.get('awaiting_chat_message'):
        await state.update_data(admin_media_type='video', admin_media_id=video_file_id)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞'.", version=2),
            reply_markup=await create_broadcast_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    else:
        logger.info(f"–í–∏–¥–µ–æ –æ—Ç user_id={user_id} –ø–æ–ª—É—á–µ–Ω–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
        await send_message_with_fallback(
            bot, user_id,
            escape_md("üé• –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ –≤–∏–¥–µ–æ! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI-–≤–∏–¥–µ–æ (Kling 2.1) –∏—Å–ø–æ–ª—å–∑—É–π /menu ‚Üí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚Üí AI-–≤–∏–¥–µ–æ (Kling 2.1).", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_training_photo(message: Message, state: FSMContext, photo_file_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    user_id = message.from_user.id
    bot = message.bot
    logger.warning(f"handle_training_photo —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ training.handle_training_photos –¥–ª—è user_id={user_id}")
    from generation.training import handle_training_photos
    await handle_training_photos(message, state)

async def handle_prompt_based_photo(message: Message, state: FSMContext, photo_file_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è prompt_based –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    bot = message.bot

    try:
        photo_file = await bot.get_file(photo_file_id)
        uploads_dir = f"generated/{user_id}"
        os.makedirs(uploads_dir, exist_ok=True)
        photo_path = os.path.join(uploads_dir, f"prompt_photo_{uuid.uuid4()}.jpg")
        await bot.download_file(photo_file.file_path, photo_path)

        from generation.images import upload_image_to_replicate
        image_url = await upload_image_to_replicate(photo_path)

        user_data = await state.get_data()
        await state.update_data(
            photo_path=photo_path,
            reference_image_url=image_url,
            waiting_for_photo=False,
            original_generation_type=user_data.get('generation_type', 'prompt_based'),
            original_model_key=user_data.get('model_key')
        )

        prompt_text = escape_md(
            "‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            version=2
        )
        await send_message_with_fallback(
            bot, user_id, prompt_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generate_menu")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        await state.update_data(waiting_for_custom_prompt_photo=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è prompt_based –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_photo_to_photo_reference(message: Message, state: FSMContext, photo_file_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è photo-to-photo."""
    user_id = message.from_user.id
    bot = message.bot

    try:
        photo_file = await bot.get_file(photo_file_id)
        uploads_dir = f"generated/{user_id}"
        os.makedirs(uploads_dir, exist_ok=True)
        p2p_photo_path = os.path.join(uploads_dir, f"p2p_ref_{uuid.uuid4()}.jpg")
        await bot.download_file(photo_file.file_path, p2p_photo_path)

        from generation.images import upload_image_to_replicate
        image_url = await upload_image_to_replicate(p2p_photo_path)

        await state.update_data(
            photo_path=p2p_photo_path,
            reference_image_url=image_url,
            waiting_for_photo=False
        )

        p2p_text = escape_md(
            "‚úÖ –§–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n\n"
            "üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç' –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è.",
            version=2
        )
        await send_message_with_fallback(
            bot, user_id, p2p_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="skip_prompt")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generate_menu")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_photo_to_photo_mask(message: Message, state: FSMContext, photo_file_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ –¥–ª—è photo-to-photo."""
    user_id = message.from_user.id
    bot = message.bot

    try:
        photo_file = await bot.get_file(photo_file_id)
        uploads_dir = f"generated/{user_id}"
        os.makedirs(uploads_dir, exist_ok=True)
        p2p_mask_path = os.path.join(uploads_dir, f"p2p_mask_{uuid.uuid4()}.png")
        await bot.download_file(photo_file.file_path, p2p_mask_path)

        await state.update_data(
            mask_path=p2p_mask_path,
            waiting_for_mask=False,
            prompt="copy"
        )

        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚úÖ –ú–∞—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        from handlers.callbacks_user import ask_for_aspect_ratio_callback
        await ask_for_aspect_ratio_callback(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_text(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    bot = message.bot
    text = message.text.strip()
    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç user_id={user_id}: '{text[:50]}...'")

    if await is_user_blocked(user_id):
        await send_message_with_fallback(
            bot, user_id,
            escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç: {text}")
        return

    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_text: user_id={user_id}, state={current_state}, user_data={user_data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if user_data.get('waiting_for_custom_prompt_manual'):
        await handle_manual_prompt_input(message, state, text)
        return

    if user_data.get('waiting_for_video_prompt') or current_state == VideoStates.AWAITING_VIDEO_PROMPT:
        from generation.videos import handle_video_prompt
        await handle_video_prompt(message, state)
        return

    if user_data.get('waiting_for_custom_prompt_llama'):
        await handle_llama_prompt_input(message, state, text)
        return

    if user_data.get('waiting_for_custom_prompt_photo'):
        await handle_custom_prompt_photo_input(message, state, text)
        return

    if user_data.get('training_step') == 'enter_avatar_name':
        from generation.training import handle_avatar_name
        await handle_avatar_name(message, state)
        return

    if user_id in ADMIN_IDS and current_state == BotStates.AWAITING_BROADCAST_MESSAGE:
        from handlers.broadcast import handle_broadcast_message
        await handle_broadcast_message(message, state)
        return

    if user_id in ADMIN_IDS and current_state == BotStates.AWAITING_BROADCAST_SCHEDULE:
        from handlers.broadcast import handle_broadcast_schedule_time
        await handle_broadcast_schedule_time(message, state)
        return

    if user_id in ADMIN_IDS and user_data.get('awaiting_chat_message'):
        target_user_id = user_data['awaiting_chat_message']
        media_type = user_data.get('admin_media_type')
        media_id = user_data.get('admin_media_id')
        await state.update_data(admin_user_id=user_id)
        await handle_admin_chat_message(bot, state, target_user_id, text, media_type, media_id)
        await state.update_data(
            awaiting_chat_message=None,
            admin_media_type=None,
            admin_media_id=None,
            admin_user_id=None
        )
        return

    if user_id in ADMIN_IDS and user_data.get('awaiting_balance_change'):
        from handlers.user_management import handle_balance_change_input
        await handle_balance_change_input(message, state)
        return

    if user_id in ADMIN_IDS and user_data.get('awaiting_block_reason'):
        from handlers.user_management import handle_block_reason_input
        await handle_block_reason_input(message, state)
        return

    if user_id in ADMIN_IDS and user_data.get('awaiting_user_search'):
        from handlers.user_management import handle_user_search_input
        await handle_user_search_input(message, state)
        return

    if user_data.get('awaiting_email'):
        await handle_email_input(message, state, text)
        return

    if user_data.get('awaiting_email_change'):
        await handle_email_change_input(message, state, text)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    acting_as_user = user_data.get('acting_as_user', False)
    if user_id in ADMIN_IDS and not acting_as_user:
        await handle_admin_text(message, state)
        return

    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç user_id={user_id} ('{text[:50]}...') –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –æ–∂–∏–¥–∞–µ–º–æ–º—É –≤–≤–æ–¥—É.")
    await send_message_with_fallback(
        bot, user_id,
        escape_md("üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.", version=2),
        reply_markup=await create_main_menu_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_email_input(message: Message, state: FSMContext, email: str = None) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    user_id = message.from_user.id
    bot = message.bot
    if email is None:
        email = message.text.strip()
    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç user_id={user_id}: '{email}'...")

    user_data = await state.get_data()
    payment_amount = user_data.get('payment_amount')
    payment_description = user_data.get('payment_description')
    tariff_key = user_data.get('payment_tariff_key')

    if not payment_amount or not payment_description or not tariff_key:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: {user_data}")
        await state.clear()
        await send_message_with_fallback(
            bot,
            user_id,
            safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
            reply_markup=await create_subscription_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç user_id={user_id}: {email}")
        await send_message_with_fallback(
            bot,
            user_id,
            safe_escape_markdown("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="subscribe")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            await conn.execute(
                "UPDATE users SET email = ? WHERE user_id = ?",
                (email, user_id)
            )
            await conn.commit()
        logger.info(f"Email `{email}` —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è user_id={user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YooKassa
        bot_username = (await bot.get_me()).username
        payment_url = await create_payment_link(user_id, email, payment_amount, payment_description, bot_username)
        subscription_data = await check_database_user(user_id)
        is_first_purchase = bool(subscription_data[5]) if subscription_data and len(subscription_data) > 5 else True
        bonus_text = " (+ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!)" if is_first_purchase and TARIFFS[tariff_key].get("photos", 0) > 0 else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —è–≤–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—É–º–º—ã
        payment_amount_str = f"{float(payment_amount):.2f}".replace(".", "\\.")  # –Ø–≤–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É
        text_parts = [
            "üí≥ –û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞\n",
            f"‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏: {safe_escape_markdown(payment_description, version=2)}{safe_escape_markdown(bonus_text, version=2)}\n",
            f"üí∞ –°—É–º–º–∞: {payment_amount_str} RUB\n\n",
            f"üîó [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa]({payment_url})\n\n",
            "_–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏._"
        ]
        payment_text = "".join(text_parts)
        logger.debug(f"handle_email_input: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω payment_text –¥–ª—è user_id={user_id}: {payment_text[:200]}...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º send_message_with_fallback
        await send_message_with_fallback(
            bot,
            user_id,
            payment_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="subscribe")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}: {payment_url}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await state.update_data(user_id=user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await send_message_with_fallback(
            bot,
            user_id,
            safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_subscription_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_email_change_input(message: Message, state: FSMContext, email: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è email –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    user_id = message.from_user.id
    bot = message.bot

    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç user_id={user_id}: {email}")
        await message.answer(
            escape_md("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            await conn.execute(
                "UPDATE users SET email = ? WHERE user_id = ?",
                (email, user_id)
            )
            await conn.commit()
        logger.info(f"Email –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{email}` –¥–ª—è user_id={user_id}")
        await state.clear()
        await message.answer(
            escape_md("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", version=2),
            reply_markup=await create_user_profile_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è email –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_user_profile_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_manual_prompt_input(message: Message, state: FSMContext, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ- –∏–ª–∏ –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    bot = message.bot

    if not text or len(text.strip()) < 5:
        logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –æ—Ç user_id={user_id}: {text}")
        user_data = await state.get_data()
        back_callback = "video_generate_menu" if user_data.get('generation_type') == 'ai_video_v2_1' else "back_to_style_selection"
        await message.answer(
            escape_md("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.", version=2),
            reply_markup=await create_back_keyboard(back_callback),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    generation_type = user_data.get('generation_type', 'with_avatar')
    model_key = user_data.get('model_key', 'flux-trained')
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if is_admin_generation:
        await state.update_data(
            is_admin_generation=True,
            admin_generation_for_user=target_user_id,
            message_recipient=user_id,
            generation_target_user=target_user_id,
            original_admin_user=user_id
        )

    # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    try:
        from generation_config import create_optimized_prompt
        enhanced_prompt = create_optimized_prompt(text, generation_type)
        if enhanced_prompt and enhanced_prompt != text:
            logger.info(f"‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è user_id={user_id}: {enhanced_prompt[:100]}...")
            final_prompt = enhanced_prompt
        else:
            final_prompt = text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è user_id={user_id}: {e}")
        final_prompt = text

    await state.update_data(
        prompt=final_prompt,
        original_prompt=text,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        style_name='custom',
        generation_type=generation_type,
        model_key=model_key,
        came_from_custom_prompt=True,
        waiting_for_custom_prompt_manual=False
    )

    if generation_type == 'ai_video_v2_1':
        from generation_config import get_video_generation_cost
        video_cost = user_data.get('video_cost', get_video_generation_cost("ai_video_v2_1"))
        await state.update_data(video_cost=video_cost, awaiting_video_photo=True)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–º–ø—Ç–µ
        if final_prompt != text:
            prompt_message = (
                f"‚úÖ –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
                f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª: `{text[:50]}{'...' if len(text) > 50 else ''}`\n"
                f"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π: `{final_prompt[:50]}{'...' if len(final_prompt) > 50 else ''}`\n\n"
                f"üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ (/skip) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ñ–æ—Ç–æ{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}."
            )
        else:
            prompt_message = (
                f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{text[:50]}{'...' if len(text) > 50 else ''}`\n\n"
                f"üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ (/skip) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ñ–æ—Ç–æ{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}."
            )

        await message.answer(
            escape_md(prompt_message, version=2),
            reply_markup=await create_video_photo_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(VideoStates.AWAITING_VIDEO_PHOTO)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–º–ø—Ç–µ –¥–ª—è —Ñ–æ—Ç–æ
        if final_prompt != text:
            prompt_message = (
                f"‚úÖ –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
                f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª: `{text[:50]}{'...' if len(text) > 50 else ''}`\n"
                f"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π: `{final_prompt[:50]}{'...' if len(final_prompt) > 50 else ''}`\n\n"
                f"üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:"
            )
        else:
            prompt_message = (
                f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{text[:50]}{'...' if len(text) > 50 else ''}`\n\n"
                f"üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:"
            )

        await message.answer(
            escape_md(prompt_message, version=2),
            reply_markup=await create_aspect_ratio_keyboard("back_to_style_selection"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_STYLE_SELECTION)

    logger.info(f"–†—É—á–Ω–æ–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è user_id={user_id}, target_user_id={target_user_id}: {text[:50]}...")

async def handle_llama_prompt_input(message: Message, state: FSMContext, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–¥–µ–∏ –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞."""
    user_id = message.from_user.id
    bot = message.bot
    user_data = await state.get_data()

    if not text or len(text.strip()) < 5:
        logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–¥–µ—è –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –æ—Ç user_id={user_id}: {text}")
        await message.answer(
            escape_md("‚ùå –ò–¥–µ—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="video_generate_menu" if user_data.get('generation_type') == 'ai_video_v2_1' else "back_to_style_selection"
                )]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚è≥ –û–±—Ä–∞—â–∞—é—Å—å –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        generation_type = user_data.get('generation_type', 'with_avatar')
        model_key = user_data.get('model_key', 'flux-trained')
        from generation_config import get_video_generation_cost
        video_cost = user_data.get('video_cost', get_video_generation_cost("ai_video_v2_1")) if generation_type == 'ai_video_v2_1' else None
        gender = user_data.get('selected_gender', None)
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)

        logger.debug(f"handle_llama_prompt_input: user_id={user_id}, generation_type={generation_type}, text={text[:50]}...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ selected_gender –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not gender:
            text_lower = text.lower()
            male_keywords = ['–º—É–∂—á–∏–Ω–∞', '–ø–∞—Ä–µ–Ω—å', '–º—É–∂–∏–∫', '–º—É–∂—Å–∫–æ–π']
            female_keywords = ['–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω—Å–∫–∏–π']
            if any(keyword in text_lower for keyword in male_keywords):
                gender = 'man'
                logger.info(f"–ü–æ–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'man' –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞: {text}")
            elif any(keyword in text_lower for keyword in female_keywords):
                gender = 'woman'
                logger.info(f"–ü–æ–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'woman' –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞: {text}")
            else:
                gender = 'person'
                logger.warning(f"–ü–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è user_id={user_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'person'")
            await state.update_data(selected_gender=gender)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        start_time = time.time()
        task = asyncio.create_task(generate_assisted_prompt(text, gender, generation_type=generation_type))

        # –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await asyncio.sleep(3)
        if not task.done():
            await send_message_with_fallback(
                bot, user_id,
                escape_md("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.debug(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        assisted_prompt = await task
        generation_time = time.time() - start_time
        logger.debug(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è user_id={user_id}: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")

        if not assisted_prompt:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è user_id={user_id}")
            await message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –≤—Ä—É—á–Ω—É—é.", version=2),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="enter_custom_prompt_manual")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="video_generate_menu" if generation_type == 'ai_video_v2_1' else "back_to_style_selection")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        await state.update_data(
            prompt=assisted_prompt,
            user_input_for_llama=text,
            came_from_custom_prompt=True,
            generation_type=generation_type,
            model_key=model_key,
            selected_gender=gender,
            video_cost=video_cost
        )
        if is_admin_generation:
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=target_user_id,
                message_recipient=user_id,
                generation_target_user=target_user_id,
                original_admin_user=user_id
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        MAX_MESSAGE_LENGTH = 4000
        prompt_parts = []
        current_part = ""
        for char in assisted_prompt:
            if len(current_part) + len(char) < MAX_MESSAGE_LENGTH - 100:  # –†–µ–∑–µ—Ä–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                current_part += char
            else:
                prompt_parts.append(current_part)
                current_part = char
        if current_part:
            prompt_parts.append(current_part)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Å—Ç—è–º–∏ –ø—Ä–æ–º–ø—Ç–∞
        for i, part in enumerate(prompt_parts):
            text_msg = escape_md(
                f"ü§ñ {'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç' if i == 0 else '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞'}:\n\n"
                f"`{part}`\n\n"
                f"{'–ü–æ–¥—Ö–æ–¥–∏—Ç?' if i == len(prompt_parts) - 1 else ''}",
                version=2
            )
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_assisted_prompt")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_assisted_prompt")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="video_generate_menu" if generation_type == 'ai_video_v2_1' else "back_to_style_selection")]
            ]) if i == len(prompt_parts) - 1 else None
            await send_message_with_fallback(
                bot, user_id,
                text_msg,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–ß–∞—Å—Ç—å {i+1}/{len(prompt_parts)} AI-–ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}: {part[:50]}...")

        await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

async def handle_custom_prompt_photo_input(message: Message, state: FSMContext, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É."""
    user_id = message.from_user.id
    bot = message.bot

    if not text or len(text.strip()) < 5:
        logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É –æ—Ç user_id={user_id}: {text}")
        await message.answer(
            escape_md("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generate_menu")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    reference_image_url = user_data.get('reference_image_url')
    photo_path = user_data.get('photo_path')

    if not reference_image_url or not photo_path:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è photo_to_photo –¥–ª—è user_id={user_id}: {user_data}")
        await state.clear()
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
            reply_markup=await create_photo_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    await state.update_data(
        prompt=text,
        waiting_for_custom_prompt_photo=False
    )

    await message.answer(
        escape_md(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{text[:50]}{'...' if len(text) > 50 else '}'}`", version=2),
        reply_markup=await create_aspect_ratio_keyboard("generate_menu"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è photo_to_photo —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è user_id={user_id}: {text[:50]}")

async def handle_admin_text(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state in [BotStates.AWAITING_BROADCAST_MESSAGE, BotStates.AWAITING_BROADCAST_CONFIRM]:
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ handle_admin_text –¥–ª—è user_id={message.from_user.id}, state={current_state}")
        return
    logger.info(f"–ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –æ—Ç user_id={message.from_user.id}: {message.text[:50]}")
    await message.answer(
        escape_md("üëã –ê–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", version=2),
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_admin_chat_message(bot: Bot, state: FSMContext, target_user_id: int, text: str, media_type: str = None, media_id: str = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∞–¥–º–∏–Ω–∞."""
    user_data = await state.get_data()
    admin_user_id = user_data.get('admin_user_id')

    try:
        if media_type == 'photo' and media_id:
            await bot.send_photo(
                chat_id=target_user_id,
                photo=media_id,
                caption=escape_md(text, version=2) if text else None,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        elif media_type == 'video' and media_id:
            await bot.send_video(
                chat_id=target_user_id,
                video=media_id,
                caption=escape_md(text, version=2) if text else None,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await bot.send_message(
                chat_id=target_user_id,
                text=escape_md(text, version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∞–¥–º–∏–Ω–∞ `{admin_user_id}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{target_user_id}`")

        await send_message_with_fallback(
            bot, admin_user_id,
            escape_md(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`", version=2),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{target_user_id}` –æ—Ç –∞–¥–º–∏–Ω–∞ `{admin_user_id}`: {e}")
        await send_message_with_fallback(
            bot, admin_user_id,
            escape_md(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`: {str(e)}.", version=2),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{target_user_id}`: {e}", exc_info=True)
        await send_message_with_fallback(
            bot, admin_user_id,
            escape_md(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}.", version=2),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def award_referral_bonuses(user_id: int, bot: Bot, plan_key: str) -> None:
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ (—É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ add_resources_on_payment)."""
    logger.warning(f"–§—É–Ω–∫—Ü–∏—è award_referral_bonuses —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ add_resources_on_payment –¥–ª—è user_id={user_id}")
    return
