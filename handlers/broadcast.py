# handlers/broadcast.py

import asyncio
import json
import logging
import pytz
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from database import get_all_users_stats, get_broadcasts_with_buttons, get_broadcast_buttons, get_paid_users, get_non_paid_users, save_broadcast_button
from config import ADMIN_IDS, DATABASE_PATH, ALLOWED_BROADCAST_CALLBACKS, BROADCAST_CALLBACK_ALIASES
from keyboards import create_admin_keyboard, create_dynamic_broadcast_keyboard, create_admin_user_actions_keyboard, create_broadcast_with_payment_audience_keyboard
from handlers.utils import escape_message_parts, send_message_with_fallback, unescape_markdown
import aiosqlite
from states import BotStates

from logger import get_logger
logger = get_logger('main')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
broadcast_router = Router()

async def clear_user_data(state: FSMContext, user_id: int):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    current_state = await state.get_state()
    if current_state == BotStates.AWAITING_BROADCAST_MESSAGE:
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user_id}, —Ç–∞–∫ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
        return
    await state.clear()
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={user_id} –ø–æ —Ç–∞–π–º–µ—Ä—É")

async def initiate_broadcast(query: CallbackQuery, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É (–æ–±—â—É—é, –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö, –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∏–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã)."""
    user_id = query.from_user.id
    callback_data = query.data

    if user_id not in ADMIN_IDS:
        await query.message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    current_state = await state.get_state()
    if current_state in [
        BotStates.AWAITING_BROADCAST_MESSAGE,
        BotStates.AWAITING_BROADCAST_MEDIA_CONFIRM,
        BotStates.AWAITING_BROADCAST_SCHEDULE,
        BotStates.AWAITING_BROADCAST_AUDIENCE,
        BotStates.AWAITING_BROADCAST_BUTTONS,
        BotStates.AWAITING_BROADCAST_BUTTON_INPUT
    ]:
        logger.debug(f"initiate_broadcast: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è user_id={user_id}")
    else:
        await state.clear()

    if callback_data == "broadcast_with_payment":
        text = escape_message_parts(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã:",
            version=2
        )
        reply_markup = await create_broadcast_with_payment_audience_keyboard()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(awaiting_broadcast_audience=True, user_id=user_id)
        await state.set_state(BotStates.AWAITING_BROADCAST_AUDIENCE)
    else:
        broadcast_type = callback_data.replace("broadcast_", "") if callback_data.startswith("broadcast_") else callback_data
        await state.update_data(
            awaiting_broadcast_message=True,
            broadcast_type=broadcast_type,
            user_id=user_id,
            buttons=[]  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
        async def delayed_clear_user_data():
            await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç
            current_state_after_delay = await state.get_state()
            if current_state_after_delay in [
                BotStates.AWAITING_BROADCAST_MESSAGE,
                BotStates.AWAITING_BROADCAST_AUDIENCE,
                BotStates.AWAITING_BROADCAST_BUTTONS,
                BotStates.AWAITING_BROADCAST_BUTTON_INPUT
            ]:
                await clear_user_data(state, user_id)

        asyncio.create_task(delayed_clear_user_data())

        text = escape_message_parts(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n",
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ).\n",
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
            version=2
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
        ])

        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_MESSAGE)

    await query.answer()
    logger.info(f"initiate_broadcast: user_id={user_id}, callback_data={callback_data}")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@broadcast_router.callback_query(
    lambda c: c.data and c.data.startswith("broadcast_with_payment_")
)
async def handle_broadcast_audience_selection(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã."""
    user_id = query.from_user.id
    callback_data = query.data

    if user_id not in ADMIN_IDS:
        await query.message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_broadcast_audience_selection: user_id={user_id}, callback_data={callback_data}, current_state={current_state}, user_data={user_data}")

    if not user_data.get('awaiting_broadcast_audience') or current_state != BotStates.AWAITING_BROADCAST_AUDIENCE:
        logger.warning(f"handle_broadcast_audience_selection invoked without awaiting_broadcast_audience or incorrect state for user_id={user_id}, state={current_state}")
        await state.clear()
        await query.message.answer(
            escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    broadcast_type = callback_data.replace("broadcast_with_payment_", "")
    await state.update_data(
        awaiting_broadcast_audience=False,
        awaiting_broadcast_message=True,
        broadcast_type=f"with_payment_{broadcast_type}",
        user_id=user_id
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
    async def delayed_clear_user_data():
        await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç
        current_state_after_delay = await state.get_state()
        if current_state_after_delay in [BotStates.AWAITING_BROADCAST_MESSAGE, BotStates.AWAITING_BROADCAST_AUDIENCE]:
            await clear_user_data(state, user_id)
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è user_id={user_id} –ø–æ —Ç–∞–π–º–µ—Ä—É")

    asyncio.create_task(delayed_clear_user_data())

    text = escape_message_parts(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n",
        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ).\n",
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
        version=2
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ])

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BotStates.AWAITING_BROADCAST_MESSAGE)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ AWAITING_BROADCAST_MESSAGE –¥–ª—è user_id={user_id}, broadcast_type={broadcast_type}")
    await query.answer()

@broadcast_router.message(
    StateFilter(BotStates.AWAITING_BROADCAST_MESSAGE),
    lambda message: message.content_type == ContentType.TEXT and message.from_user.id in ADMIN_IDS
)
async def handle_broadcast_message(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = message.from_user.id
    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_broadcast_message: user_id={user_id}, current_state={current_state}, user_data={user_data}")

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not user_data.get('awaiting_broadcast_message') or current_state != BotStates.AWAITING_BROADCAST_MESSAGE:
        logger.warning(f"handle_broadcast_message invoked without awaiting_broadcast_message or incorrect state for user_id={user_id}, state={current_state}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.\n",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
            version=2
        )
        await message.answer(
            text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    await state.update_data(awaiting_broadcast_message=False, user_id=user_id)
    message_text = message.text.strip() if message.text else ""

    if not message_text:
        logger.warning(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç user_id={user_id}")
        text = escape_message_parts(
            "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
            version=2
        )
        keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
        await state.update_data(awaiting_broadcast_message=True, user_id=user_id)
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_MESSAGE)
        return

    await state.update_data(broadcast_message=message_text, awaiting_broadcast_media_confirm=True)

    text = escape_message_parts(
        "üì∏ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?\n",
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –º–µ–¥–∏–∞'.\n",
        "‚ö†Ô∏è –§–æ—Ç–æ/–≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å.",
        version=2
    )
    keyboard = [
        [InlineKeyboardButton(text="–ë–µ–∑ –º–µ–¥–∏–∞", callback_data="broadcast_no_media")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ]
    await message.answer(
        text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BotStates.AWAITING_BROADCAST_MEDIA_CONFIRM)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_BROADCAST_MEDIA_CONFIRM –¥–ª—è user_id={user_id}")

async def handle_broadcast_media(update: Message | CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.from_user.id if isinstance(update, Message) else update.from_user.id
    user_data = await state.get_data()
    if not user_data.get('awaiting_broadcast_media_confirm'):
        logger.warning(f"handle_broadcast_media invoked without awaiting_broadcast_media_confirm for user_id={user_id}")
        await state.clear()
        text = escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.", version=2)
        if isinstance(update, Message):
            await update.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await update.message.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        return

    await state.update_data(awaiting_broadcast_media_confirm=False, user_id=user_id)
    media = None
    media_type = None

    if isinstance(update, Message):
        if update.photo:
            media = update.photo[-1].file_id
            media_type = 'photo'
        elif update.video:
            media = update.video.file_id
            media_type = 'video'
    elif isinstance(update, CallbackQuery) and update.data == "broadcast_no_media":
        await update.answer()

    if media:
        await state.update_data(broadcast_media={'file_id': media, 'type': media_type})
    else:
        await state.update_data(broadcast_media=None)

    text = escape_message_parts(
        "üîò –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?\n",
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ (0-3) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –∫–Ω–æ–ø–æ–∫'.",
        version=2
    )
    keyboard = [
        [InlineKeyboardButton(text="0 (–ë–µ–∑ –∫–Ω–æ–ø–æ–∫)", callback_data="broadcast_no_buttons")],
        [InlineKeyboardButton(text="1", callback_data="broadcast_buttons_1")],
        [InlineKeyboardButton(text="2", callback_data="broadcast_buttons_2")],
        [InlineKeyboardButton(text="3", callback_data="broadcast_buttons_3")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ]
    if isinstance(update, Message):
        await update.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.set_state(BotStates.AWAITING_BROADCAST_BUTTONS)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_BROADCAST_BUTTONS –¥–ª—è user_id={user_id}")

async def handle_broadcast_buttons_count(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ –¥—Ä—É–≥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = query.from_user.id
    callback_data = query.data

    if user_id not in ADMIN_IDS:
        await query.message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_broadcast_buttons_count: user_id={user_id}, callback_data={callback_data}, current_state={current_state}, user_data={user_data}")

    if current_state != BotStates.AWAITING_BROADCAST_BUTTONS:
        logger.warning(f"handle_broadcast_buttons_count invoked without AWAITING_BROADCAST_BUTTONS for user_id={user_id}, state={current_state}")
        await state.clear()
        await query.message.answer(
            escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if callback_data == "broadcast_no_buttons":
        await state.update_data(buttons=[], awaiting_broadcast_buttons=False)
        await proceed_to_broadcast_confirmation(query, state)
        return

    if callback_data.startswith("copy_buttons_"):
        try:
            source_broadcast_id = int(callback_data.replace("copy_buttons_", ""))
            buttons = await get_broadcast_buttons(source_broadcast_id)
            if not buttons:
                logger.warning(f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è broadcast_id={source_broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                text = escape_message_parts(
                    f"‚ùå –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {source_broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
                    version=2
                )
                keyboard = [
                    [InlineKeyboardButton(text="0 (–ë–µ–∑ –∫–Ω–æ–ø–æ–∫)", callback_data="broadcast_no_buttons")],
                    [InlineKeyboardButton(text="1", callback_data="broadcast_buttons_1")],
                    [InlineKeyboardButton(text="2", callback_data="broadcast_buttons_2")],
                    [InlineKeyboardButton(text="3", callback_data="broadcast_buttons_3")],
                    [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
                ]
                await query.message.answer(
                    text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.set_state(BotStates.AWAITING_BROADCAST_BUTTONS)
                return
            await state.update_data(buttons=buttons, awaiting_broadcast_buttons=False)
            await proceed_to_broadcast_confirmation(query, state)
            logger.info(f"–ö–Ω–æ–ø–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ broadcast_id={source_broadcast_id} –¥–ª—è user_id={user_id}")
        except ValueError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π broadcast_id –≤ copy_buttons: {callback_data}, error: {e}")
            text = escape_message_parts(
                f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫.",
                version=2
            )
            keyboard = [
                [InlineKeyboardButton(text="0 (–ë–µ–∑ –∫–Ω–æ–ø–æ–∫)", callback_data="broadcast_no_buttons")],
                [InlineKeyboardButton(text="1", callback_data="broadcast_buttons_1")],
                [InlineKeyboardButton(text="2", callback_data="broadcast_buttons_2")],
                [InlineKeyboardButton(text="3", callback_data="broadcast_buttons_3")],
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
            ]
            await query.message.answer(
                text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(BotStates.AWAITING_BROADCAST_BUTTONS)
        await query.answer()
        return

    try:
        button_count = int(callback_data.replace("broadcast_buttons_", ""))
        if button_count < 1 or button_count > 3:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3")
        await state.update_data(
            button_count=button_count,
            current_button_index=1,
            buttons=[],
            awaiting_broadcast_button_input=True
        )
        text = escape_message_parts(
            f"üîò –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∞–ª–∏–∞—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ 1 (—Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –∞–ª–∏–∞—Å`):\n",
            "–ü—Ä–∏–º–µ—Ä: `–í –º–µ–Ω—é | menu`\n",
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–∏–∞—Å—ã: `{', '.join(sorted(BROADCAST_CALLBACK_ALIASES.keys()))}`",
            version=2
        )
        keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
        await query.message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_BUTTON_INPUT)
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏ 1 –¥–ª—è user_id={user_id}, button_count={button_count}")
    except ValueError as e:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –æ—Ç user_id={user_id}: {callback_data}")
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ (0-3).",
            version=2
        )
        keyboard = [
            [InlineKeyboardButton(text="0 (–ë–µ–∑ –∫–Ω–æ–ø–æ–∫)", callback_data="broadcast_no_buttons")],
            [InlineKeyboardButton(text="1", callback_data="broadcast_buttons_1")],
            [InlineKeyboardButton(text="2", callback_data="broadcast_buttons_2")],
            [InlineKeyboardButton(text="3", callback_data="broadcast_buttons_3")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
        ]
        await query.message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_BUTTONS)
    await query.answer()

async def handle_broadcast_button_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –∞–ª–∏–∞—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏."""
    user_id = message.from_user.id
    user_data = await state.get_data()
    current_state = await state.get_state()
    logger.debug(f"handle_broadcast_button_input: user_id={user_id}, current_state={current_state}, user_data={user_data}")

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not user_data.get('awaiting_broadcast_button_input') or current_state != BotStates.AWAITING_BROADCAST_BUTTON_INPUT:
        logger.warning(f"handle_broadcast_button_input invoked without awaiting_broadcast_button_input for user_id={user_id}, state={current_state}")
        await state.clear()
        await message.answer(
            escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    button_input = message.text.strip()
    button_count = user_data.get('button_count', 0)
    current_button_index = user_data.get('current_button_index', 1)
    buttons = user_data.get('buttons', [])

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    try:
        button_text, alias = button_input.split('|', 1)
        button_text = button_text.strip()[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        alias = alias.strip()[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∞–ª–∏–∞—Å–∞
        if not button_text or not alias:
            raise ValueError("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∞–ª–∏–∞—Å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–ª–∏–∞—Å –≤ callback_data
        callback_data = BROADCAST_CALLBACK_ALIASES.get(alias)
        if not callback_data or callback_data not in ALLOWED_BROADCAST_CALLBACKS:
            raise ValueError(f"–ê–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {', '.join(sorted(BROADCAST_CALLBACK_ALIASES.keys()))}")
        buttons.append({"text": button_text, "callback_data": callback_data})
        await state.update_data(buttons=buttons)
        logger.debug(f"–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}: text={button_text}, alias={alias}, callback_data={callback_data}")
    except ValueError as e:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ –æ—Ç user_id={user_id}: {button_input}")
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.\n",
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∞–ª–∏–∞—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ {current_button_index} (—Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –∞–ª–∏–∞—Å`).\n",
            "–ü—Ä–∏–º–µ—Ä: `–í –º–µ–Ω—é | menu`\n",
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–∏–∞—Å—ã: `{', '.join(sorted(BROADCAST_CALLBACK_ALIASES.keys()))}`",
            version=2
        )
        keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if current_button_index < button_count:
        next_index = current_button_index + 1
        await state.update_data(current_button_index=next_index)
        text = escape_message_parts(
            f"üîò –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∞–ª–∏–∞—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ {next_index} (—Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –∞–ª–∏–∞—Å`):\n",
            "–ü—Ä–∏–º–µ—Ä: `–í –º–µ–Ω—é | menu`\n",
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–∏–∞—Å—ã: `{', '.join(sorted(BROADCAST_CALLBACK_ALIASES.keys()))}`",
            version=2
        )
        keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_BUTTON_INPUT)
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏ {next_index} –¥–ª—è user_id={user_id}")
        return

    await state.update_data(awaiting_broadcast_button_input=False)
    await proceed_to_broadcast_confirmation(message, state)
    logger.info(f"–í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–≤–µ–¥–µ–Ω—ã –¥–ª—è user_id={user_id}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏")

async def proceed_to_broadcast_confirmation(update: Message | CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.from_user.id if isinstance(update, Message) else update.from_user.id
    user_data = await state.get_data()
    broadcast_type = user_data.get('broadcast_type', 'all')
    message_text = user_data.get('broadcast_message', '')
    media = user_data.get('broadcast_media', None)
    buttons = user_data.get('buttons', [])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if broadcast_type == 'all':
        all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
        target_users = [user[0] for user in all_users_data]
    elif broadcast_type == 'paid':
        target_users = await get_paid_users()
    elif broadcast_type == 'non_paid':
        target_users = await get_non_paid_users()
    elif broadcast_type.startswith('with_payment_'):
        audience_type = broadcast_type.replace('with_payment_', '')
        if audience_type == 'all':
            all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
            target_users = [user[0] for user in all_users_data]
        elif audience_type == 'paid':
            target_users = await get_paid_users()
        elif audience_type == 'non_paid':
            target_users = await get_non_paid_users()
        else:
            text = escape_message_parts(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: `{audience_type}`.",
                version=2
            )
            if isinstance(update, Message):
                await update.answer(
                    text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await update.message.answer(
                    text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
                )
            await state.clear()
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience_type} –¥–ª—è user_id={user_id}")
            return
    else:
        text = escape_message_parts(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: `{broadcast_type}`.",
            version=2
        )
        if isinstance(update, Message):
            await update.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await update.message.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        await state.clear()
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_type} –¥–ª—è user_id={user_id}")
        return

    if not target_users:
        text = escape_message_parts(
            f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–∏–ø: `{broadcast_type}`).",
            version=2
        )
        if isinstance(update, Message):
            await update.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await update.message.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        await state.clear()
        logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ {broadcast_type} –¥–ª—è user_id={user_id}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    buttons_text = "\n".join([f"‚Ä¢ `{button['text']}` -> `{BROADCAST_CALLBACK_ALIASES.get(k, button['callback_data'])}`" for button in buttons for k, v in BROADCAST_CALLBACK_ALIASES.items() if v == button['callback_data']]) if buttons else "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫"
    text = escape_message_parts(
        f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n",
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: `{len(target_users)}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n",
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n\n",
        f"üì∏ –ú–µ–¥–∏–∞: {'–ï—Å—Ç—å' if media else '–ù–µ—Ç'}\n",
        f"üîò –ö–Ω–æ–ø–∫–∏:\n{buttons_text}\n\n",
        f"‚è∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        version=2
    )
    keyboard = [
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="broadcast_send_now")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="broadcast_schedule")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ]
    if isinstance(update, Message):
        await update.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.set_state(BotStates.AWAITING_BROADCAST_SCHEDULE)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}")

async def handle_broadcast_schedule_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = message.from_user.id
    user_data = await state.get_data()
    if not user_data.get('awaiting_broadcast_schedule'):
        logger.warning(f"handle_broadcast_schedule_time invoked without awaiting_broadcast_schedule for user_id={user_id}")
        await state.clear()
        await message.answer(
            escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.", version=2),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    await state.update_data(awaiting_broadcast_schedule=None, user_id=user_id)
    text = message.text.strip()

    try:
        schedule_time = datetime.strptime(text, '%Y-%m-%d %H:%M')
        if schedule_time < datetime.now():
            raise ValueError("–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")

        broadcast_type = user_data.get('broadcast_type', 'all')
        message_text = user_data.get('broadcast_message', '')
        media = user_data.get('broadcast_media', None)
        buttons = user_data.get('buttons', [])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

        await schedule_broadcast(schedule_time, message_text, media, broadcast_type, user_id, buttons)

        text = escape_message_parts(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ `{text}`!\n",
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏.",
            version=2
        )
        await state.clear()
        await message.answer(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç user_id={user_id}: {text}, error: {e}")
        text = escape_message_parts(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {str(e)}. ",
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `YYYY-MM-DD HH:MM` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-06-15 14:30`).",
            version=2
        )
        keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
        await state.update_data(awaiting_broadcast_schedule=True, user_id=user_id)
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_SCHEDULE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}. ",
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            version=2
        )
        await state.clear()
        await message.answer(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )
        for admin_id in ADMIN_IDS:
            try:
                await send_message_with_fallback(
                    message.bot, admin_id,
                    escape_message_parts(
                        f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}: {str(e)}",
                        version=2
                    ),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e_notify:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e_notify}")

async def migrate_scheduled_broadcasts_table(conn) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–æ–ª–±–µ—Ü scheduled_time."""
    try:
        c = await conn.execute("PRAGMA table_info(scheduled_broadcasts)")
        columns = [row[1] for row in await c.fetchall()]
        if 'scheduled_time' not in columns:
            logger.info("–°—Ç–æ–ª–±–µ—Ü scheduled_time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ scheduled_broadcasts. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.")
            await conn.execute("ALTER TABLE scheduled_broadcasts RENAME TO scheduled_broadcasts_old")
            await conn.execute("""
                CREATE TABLE scheduled_broadcasts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    scheduled_time TEXT NOT NULL,
                    broadcast_data TEXT NOT NULL,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            await conn.execute("""
                INSERT INTO scheduled_broadcasts (id, broadcast_data, status, created_at)
                SELECT id, broadcast_data, status, created_at
                FROM scheduled_broadcasts_old
            """)
            await conn.execute("DROP TABLE scheduled_broadcasts_old")
            await conn.commit()
            logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            logger.debug("–°—Ç–æ–ª–±–µ—Ü scheduled_time —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ scheduled_broadcasts.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts: {e}", exc_info=True)
        raise

async def migrate_scheduled_time_format(conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ scheduled_time –≤ scheduled_broadcasts."""
    try:
        conn.row_factory = aiosqlite.Row
        c = await conn.cursor()
        await c.execute("SELECT id, scheduled_time FROM scheduled_broadcasts WHERE scheduled_time LIKE '%T%'")
        rows = await c.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(rows)}")
        for row in rows:
            try:
                if not row['scheduled_time'] or not isinstance(row['scheduled_time'], str):
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID {row['id']}: scheduled_time –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
                    continue
                old_time = datetime.fromisoformat(row['scheduled_time'].replace('Z', '+00:00'))
                new_time = old_time.strftime('%Y-%m-%d %H:%M:%S')
                logger.debug(f"–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ ID {row['id']}: {row['scheduled_time']} -> {new_time}")
                await c.execute(
                    "UPDATE scheduled_broadcasts SET scheduled_time = ? WHERE id = ?",
                    (new_time, row['id'])
                )
            except ValueError as ve:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç scheduled_time –¥–ª—è ID {row['id']}: {ve}")
                continue
        await conn.commit()
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ scheduled_time –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ scheduled_time: {e}", exc_info=True)
        raise

async def migrate_broadcast_data(conn) -> None:
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–ª–∏ –ø—É—Å—Ç—ã—Ö broadcast_data."""
    try:
        conn.row_factory = aiosqlite.Row
        c = await conn.cursor()
        await c.execute("SELECT id, broadcast_data FROM scheduled_broadcasts")
        rows = await c.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ broadcast_data: {len(rows)}")
        updated_count = 0
        for row in rows:
            broadcast_id = row['id']
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None, –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å—Ç—Ä–æ–∫—É "null"
                if row['broadcast_data'] is None or row['broadcast_data'].strip() == '' or row['broadcast_data'].lower() == 'null':
                    logger.warning(f"–ü—É—Å—Ç–æ–µ, None –∏–ª–∏ 'null' broadcast_data –¥–ª—è broadcast_id={broadcast_id}")
                    new_broadcast_data = json.dumps({
                        'message': '',
                        'media': None,
                        'broadcast_type': 'all',
                        'admin_user_id': ADMIN_IDS[0],
                        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'with_payment_button': False,
                        'buttons': []
                    }, ensure_ascii=False)
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET broadcast_data = ? WHERE id = ?",
                        (new_broadcast_data, broadcast_id)
                    )
                    updated_count += 1
                    continue
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
                broadcast_data = json.loads(row['broadcast_data'])
                if not isinstance(broadcast_data, dict):
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç broadcast_data (–Ω–µ —Å–ª–æ–≤–∞—Ä—å) –¥–ª—è broadcast_id={broadcast_id}: {row['broadcast_data']}")
                    new_broadcast_data = json.dumps({
                        'message': '',
                        'media': None,
                        'broadcast_type': 'all',
                        'admin_user_id': ADMIN_IDS[0],
                        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'with_payment_button': False,
                        'buttons': []
                    }, ensure_ascii=False)
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET broadcast_data = ? WHERE id = ?",
                        (new_broadcast_data, broadcast_id)
                    )
                    updated_count += 1
                    continue
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                required_fields = ['message', 'media', 'broadcast_type', 'admin_user_id', 'with_payment_button', 'buttons']
                updated = False
                for field in required_fields:
                    if field not in broadcast_data:
                        logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ broadcast_data –¥–ª—è broadcast_id={broadcast_id}")
                        broadcast_data[field] = '' if field == 'message' else None if field == 'media' else 'all' if field == 'broadcast_type' else ADMIN_IDS[0] if field == 'admin_user_id' else False if field == 'with_payment_button' else []
                        updated = True
                if updated:
                    new_broadcast_data = json.dumps(broadcast_data, ensure_ascii=False)
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET broadcast_data = ? WHERE id = ?",
                        (new_broadcast_data, broadcast_id)
                    )
                    updated_count += 1
            except json.JSONDecodeError as je:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ broadcast_data –¥–ª—è broadcast_id={broadcast_id}: {je}, –¥–∞–Ω–Ω—ã–µ: {row['broadcast_data']}")
                new_broadcast_data = json.dumps({
                    'message': '',
                    'media': None,
                    'broadcast_type': 'all',
                    'admin_user_id': ADMIN_IDS[0],
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'with_payment_button': False,
                    'buttons': []
                }, ensure_ascii=False)
                await c.execute(
                    "UPDATE scheduled_broadcasts SET broadcast_data = ? WHERE id = ?",
                    (new_broadcast_data, broadcast_id)
                )
                updated_count += 1
        await conn.commit()
        logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è broadcast_data –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ broadcast_data: {e}", exc_info=True)
        raise

async def migrate_broadcast_message_escaping(conn) -> None:
    """–ú–∏–≥—Ä–∞—Ü–∏—è broadcast_data –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª–µ message."""
    try:
        conn.row_factory = aiosqlite.Row
        c = await conn.cursor()
        await c.execute("SELECT id, broadcast_data FROM scheduled_broadcasts WHERE status = 'pending'")
        rows = await c.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(rows)}")
        for row in rows:
            try:
                broadcast_data = json.loads(row['broadcast_data'])
                if 'message' not in broadcast_data:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID {row['id']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ message")
                    continue
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                raw_message = unescape_markdown(broadcast_data['message'])
                broadcast_data['message'] = raw_message
                new_broadcast_data = json.dumps(broadcast_data, ensure_ascii=False)
                await c.execute(
                    "UPDATE scheduled_broadcasts SET broadcast_data = ? WHERE id = ?",
                    (new_broadcast_data, row['id'])
                )
                logger.debug(f"–û—á–∏—â–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ ID {row['id']}")
            except json.JSONDecodeError as je:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ broadcast_data –¥–ª—è ID {row['id']}: {je}")
                continue
        await conn.commit()
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ broadcast_data –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è broadcast_data: {e}", exc_info=True)
        raise

async def migrate_scheduled_timezone(conn):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç scheduled_time, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ UTC, –¥–æ–±–∞–≤–ª—è—è 3 —á–∞—Å–∞ –¥–ª—è MSK."""
    try:
        conn.row_factory = aiosqlite.Row
        c = await conn.cursor()
        await c.execute("SELECT id, scheduled_time FROM scheduled_broadcasts WHERE status = 'pending'")
        rows = await c.fetchall()
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π {len(rows)}")
        msk_tz = pytz.timezone('Europe/Moscow')
        utc_tz = pytz.timezone('UTC')
        for row in rows:
            try:
                if not row['scheduled_time'] or not isinstance(row['scheduled_time'], str):
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID {row['id']}: scheduled_time –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
                    continue
                utc_time = datetime.strptime(row['scheduled_time'], '%Y-%m-%d %H:%M:%S').replace(tzinfo=utc_tz)
                msk_time = utc_time.astimezone(msk_tz)
                new_time = msk_time.strftime('%Y-%m-%d %H:%M:%S')
                if new_time != row['scheduled_time']:
                    logger.debug(f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è ID {row['id']}: {row['scheduled_time']} -> {new_time}")
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET scheduled_time = ? WHERE id = ?",
                        (new_time, row['id'])
                    )
            except ValueError as ve:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç scheduled_time –¥–ª—è ID {row['id']}: {ve}")
                continue
        await conn.commit()
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ scheduled_time –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ scheduled_time: {e}", exc_info=True)
        raise

async def migrate_broadcast_admin_user_id(conn):
    """–î–æ–±–∞–≤–ª—è–µ—Ç admin_user_id –≤ broadcast_data –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π."""
    try:
        conn.row_factory = aiosqlite.Row
        c = await conn.cursor()
        await c.execute("SELECT id, broadcast_data FROM scheduled_broadcasts WHERE status = 'pending'")
        rows = await c.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ admin_user_id: {len(rows)}")
        for row in rows:
            try:
                broadcast_data = json.loads(row['broadcast_data'])
                if 'admin_user_id' not in broadcast_data:
                    broadcast_data['admin_user_id'] = ADMIN_IDS[0]  # Fallback –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
                    new_broadcast_data = json.dumps(broadcast_data, ensure_ascii=False)
                    await c.execute(
                        "UPDATE scheduled_broadcasts SET broadcast_data = ? WHERE id = ?",
                        (new_broadcast_data, row['id'])
                    )
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω admin_user_id –¥–ª—è –∑–∞–ø–∏—Å–∏ ID {row['id']}")
            except json.JSONDecodeError as je:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ broadcast_data –¥–ª—è ID {row['id']}: {je}")
                continue
        await conn.commit()
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è admin_user_id –≤ broadcast_data –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ admin_user_id: {e}", exc_info=True)
        raise

async def schedule_broadcast(schedule_time: datetime, message_text: str, media: Optional[Dict], broadcast_type: str, admin_user_id: int, buttons: List[Dict[str, str]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        broadcast_data = {
            'message': message_text,  # –•—Ä–∞–Ω–∏–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
            'media': media,
            'broadcast_type': broadcast_type,
            'admin_user_id': admin_user_id,
            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'with_payment_button': broadcast_type.startswith('with_payment_'),
            'buttons': buttons  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ broadcast_data –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        }
        async with aiosqlite.connect(DATABASE_PATH, timeout=15) as conn:
            await conn.execute("PRAGMA busy_timeout = 30000")
            await migrate_scheduled_broadcasts_table(conn)
            await migrate_scheduled_time_format(conn)
            await migrate_scheduled_timezone(conn)
            await migrate_broadcast_admin_user_id(conn)
            await migrate_broadcast_message_escaping(conn)
            c = await conn.cursor()
            scheduled_time_str = schedule_time.strftime('%Y-%m-%d %H:%M:%S')
            await c.execute(
                "INSERT INTO scheduled_broadcasts (scheduled_time, broadcast_data, status) VALUES (?, ?, 'pending')",
                (scheduled_time_str, json.dumps(broadcast_data, ensure_ascii=False))
            )
            broadcast_id = c.lastrowid
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É broadcast_buttons
            for button in buttons:
                success = await save_broadcast_button(broadcast_id, button['text'], button['callback_data'], conn=conn)
                if not success:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è broadcast_id={broadcast_id}: text={button['text']}. –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
                    await conn.rollback()
                    raise aiosqlite.OperationalError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è broadcast_id={broadcast_id}")
            await conn.commit()
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time_str} –¥–ª—è —Ç–∏–ø–∞ {broadcast_type} –æ—Ç admin_user_id={admin_user_id} —Å {len(buttons)} –∫–Ω–æ–ø–∫–∞–º–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        raise

async def broadcast_message_admin(bot: Bot, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None, buttons: List[Dict[str, str]] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    buttons = buttons or []
    all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
    target_users = [user[0] for user in all_users_data]
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~`{total_to_send}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å MarkdownV2
                if media_type == 'photo' and media_id:
                    await bot.send_photo(
                        chat_id=target_user_id, photo=media_id,
                        caption=message_text, parse_mode=ParseMode.MARKDOWN_V2,
                        reply_markup=reply_markup
                    )
                elif media_type == 'video' and media_id:
                    await bot.send_video(
                        chat_id=target_user_id, video=media_id,
                        caption=message_text, parse_mode=ParseMode.MARKDOWN_V2,
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_message(
                        chat_id=target_user_id, text=message_text, parse_mode=ParseMode.MARKDOWN_V2,
                        reply_markup=reply_markup
                    )
            except TelegramBadRequest as e:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown
                logger.warning(f"–û—à–∏–±–∫–∞ Markdown –¥–ª—è user_id={target_user_id}: {e}. –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
                raw_text = unescape_markdown(message_text)
                if media_type == 'photo' and media_id:
                    await bot.send_photo(
                        chat_id=target_user_id, photo=media_id,
                        caption=raw_text, parse_mode=None,
                        reply_markup=reply_markup
                    )
                elif media_type == 'video' and media_id:
                    await bot.send_video(
                        chat_id=target_user_id, video=media_id,
                        caption=raw_text, parse_mode=None,
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_message(
                        chat_id=target_user_id, text=raw_text, parse_mode=None,
                        reply_markup=reply_markup
                    )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text, reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_to_paid_users(bot: Bot, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None, buttons: List[Dict[str, str]] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    buttons = buttons or []
    target_users = await get_paid_users()
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~`{total_to_send}` –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    signature = "üç™ PixelPie"
    caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
    escaped_caption = escape_message_parts(caption, version=2)
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id, text=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text, reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_to_non_paid_users(bot: Bot, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None, buttons: List[Dict[str, str]] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    buttons = buttons or []
    target_users = await get_non_paid_users()
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~`{total_to_send}` –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    signature = "üç™ PixelPie"
    caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
    escaped_caption = escape_message_parts(caption, version=2)
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id, text=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text, reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_with_payment(
    bot: Bot,
    message_text: str,
    admin_user_id: int,
    media_type: Optional[str] = None,
    media_id: Optional[str] = None,
    buttons: List[Dict[str, str]] = None
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞—Ä–∏—Ñ–∞–º."""
    buttons = buttons or []
    all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
    target_users = [user[0] for user in all_users_data]
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–ø–ª–∞—Ç–æ–π –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ–ø–ª–∞—Ç–æ–π –¥–ª—è ~`{total_to_send}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    signature = "üç™ PixelPie"
    caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
    escaped_caption = escape_message_parts(caption, version=2)
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id, text=escaped_caption,
                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup
                )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text,
        reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def handle_broadcast_schedule_input(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"handle_broadcast_schedule_input: user_id={user_id}, callback_data={query.data}")

    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    user_data = await state.get_data()
    try:
        if query.data == "broadcast_send_now":
            broadcast_type = user_data.get('broadcast_type', '')
            message_text = user_data.get('broadcast_message', '')
            media = user_data.get('broadcast_media', None)
            buttons = user_data.get('buttons', [])
            media_type = media.get('type') if media else None
            media_id = media.get('file_id') if media else None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if broadcast_type == 'all':
                all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
                target_users = [user[0] for user in all_users_data]
            elif broadcast_type == 'paid':
                target_users = await get_paid_users()
            elif broadcast_type == 'non_paid':
                target_users = await get_non_paid_users()
            elif broadcast_type.startswith('with_payment_'):
                audience_type = broadcast_type.replace('with_payment_', '')
                if audience_type == 'all':
                    all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
                    target_users = [user[0] for user in all_users_data]
                elif audience_type == 'paid':
                    target_users = await get_paid_users()
                elif audience_type == 'non_paid':
                    target_users = await get_non_paid_users()
                else:
                    text = escape_message_parts(
                        f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: `{audience_type}`.",
                        version=2
                    )
                    await query.message.answer(
                        text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
                    )
                    await state.clear()
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience_type} –¥–ª—è user_id={user_id}")
                    return
            else:
                text = escape_message_parts(
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: `{broadcast_type}`.",
                    version=2
                )
                await query.message.answer(
                    text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.clear()
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_type} –¥–ª—è user_id={user_id}")
                return

            if not target_users:
                text = escape_message_parts(
                    f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–∏–ø: `{broadcast_type}`).",
                    version=2
                )
                await query.message.answer(
                    text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.clear()
                logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ {broadcast_type} –¥–ª—è user_id={user_id}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è
            signature = "üç™ PixelPie"
            caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
            escaped_caption = escape_message_parts(caption, version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            await query.message.edit_text(
                escape_message_parts("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            success_count = 0
            error_count = 0
            for target_user_id in target_users:
                try:
                    reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
                    if media_type == 'photo' and media_id:
                        await query.bot.send_photo(
                            chat_id=target_user_id, photo=media_id,
                            caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                            reply_markup=reply_markup
                        )
                    elif media_type == 'video' and media_id:
                        await query.bot.send_video(
                            chat_id=target_user_id, video=media_id,
                            caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                            reply_markup=reply_markup
                        )
                    else:
                        await query.bot.send_message(
                            chat_id=target_user_id, text=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                            reply_markup=reply_markup
                        )
                    success_count += 1
                    if success_count % 20 == 0:
                        await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                    error_count += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = escape_message_parts(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n",
                f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{success_count}`\n",
                f"‚ùå –û—à–∏–±–æ–∫: `{error_count}`\n",
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: `{len(target_users)}`",
                version=2
            )
            await state.clear()
            await query.message.edit_text(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è user_id={user_id}, "
                        f"—Ç–∏–ø={broadcast_type}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ={success_count}, –æ—à–∏–±–æ–∫={error_count}")

        elif query.data == "broadcast_schedule":
            await state.update_data(awaiting_broadcast_schedule=True, user_id=user_id)
            text = escape_message_parts(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n",
                "üìÖ –§–æ—Ä–º–∞—Ç: `YYYY-MM-DD HH:MM`\n",
                "–ü—Ä–∏–º–µ—Ä: `2025-06-15 14:30`\n\n",
                "–í—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ MSK.",
                version=2
            )
            keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
            await query.message.edit_text(
                text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(BotStates.AWAITING_BROADCAST_SCHEDULE)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}")

        elif query.data == "cancel_broadcast":
            await state.clear()
            text = escape_message_parts(
                "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                version=2
            )
            await query.message.edit_text(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è user_id={user_id}")

        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data –≤ handle_broadcast_schedule: {query.data} –¥–ª—è user_id={user_id}")
            await state.clear()
            await query.message.answer(
                escape_message_parts("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", version=2),
                reply_markup=await create_admin_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_broadcast_schedule_input –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await query.message.answer(
            escape_message_parts(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @AXIDI_Help",
                version=2
            ),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def list_scheduled_broadcasts(message: Message | CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏."""
    user_id = message.from_user.id if isinstance(message, Message) else message.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        if isinstance(message, Message):
            await message.answer(
                escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await message.message.answer(
                escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
            )
        return

    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute('''
                SELECT id, scheduled_time, status, broadcast_data
                FROM scheduled_broadcasts
                WHERE status = 'pending'
                ORDER BY scheduled_time ASC
            ''')
            broadcasts = await c.fetchall()

        if not broadcasts:
            text = escape_message_parts("üì¢ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
            reply_markup = await create_admin_keyboard()
            if isinstance(message, Message):
                await message.answer(
                    text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await message.message.answer(
                    text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
                )
            await state.clear()
            return

        await state.update_data(broadcasts=[
            {
                'id': row['id'],
                'scheduled_time': row['scheduled_time'],
                'status': row['status'],
                'broadcast_data': json.loads(row['broadcast_data'])
            } for row in broadcasts
        ])

        text = escape_message_parts("üì¢ –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n")
        keyboard = []
        for idx, broadcast in enumerate((await state.get_data()).get('broadcasts', []), 1):
            broadcast_data = broadcast['broadcast_data']
            message_preview = broadcast_data.get('message', '')[:50] + ('...' if len(broadcast_data.get('message', '')) > 50 else '')
            media_type = broadcast_data.get('media', {}).get('type', '–ù–µ—Ç')
            target_group = broadcast_data.get('broadcast_type', 'all')
            text += escape_md(
                f"`{idx}`. ID: `{broadcast['id']}`\n"
                f"‚è∞ –í—Ä–µ–º—è: `{broadcast['scheduled_time']}` MSK\n"
                f"üë• –ì—Ä—É–ø–ø–∞: `{target_group}`\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{message_preview}`\n"
                f"üì∏ –ú–µ–¥–∏–∞: `{media_type}`\n\n"
            )
            keyboard.append([
                InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å #{broadcast['id']}", callback_data=f"delete_broadcast_{broadcast['id']}")
            ])

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await state.update_data(awaiting_broadcast_manage_action=True)
        if isinstance(message, Message):
            await message.answer(
                text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await message.message.answer(
                text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )
        await state.set_state(BotStates.AWAITING_BROADCAST_MANAGE_ACTION)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫: {str(e)}.")
        if isinstance(message, Message):
            await message.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await message.message.answer(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
        await state.clear()

async def handle_broadcast_manage_action(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏."""
    await query.answer()
    user_id = query.from_user.id

    user_data = await state.get_data()
    if not user_data.get('awaiting_broadcast_manage_action'):
        logger.warning(f"handle_broadcast_manage_action invoked without awaiting_broadcast_manage_action for user_id={user_id}, callback_data={query.data}")
        await state.clear()
        text = escape_message_parts("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", version=2)
        await query.message.edit_text(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if query.data.startswith("delete_broadcast_"):
        broadcast_id = int(query.data.replace("delete_broadcast_", ""))
        broadcasts = user_data.get('broadcasts', [])
        broadcast = next((b for b in broadcasts if b['id'] == broadcast_id), None)

        if not broadcast:
            text = escape_message_parts(
                f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ ID `{broadcast_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                version=2
            )
            await query.message.edit_text(
                text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            return

        await state.update_data(delete_broadcast_id=broadcast_id, awaiting_broadcast_delete_confirm=True, user_id=user_id)

        # –û—á–∏—â–∞–µ–º message –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        raw_message = unescape_markdown(broadcast['broadcast_data'].get('message', ''))
        message_preview = raw_message[:50] + ('...' if len(raw_message) > 50 else '')
        text = escape_message_parts(
            f"üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ ID `{broadcast_id}`\n",
            f"‚è∞ –í—Ä–µ–º—è: `{broadcast['scheduled_time']}` MSK\n",
            f"üë• –ì—Ä—É–ø–ø–∞: `{broadcast['broadcast_data'].get('broadcast_type', 'all')}`\n",
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{message_preview}`",
            version=2
        )
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{broadcast_id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_broadcasts")]
        ]
        await query.message.edit_text(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_DELETE_CONFIRM)

    elif query.data == "admin_panel":
        await state.clear()
        text = escape_message_parts("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", version=2)
        await query.message.edit_text(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_broadcast_delete_confirm(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await query.answer()
    user_id = query.from_user.id

    user_data = await state.get_data()
    if not user_data.get('awaiting_broadcast_delete_confirm'):
        logger.warning(f"handle_broadcast_delete_confirm invoked without awaiting_broadcast_delete_confirm for user_id={user_id}")
        await state.clear()
        text = escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.", version=2)
        await query.message.edit_text(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    broadcast_id = user_data.get('delete_broadcast_id')
    if not broadcast_id:
        logger.warning(f"handle_broadcast_delete_confirm: broadcast_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user_id}")
        await state.clear()
        text = escape_message_parts("‚ùå –û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.", version=2)
        await query.message.edit_text(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if query.data == f"confirm_delete_{broadcast_id}":
        try:
            async with aiosqlite.connect(DATABASE_PATH) as conn:
                c = await conn.cursor()
                await c.execute("DELETE FROM scheduled_broadcasts WHERE id = ?", (broadcast_id,))
                await conn.commit()
                if c.rowcount > 0:
                    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ ID {broadcast_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                    text = escape_message_parts(
                        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ID `{broadcast_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                        version=2
                    )
                else:
                    logger.warning(f"–†–∞—Å—Å—ã–ª–∫–∞ ID {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                    text = escape_message_parts(
                        f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ ID `{broadcast_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        version=2
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {broadcast_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}", exc_info=True)
            text = escape_message_parts(
                f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID `{broadcast_id}`: {str(e)}.",
                version=2
            )

        await state.clear()
        await query.message.edit_text(
            text, reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

    elif query.data == "list_broadcasts":
        await state.update_data(awaiting_broadcast_delete_confirm=None, delete_broadcast_id=None, user_id=user_id)
        await list_scheduled_broadcasts(query, state)

async def cancel_broadcast(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = message.from_user.id
    logger.debug(f"–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}")
    await state.clear()
    await message.answer(
        escape_message_parts("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", version=2),
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    await state.clear()
    text = escape_message_parts("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", version=2)
    reply_markup = await create_admin_keyboard() if user_id in ADMIN_IDS else await create_main_menu_keyboard(user_id)
    await message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@broadcast_router.callback_query(
    lambda c: c.data and (
        c.data.startswith(("broadcast_", "delete_broadcast_", "confirm_delete_", "broadcast_with_payment_", "copy_buttons_")) or
        c.data in ["broadcast_no_media", "broadcast_send_now", "broadcast_schedule", "list_broadcasts", "broadcast_no_buttons", "cancel_broadcast"] or
        c.data.startswith("broadcast_buttons_")
    ) and not c.data.startswith(("delete_user_", "confirm_delete_user_"))
)
async def broadcast_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫."""
    callback_data = query.data
    logger.debug(f"broadcast_callback_handler: user_id={query.from_user.id}, callback_data={callback_data}")
    try:
        if callback_data.startswith("delete_broadcast_"):
            await handle_broadcast_manage_action(query, state)
        elif callback_data.startswith("confirm_delete_"):
            await handle_broadcast_delete_confirm(query, state)
        elif callback_data.startswith("copy_buttons_"):
            await handle_broadcast_buttons_count(query, state)
        elif callback_data == "list_broadcasts":
            await list_scheduled_broadcasts(query, state)
        elif callback_data == "broadcast_no_media":
            await handle_broadcast_media(query, state)
        elif callback_data in ["broadcast_send_now", "broadcast_schedule", "cancel_broadcast"]:
            await handle_broadcast_schedule_input(query, state)
        elif callback_data.startswith("broadcast_with_payment_"):
            await handle_broadcast_audience_selection(query, state)
        elif callback_data.startswith("broadcast_buttons_") or callback_data == "broadcast_no_buttons":
            await handle_broadcast_buttons_count(query, state)
        elif callback_data.startswith("broadcast_"):
            await initiate_broadcast(query, state)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data –≤ broadcast_callback_handler: {callback_data} –¥–ª—è user_id={query.from_user.id}")
            await query.message.answer(
                escape_message_parts("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", version=2),
                reply_markup=await create_admin_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast_callback_handler: {e}", exc_info=True)
        await query.message.answer(
            escape_message_parts(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @AXIDI_Help",
                version=2
            ),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
