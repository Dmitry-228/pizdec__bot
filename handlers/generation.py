# generation/generation.py

import asyncio
import logging
from typing import Optional, List, Dict, Tuple
from aiogram import Router, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from database import check_database_user, get_active_trainedmodel, update_user_credits
from config import ADMIN_IDS
from handlers.utils import (
    safe_escape_markdown as escape_md, send_message_with_fallback, check_resources, clean_admin_context
)
from keyboards import (
    create_admin_keyboard, create_main_menu_keyboard, create_avatar_style_choice_keyboard,
    create_new_male_avatar_styles_keyboard, create_new_female_avatar_styles_keyboard,
    create_aspect_ratio_keyboard, create_rating_keyboard
)
from generation.images import generate_image, process_prompt_async, prepare_model_params
from generation.utils import reset_generation_context

from logger import get_logger
logger = get_logger('generation')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
generation_router = Router()

async def generate_photo_for_user(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:

    admin_id = query.from_user.id
    bot_id = (await query.bot.get_me()).id
    logger.debug(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={admin_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ target_user_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ID –±–æ—Ç–∞
    if target_user_id == bot_id:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π target_user_id: {target_user_id} (ID –±–æ—Ç–∞)")
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{target_user_id}`.", version=2),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_model_data = await get_active_trainedmodel(target_user_id)
    if not active_model_data or active_model_data[3] != 'success':
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.", version=2),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await clean_admin_context(state)
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è user_id={target_user_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.update_data(
        admin_generation_for_user=target_user_id,
        generation_type='with_avatar',
        model_key='flux-trained',
        active_model_version=active_model_data[0],  # model_version
        active_trigger_word=active_model_data[1],   # trigger_word
        active_avatar_name=active_model_data[2],    # avatar_name
        old_model_id=active_model_data[4],         # model_id
        old_model_version=active_model_data[0],    # model_version
        is_admin_generation=True,
        message_recipient=admin_id,
        generation_target_user=target_user_id,
        original_admin_user=admin_id
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)
    text = escape_md(
        f"üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", version=2
    )
    await send_message_with_fallback(
        query.bot, admin_id, text,
        reply_markup=await create_avatar_style_choice_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await query.answer()

async def handle_admin_style_selection(query: CallbackQuery, state: FSMContext) -> None:

    admin_id = query.from_user.id
    if admin_id not in ADMIN_IDS:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    callback_data = query.data
    user_data = await state.get_data()
    target_user_id = user_data.get('admin_generation_for_user')

    if not target_user_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
        await query.message.edit_text(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", version=2),
            reply_markup=await create_admin_keyboard(admin_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π
    if callback_data == "select_new_male_avatar_styles":
        await state.update_data(selected_gender="male")
        await query.message.edit_text(
            escape_md(f"üë® –í—ã–±–µ—Ä–∏—Ç–µ –º—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`:", version=2),
            reply_markup=await create_new_male_avatar_styles_keyboard(page=1),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif callback_data == "select_new_female_avatar_styles":
        await state.update_data(selected_gender="female")
        await query.message.edit_text(
            escape_md(f"üë© –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`:", version=2),
            reply_markup=await create_new_female_avatar_styles_keyboard(page=1),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif callback_data.startswith("style_new_male_") or callback_data.startswith("style_new_female_"):
        style_key = callback_data.replace("style_new_male_", "").replace("style_new_female_", "")
        await state.update_data(style_key=style_key, prompt=style_key, style_name=NEW_MALE_AVATAR_STYLES.get(style_key, NEW_FEMALE_AVATAR_STYLES.get(style_key, style_key)))
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        await query.message.edit_text(
            escape_md(f"üìê –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", version=2),
            reply_markup=await create_aspect_ratio_keyboard(back_callback="generate_with_avatar"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif callback_data.startswith("male_styles_page_") or callback_data.startswith("female_styles_page_"):
        page = int(callback_data.split("_")[-1])
        if callback_data.startswith("male_styles_page_"):
            reply_markup = await create_new_male_avatar_styles_keyboard(page=page)
            text = escape_md(f"üë® –í—ã–±–µ—Ä–∏—Ç–µ –º—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`:", version=2)
        else:
            reply_markup = await create_new_female_avatar_styles_keyboard(page=page)
            text = escape_md(f"üë© –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`:", version=2)
        await query.message.edit_text(
            text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
    elif callback_data == "enter_custom_prompt_manual":
        await query.message.edit_text(
            escape_md(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ `{user_data.get('active_trigger_word', '')}` –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(awaiting_admin_prompt=True, admin_generation_style='custom', came_from_custom_prompt=True)
    elif callback_data == "enter_custom_prompt_llama":
        await query.message.edit_text(
            escape_md(f"ü§ñ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞:\n\n–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ `{user_data.get('active_trigger_word', '')}` –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(awaiting_admin_prompt=True, admin_generation_style='custom', use_llama_prompt=True)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –≤ handle_admin_style_selection: {callback_data}")
        await query.message.edit_text(
            escape_md("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
            reply_markup=await create_admin_keyboard(admin_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await query.answer()

async def handle_admin_custom_prompt(message: Message, state: FSMContext) -> None:

    user_data = await state.get_data()
    if not user_data.get('awaiting_admin_prompt'):
        return

    admin_id = message.from_user.id
    if admin_id not in ADMIN_IDS:
        return

    target_user_id = user_data.get('admin_generation_for_user')
    if not target_user_id:
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", version=2),
            reply_markup=await create_admin_keyboard(admin_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    custom_prompt = message.text.strip()
    if not custom_prompt:
        await message.answer(
            escape_md("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    status_message = await message.answer(
        escape_md("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–æ–º–ø—Ç...", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    if user_data.get('use_llama_prompt', False):
        try:
            from llama_helper import generate_assisted_prompt
            processed_prompt = await generate_assisted_prompt(custom_prompt)
            await state.update_data(prompt=processed_prompt, user_input_for_llama=custom_prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ LLaMA –¥–ª—è user_id={admin_id}: {e}", exc_info=True)
            await status_message.edit_text(
                escape_md("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        processed_prompt = await process_prompt_async(
            custom_prompt,
            user_data.get('model_key', 'flux-trained'),
            user_data.get('generation_type', 'with_avatar'),
            user_data.get('active_trigger_word'),
            user_data.get('selected_gender'),
            custom_prompt,
            user_data,
            use_new_flux=user_data.get('model_key') == 'flux-trained'
        )
        await state.update_data(prompt=processed_prompt)

    await state.update_data(awaiting_admin_prompt=False, admin_generation_style='custom')

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    await status_message.edit_text(
        escape_md(f"üìê –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", version=2),
        reply_markup=await create_aspect_ratio_keyboard(back_callback="generate_with_avatar"),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_admin_aspect_ratio_selection(query: CallbackQuery, state: FSMContext) -> None:

    admin_id = query.from_user.id
    if admin_id not in ADMIN_IDS:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    callback_data = query.data
    if not callback_data.startswith("aspect_"):
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω.", show_alert=True)
        return

    aspect_ratio = callback_data.replace("aspect_", "")
    await state.update_data(aspect_ratio=aspect_ratio)

    user_data = await state.get_data()
    target_user_id = user_data.get('admin_generation_for_user')
    if not target_user_id:
        await query.message.edit_text(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", version=2),
            reply_markup=await create_admin_keyboard(admin_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    active_model_data = await get_active_trainedmodel(target_user_id)
    if not active_model_data or active_model_data[3] != 'success':
        await query.message.edit_text(
            escape_md(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    await state.update_data(
        is_admin_generation=True,
        admin_generation_for_user=target_user_id,
        message_recipient=admin_id,
        generation_target_user=target_user_id,
        original_admin_user=admin_id
    )

    await query.message.edit_text(
        escape_md("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    try:
        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await generate_image(query.message, state, num_outputs=2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è admin_id={admin_id}: {e}", exc_info=True)
        await query.message.edit_text(
            escape_md(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}.", version=2),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await reset_generation_context(state, user_data.get('generation_type'))

async def handle_admin_generation_result(state: FSMContext, admin_id: int, target_user_id: int, result_data: Dict, bot: Bot) -> None:

    try:
        user_data = await state.get_data()
        generation_type = user_data.get('generation_type', 'with_avatar')
        model_key = user_data.get('model_key', 'flux-trained')

        if result_data.get('success') and result_data.get('image_urls'):
            caption = escape_md(
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{target_user_id}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üë§ –ê–≤–∞—Ç–∞—Ä: {user_data.get('active_avatar_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üé® –°—Ç–∏–ª—å: {result_data.get('style', user_data.get('style_key', 'custom'))}\n"
                f"üìù –ü—Ä–æ–º–ø—Ç: {result_data.get('prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')[:100]}...", version=2
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ï—â–µ —Ä–∞–∑", callback_data=f"admin_generate:{target_user_id}")],
                [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_send_gen:{target_user_id}")],
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ])

            await bot.send_photo(
                chat_id=admin_id,
                photo=result_data['image_urls'][0],
                caption=caption,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard
            )

            await state.update_data(**{f'last_admin_generation_{target_user_id}': {
                'image_urls': result_data.get('image_urls'),
                'prompt': result_data.get('prompt'),
                'style': result_data.get('style', user_data.get('style_key', 'custom'))
            }})
        else:
            error_msg = result_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.clear()
            await send_message_with_fallback(
                bot, admin_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}.", version=2),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await reset_generation_context(state, generation_type)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        text = escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}.", version=2)
        await state.clear()
        await send_message_with_fallback(
            bot, admin_id, text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await reset_generation_context(state, generation_type)

async def process_image_generation(
    bot: Bot,
    state: FSMContext,
    user_id: int,
    image_paths: List[str],
    duration: float,
    aspect_ratio: str,
    generation_type: str,
    model_key: str,
    admin_user_id: Optional[int] = None
) -> None:
    from keyboards import create_rating_keyboard, create_admin_user_actions_keyboard
    from generation.utils import send_message_with_fallback, send_media_group_with_retry, cleanup_files
    from aiogram.types import InputMediaPhoto, FSInputFile

    logger.info(f"–ù–∞—á–∞–ª–æ process_image_generation: user_id={user_id}, admin_user_id={admin_user_id}, generation_type={generation_type}")

    try:
        user_data = await state.get_data()
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_data}")

        is_admin_generation = user_data.get('is_admin_generation', False) or (admin_user_id and user_id != admin_user_id)
        style_name = user_data.get('style_name', '–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å')
        active_avatar_name = user_data.get('active_avatar_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if admin_user_id and user_id != admin_user_id:
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: user_id={user_id}, admin_user_id={admin_user_id}")
            is_admin_generation = True
            await state.update_data(
                is_admin_generation=True,
                admin_generation_for_user=user_id,
                message_recipient=admin_user_id,
                generation_target_user=user_id,
                original_admin_user=admin_user_id
            )

        logger.debug(f"is_admin_generation={is_admin_generation}, admin_user_id={admin_user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not image_paths:
            logger.error(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ image_paths –¥–ª—è user_id={user_id}")
            await send_message_with_fallback(
                bot, user_id,
                escape_md("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            if is_admin_generation and admin_user_id and admin_user_id != user_id:
                await send_message_with_fallback(
                    bot, admin_user_id,
                    escape_md(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`.", version=2),
                    reply_markup=await create_admin_user_actions_keyboard(user_id, False),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        caption = escape_md(
            f"üì∏ {len(image_paths)} –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ–∑–¥–∞–Ω—ã! ({duration:.1f} —Å–µ–∫)\n"
            f"üé® –°—Ç–∏–ª—å: {style_name}\n"
            f"üë§ –ê–≤–∞—Ç–∞—Ä: {active_avatar_name}\n"
            f"‚ö° –°–¥–µ–ª–∞–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ PixelPie_AI", version=2
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}")
        try:
            if len(image_paths) == 1:
                photo_file = FSInputFile(path=image_paths[0])
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo_file,
                    caption=caption,
                    reply_markup=await create_rating_keyboard(generation_type, model_key, user_id, bot),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                media = []
                for i, path in enumerate(image_paths):
                    photo_file = FSInputFile(path=path)
                    if i == 0:
                        media.append(InputMediaPhoto(media=photo_file, caption=caption, parse_mode=ParseMode.MARKDOWN_V2))
                    else:
                        media.append(InputMediaPhoto(media=photo_file))
                await send_media_group_with_retry(bot, user_id, media)
                await send_message_with_fallback(
                    bot, user_id,
                    escape_md("‚≠ê –û—Ü–µ–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", version=2),
                    reply_markup=await create_rating_keyboard(generation_type, model_key, user_id, bot),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}: {e}", exc_info=True)
            await send_message_with_fallback(
                bot, user_id,
                escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            if is_admin_generation and admin_user_id and admin_user_id != user_id:
                await send_message_with_fallback(
                    bot, admin_user_id,
                    escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{user_id}`.", version=2),
                    reply_markup=await create_admin_user_actions_keyboard(user_id, False),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if is_admin_generation and admin_user_id and admin_user_id != user_id:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É admin_user_id={admin_user_id} –¥–ª—è user_id={user_id}")
            try:
                admin_notification = escape_md(
                    f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{user_id}`.\n\n"
                    f"üé® –°—Ç–∏–ª—å: {style_name}\n"
                    f"üë§ –ê–≤–∞—Ç–∞—Ä: {active_avatar_name}", version=2
                )
                await send_message_with_fallback(
                    bot, admin_user_id,
                    admin_notification,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]
                    ]),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É admin_user_id={admin_user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É admin_user_id={admin_user_id}: {e}", exc_info=True)
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await state.update_data(
            last_generation_params={
                'prompt': user_data.get('prompt'),
                'aspect_ratio': aspect_ratio,
                'generation_type': generation_type,
                'model_key': model_key,
                'style_name': style_name,
                'selected_gender': user_data.get('selected_gender'),
                'user_input_for_llama': user_data.get('user_input_for_llama'),
                'current_style_set': user_data.get('current_style_set'),
                'came_from_custom_prompt': user_data.get('came_from_custom_prompt', False),
                'use_llama_prompt': user_data.get('use_llama_prompt', False)
            },
            **{f'last_admin_generation_{user_id}': {
                'prompt': user_data.get('prompt'),
                'aspect_ratio': aspect_ratio,
                'generation_type': generation_type,
                'model_key': model_key,
                'style': style_name,
                'image_urls': user_data.get(f'last_admin_generation_{user_id}', {}).get('image_urls', []),
                'selected_gender': user_data.get('selected_gender'),
                'user_input_for_llama': user_data.get('user_input_for_llama'),
                'duration': duration
            }} if is_admin_generation else {}
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        asyncio.create_task(cleanup_files(image_paths))
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è user_id={user_id}, state={user_data.get('state')}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_image_generation –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        if is_admin_generation and admin_user_id and admin_user_id != user_id:
            await send_message_with_fallback(
                bot, admin_user_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{user_id}`.", version=2),
                reply_markup=await create_admin_user_actions_keyboard(user_id, False),
                parse_mode=ParseMode.MARKDOWN_V2
            )

async def cancel(message: Message, state: FSMContext) -> None:

    user_id = message.from_user.id
    await state.clear()
    text = escape_md("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", version=2)
    reply_markup = await create_admin_keyboard() if user_id in ADMIN_IDS else await create_main_menu_keyboard(user_id)
    await message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@generation_router.callback_query(
    lambda c: c.data and c.data.startswith((
        "admin_generate:", "admin_send_gen:", "select_new_male_avatar_styles",
        "select_new_female_avatar_styles", "style_new_male_", "style_new_female_",
        "male_styles_page_", "female_styles_page_", "enter_custom_prompt_manual",
        "enter_custom_prompt_llama", "aspect_"
    ))
)
async def generation_callback_handler(query: CallbackQuery, state: FSMContext) -> None:

    callback_data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data} –æ—Ç user_id={query.from_user.id}")
    try:
        if callback_data.startswith("admin_generate:"):
            target_user_id = int(callback_data.split(':')[1])
            await generate_photo_for_user(query, state, target_user_id)
        elif callback_data.startswith("admin_send_gen:"):
            target_user_id = int(callback_data.split(':')[1])
            user_data = await state.get_data()
            last_gen_data = user_data.get(f'last_admin_generation_{target_user_id}', {})
            if not last_gen_data or not last_gen_data.get('image_urls'):
                logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è target_user_id={target_user_id}")
                await query.message.edit_text(
                    escape_md(f"‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.", version=2),
                    reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await query.answer()
                return
            image_paths = user_data.get('last_admin_image_paths', [])
            if not image_paths:
                logger.error(f"–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è target_user_id={target_user_id}")
                await query.message.edit_text(
                    escape_md(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.", version=2),
                    reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await query.answer()
                return
            await process_image_generation(
                bot=query.bot,
                state=state,
                user_id=target_user_id,
                image_paths=image_paths,
                duration=0.0,  # Duration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.0
                aspect_ratio=user_data.get('last_admin_generation', {}).get('aspect_ratio', '1:1'),
                generation_type=user_data.get('last_admin_generation', {}).get('generation_type', 'with_avatar'),
                model_key=user_data.get('last_admin_generation', {}).get('model_key', 'flux-trained'),
                admin_user_id=query.from_user.id
            )
            await query.answer()
        elif callback_data.startswith(("select_new_male_avatar_styles", "select_new_female_avatar_styles",
                                       "style_new_male_", "style_new_female_", "male_styles_page_",
                                       "female_styles_page_", "enter_custom_prompt_manual",
                                       "enter_custom_prompt_llama")):
            await handle_admin_style_selection(query, state)
        elif callback_data.startswith("aspect_"):
            await handle_admin_aspect_ratio_selection(query, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generation_callback_handler: {e}", exc_info=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", version=2),
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

@generation_router.message(lambda m: m.text and not m.text.startswith('/'))
async def handle_admin_prompt_message(message: Message, state: FSMContext) -> None:

    user_data = await state.get_data()
    if user_data.get('awaiting_admin_prompt'):
        await handle_admin_custom_prompt(message, state)
