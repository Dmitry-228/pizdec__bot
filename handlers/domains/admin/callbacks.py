"""
Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞.
"""

import logging
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from keyboards import create_admin_menu_keyboard, create_main_menu_keyboard
from states import BotStates
from ..common.base import BaseCallbackHandler
from ..common.decorators import log_handler_call, admin_required
from ..common.types import CallbackResult
from .services import AdminService, FeedbackService, SystemService

logger = logging.getLogger(__name__)


class AdminMenuCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.admin_service = AdminService()
    
    @log_handler_call
    @admin_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.admin_service.get_admin_stats()
            
            text = await self._format_admin_menu_text(stats)
            keyboard = create_admin_menu_keyboard()
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result(
                message="–ê–¥–º–∏–Ω –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ",
                answer_text="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω –º–µ–Ω—é: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
    
    async def _format_admin_menu_text(self, stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω –º–µ–Ω—é."""
        users_stats = stats.get('users', {})
        payments_stats = stats.get('payments', {})
        generations_stats = stats.get('generations', {})
        
        text_parts = [
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**",
            "",
            "üìä **–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats.get('total_users', 0)}",
            f"üìà –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {users_stats.get('new_today', 0)}",
            f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π —Å–µ–≥–æ–¥–Ω—è: {payments_stats.get('payments_today', 0)}",
            f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {generations_stats.get('generations_today', 0)}",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ]
        
        return "\n".join(text_parts)


class StatsCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.admin_service = AdminService()
    
    @log_handler_call
    @admin_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        try:
            stats = await self.admin_service.get_admin_stats()
            
            text = await self._format_detailed_stats(stats)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
            ])
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _format_detailed_stats(self, stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        users = stats.get('users', {})
        payments = stats.get('payments', {})
        generations = stats.get('generations', {})
        avatars = stats.get('avatars', {})
        system = stats.get('system', {})
        
        text_parts = [
            "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**",
            "",
            "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**",
            f"‚Ä¢ –í—Å–µ–≥–æ: {users.get('total_users', 0)}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {users.get('new_today', 0)}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users.get('new_week', 0)}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {users.get('new_month', 0)}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {users.get('active_today', 0)}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users.get('active_week', 0)}",
            f"‚Ä¢ –° email: {users.get('with_email', 0)}",
            "",
            "üí∞ **–ü–ª–∞—Ç–µ–∂–∏:**",
            f"‚Ä¢ –í—Å–µ–≥–æ: {payments.get('total_payments', 0)}",
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {payments.get('payments_today', 0)}",
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {payments.get('payments_week', 0)}",
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {payments.get('payments_month', 0)}",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ –≤—Å–µ–≥–æ: {payments.get('total_revenue', 0):.2f} RUB",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: {payments.get('revenue_today', 0):.2f} RUB",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {payments.get('avg_payment', 0):.2f} RUB",
            "",
            "üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**",
            f"‚Ä¢ –í—Å–µ–≥–æ: {generations.get('total_generations', 0)}",
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {generations.get('generations_today', 0)}",
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {generations.get('successful', 0)}",
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {generations.get('failed', 0)}",
            f"‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {generations.get('processing', 0)}",
            "",
            "üé≠ **–ê–≤–∞—Ç–∞—Ä—ã:**",
            f"‚Ä¢ –í—Å–µ–≥–æ: {avatars.get('total_avatars', 0)}",
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {avatars.get('avatars_today', 0)}",
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {avatars.get('successful', 0)}",
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {avatars.get('failed', 0)}",
            f"‚Ä¢ –í –æ–±—É—á–µ–Ω–∏–∏: {avatars.get('training', 0)}"
        ]
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        feedback_stats = system.get('feedback', {})
        if feedback_stats:
            text_parts.extend([
                "",
                "üìù **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:**",
                f"‚Ä¢ –í—Å–µ–≥–æ: {feedback_stats.get('total_feedback', 0)}",
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {feedback_stats.get('feedback_today', 0)}",
                f"‚Ä¢ –†–µ—à–µ–Ω–æ: {feedback_stats.get('resolved_feedback', 0)}"
            ])
        
        return "\n".join(text_parts)


class UsersManagementCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.admin_service = AdminService()
    
    @log_handler_call
    @admin_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        callback_data = query.data
        
        if callback_data == "users_list":
            return await self._show_users_list(query, state)
        elif callback_data == "search_user":
            return await self._request_user_search(query, state)
        elif callback_data.startswith("user_details_"):
            user_id = int(callback_data.replace("user_details_", ""))
            return await self._show_user_details(query, user_id)
        elif callback_data.startswith("ban_user_"):
            user_id = int(callback_data.replace("ban_user_", ""))
            return await self._confirm_ban_user(query, user_id)
        elif callback_data.startswith("unban_user_"):
            user_id = int(callback_data.replace("unban_user_", ""))
            return await self._unban_user(query, user_id)
        elif callback_data.startswith("make_admin_"):
            user_id = int(callback_data.replace("make_admin_", ""))
            return await self._make_admin(query, user_id)
        elif callback_data.startswith("remove_admin_"):
            user_id = int(callback_data.replace("remove_admin_", ""))
            return await self._remove_admin(query, user_id)
        elif callback_data.startswith("add_resources_"):
            user_id = int(callback_data.replace("add_resources_", ""))
            return await self._request_add_resources(query, state, user_id)
        else:
            return CallbackResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    async def _show_users_list(self, query: CallbackQuery, state: FSMContext, page: int = 1) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            users_data = await self.admin_service.get_user_list(page=page, limit=10)
            
            if not users_data['users']:
                text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
                ])
            else:
                text = await self._format_users_list(users_data)
                keyboard = await self._create_users_list_keyboard(users_data)
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def _format_users_list(self, users_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        users = users_data['users']
        page = users_data['page']
        total_pages = users_data['total_pages']
        total_count = users_data['total_count']
        
        text_parts = [
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** (—Å—Ç—Ä. {page}/{total_pages})",
            f"–í—Å–µ–≥–æ: {total_count}",
            ""
        ]
        
        for user in users:
            name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            username = f"@{user['username']}" if user.get('username') else ""
            
            status_parts = []
            if user.get('is_admin'):
                status_parts.append("üëë")
            if user.get('is_banned'):
                status_parts.append("üö´")
            
            status = " ".join(status_parts)
            
            text_parts.append(
                f"**{name}** {username} {status}\n"
                f"ID: {user['user_id']} | üç™{user.get('generations_left', 0)} üé≠{user.get('avatar_left', 0)}\n"
                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.get('total_spent', 0):.0f} RUB"
            )
            text_parts.append("")
        
        return "\n".join(text_parts)
    
    async def _create_users_list_keyboard(self, users_data: dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        users = users_data['users']
        page = users_data['page']
        total_pages = users_data['total_pages']
        
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(users), 2):
            row = []
            for j in range(2):
                if i + j < len(users):
                    user = users[i + j]
                    name = user.get('first_name', 'User')[:10]
                    row.append(
                        InlineKeyboardButton(
                            text=f"üë§ {name}",
                            callback_data=f"user_details_{user['user_id']}"
                        )
                    )
            keyboard_buttons.append(row)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_row = []
        if page > 1:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_page_{page-1}"))
        if page < total_pages:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_page_{page+1}"))
        
        if nav_row:
            keyboard_buttons.append(nav_row)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    async def _request_user_search(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = """
üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:
‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ Username (–±–µ–∑ @)
‚Ä¢ Email
‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
        await state.set_state(BotStates.AWAITING_USER_SEARCH)
        
        return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async def _show_user_details(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_details = await self.admin_service.get_user_details(user_id)
            
            if not user_details:
                return CallbackResult.error_result("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            text = await self._format_user_details(user_details)
            keyboard = await self._create_user_details_keyboard(user_id, user_details['user'])
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π")
    
    async def _format_user_details(self, user_details: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = user_details['user']
        payments = user_details['payments']
        generations = user_details['generations']
        avatars = user_details['avatars']
        
        name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = f"@{user['username']}" if user.get('username') else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        email = user.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        text_parts = [
            f"üë§ **{name}**",
            f"üÜî ID: {user['user_id']}",
            f"üè∑ Username: {username}",
            f"üìß Email: {email}",
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', '')[:10]}",
            "",
            "üí∞ **–†–µ—Å—É—Ä—Å—ã:**",
            f"üç™ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏: {user.get('generations_left', 0)}",
            f"üé≠ –ê–≤–∞—Ç–∞—Ä—ã: {user.get('avatar_left', 0)}",
            "",
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
            f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {len(payments)}",
            f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {len(generations)}",
            f"üé≠ –ê–≤–∞—Ç–∞—Ä–æ–≤: {len(avatars)}",
        ]
        
        # –°—Ç–∞—Ç—É—Å
        status_parts = []
        if user.get('is_admin'):
            status_parts.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        if user.get('is_banned'):
            status_parts.append("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            if user.get('ban_reason'):
                status_parts.append(f"–ü—Ä–∏—á–∏–Ω–∞: {user['ban_reason']}")
        
        if status_parts:
            text_parts.extend(["", "üè∑ **–°—Ç–∞—Ç—É—Å:**"] + status_parts)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        if payments:
            text_parts.extend(["", "üí≥ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**"])
            for payment in payments[:3]:
                amount = payment.get('amount', 0)
                date = payment.get('created_at', '')[:10]
                status = payment.get('status', 'unknown')
                text_parts.append(f"‚Ä¢ {amount:.0f} RUB - {date} ({status})")
        
        return "\n".join(text_parts)
    
    async def _create_user_details_keyboard(self, user_id: int, user: dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        keyboard_buttons = []
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data=f"add_resources_{user_id}")
        ])
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º
        if user.get('is_banned'):
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_user_{user_id}")
            ])
        else:
            keyboard_buttons.append([
                InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_user_{user_id}")
            ])
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞
        if user.get('is_admin'):
            keyboard_buttons.append([
                InlineKeyboardButton(text="üëë‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"remove_admin_{user_id}")
            ])
        else:
            keyboard_buttons.append([
                InlineKeyboardButton(text="üëë‚úÖ –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"make_admin_{user_id}")
            ])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    async def _confirm_ban_user(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = f"""
üö´ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}?

‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"confirm_ban_{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_details_{user_id}")
            ]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
        
        return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    async def _unban_user(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            success = await self.admin_service.unban_user(user_id)
            
            if success:
                text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                answer_text = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            else:
                text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                answer_text = "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await self._show_user_details(query, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    async def _make_admin(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–î–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            success = await self.admin_service.make_admin(user_id)
            
            if success:
                answer_text = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            else:
                answer_text = "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await self._show_user_details(query, user_id)
            result.answer_text = answer_text
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    async def _remove_admin(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–£–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        try:
            success = await self.admin_service.remove_admin(user_id)
            
            if success:
                answer_text = "‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–±—Ä–∞–Ω—ã"
            else:
                answer_text = "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await self._show_user_details(query, user_id)
            result.answer_text = answer_text
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    async def _request_add_resources(self, query: CallbackQuery, state: FSMContext, user_id: int) -> CallbackResult:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        text = f"""
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤**

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä—ã`

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ `10 1` - –¥–æ–±–∞–≤–∏—Ç—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ 1 –∞–≤–∞—Ç–∞—Ä
‚Ä¢ `5 0` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ `0 2` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 2 –∞–≤–∞—Ç–∞—Ä–∞
‚Ä¢ `-5 0` - —É–±—Ä–∞—Ç—å 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_details_{user_id}")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
        await state.set_state(BotStates.AWAITING_RESOURCES_INPUT)
        await state.update_data(target_user_id=user_id)
        
        return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")


class FeedbackManagementCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.feedback_service = FeedbackService()
    
    @log_handler_call
    @admin_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é."""
        callback_data = query.data
        
        if callback_data == "feedback_list":
            return await self._show_feedback_list(query, state)
        elif callback_data == "feedback_unresolved":
            return await self._show_feedback_list(query, state, status='unresolved')
        elif callback_data.startswith("feedback_details_"):
            feedback_id = int(callback_data.replace("feedback_details_", ""))
            return await self._show_feedback_details(query, feedback_id)
        elif callback_data.startswith("resolve_feedback_"):
            feedback_id = int(callback_data.replace("resolve_feedback_", ""))
            return await self._resolve_feedback(query, feedback_id)
        else:
            return CallbackResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é")
    
    async def _show_feedback_list(self, query: CallbackQuery, state: FSMContext, status: str = None, page: int = 1) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            feedback_data = await self.feedback_service.get_feedback_list(page=page, limit=5, status=status)
            
            if not feedback_data['feedback']:
                status_text = "–Ω–µ—Ä–µ—à–µ–Ω–Ω–æ–π " if status == 'unresolved' else ""
                text = f"üìù **{status_text.title()}–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
                ])
            else:
                text = await self._format_feedback_list(feedback_data, status)
                keyboard = await self._create_feedback_list_keyboard(feedback_data, status)
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–∫–∞–∑–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    
    async def _format_feedback_list(self, feedback_data: dict, status: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        feedback_list = feedback_data['feedback']
        page = feedback_data['page']
        total_pages = feedback_data['total_pages']
        total_count = feedback_data['total_count']
        
        status_text = "–Ω–µ—Ä–µ—à–µ–Ω–Ω–æ–π " if status == 'unresolved' else ""
        
        text_parts = [
            f"üìù **{status_text.title()}–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å** (—Å—Ç—Ä. {page}/{total_pages})",
            f"–í—Å–µ–≥–æ: {total_count}",
            ""
        ]
        
        for feedback in feedback_list:
            user_name = feedback.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            date = feedback.get('created_at', '')[:10]
            text_preview = feedback.get('feedback_text', '')[:50]
            
            if len(feedback.get('feedback_text', '')) > 50:
                text_preview += "..."
            
            resolved_mark = "‚úÖ" if feedback.get('is_resolved') else "‚ùå"
            
            text_parts.append(
                f"{resolved_mark} **–û—Ç: {user_name}** ({date})\n"
                f"ID: {feedback['feedback_id']} | User: {feedback['user_id']}\n"
                f"_{text_preview}_"
            )
            text_parts.append("")
        
        return "\n".join(text_parts)
    
    async def _create_feedback_list_keyboard(self, feedback_data: dict, status: str = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        feedback_list = feedback_data['feedback']
        page = feedback_data['page']
        total_pages = feedback_data['total_pages']
        
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        for feedback in feedback_list:
            feedback_id = feedback['feedback_id']
            user_name = feedback.get('first_name', 'User')[:10]
            resolved_mark = "‚úÖ" if feedback.get('is_resolved') else "‚ùå"
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{resolved_mark} {user_name}",
                    callback_data=f"feedback_details_{feedback_id}"
                )
            ])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_row = []
        if page > 1:
            callback_prefix = f"feedback_{status}_page_" if status else "feedback_page_"
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{callback_prefix}{page-1}"))
        if page < total_pages:
            callback_prefix = f"feedback_{status}_page_" if status else "feedback_page_"
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{callback_prefix}{page+1}"))
        
        if nav_row:
            keyboard_buttons.append(nav_row)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_row = []
        if status != 'unresolved':
            filter_row.append(InlineKeyboardButton(text="‚ùå –ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ", callback_data="feedback_unresolved"))
        if status != 'resolved':
            filter_row.append(InlineKeyboardButton(text="‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ", callback_data="feedback_resolved"))
        if status is not None:
            filter_row.append(InlineKeyboardButton(text="üìù –í—Å–µ", callback_data="feedback_list"))
        
        if filter_row:
            keyboard_buttons.append(filter_row)
        
        # –ù–∞–∑–∞–¥
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    async def _show_feedback_details(self, query: CallbackQuery, feedback_id: int) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            feedback = await self.feedback_service.get_feedback_details(feedback_id)
            
            if not feedback:
                return CallbackResult.error_result("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            text = await self._format_feedback_details(feedback)
            keyboard = await self._create_feedback_details_keyboard(feedback_id, feedback)
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–∫–∞–∑–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ {feedback_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π")
    
    async def _format_feedback_details(self, feedback: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        user_name = feedback.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = f"@{feedback['username']}" if feedback.get('username') else ""
        email = feedback.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        date = feedback.get('created_at', '')[:16].replace('T', ' ')
        
        text_parts = [
            f"üìù **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å #{feedback['feedback_id']}**",
            "",
            f"üë§ **–û—Ç:** {user_name} {username}",
            f"üÜî **User ID:** {feedback['user_id']}",
            f"üìß **Email:** {email}",
            f"üìÖ **–î–∞—Ç–∞:** {date}",
            "",
            f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**",
            f"{feedback['feedback_text']}",
            ""
        ]
        
        if feedback.get('is_resolved'):
            text_parts.extend([
                "‚úÖ **–°—Ç–∞—Ç—É—Å:** –†–µ—à–µ–Ω–æ",
                f"üìÖ **–†–µ—à–µ–Ω–æ:** {feedback.get('resolved_at', '')[:16].replace('T', ' ')}"
            ])
            
            if feedback.get('admin_response'):
                text_parts.extend([
                    "",
                    f"üë®‚Äçüíº **–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**",
                    f"{feedback['admin_response']}"
                ])
        else:
            text_parts.append("‚ùå **–°—Ç–∞—Ç—É—Å:** –ù–µ —Ä–µ—à–µ–Ω–æ")
        
        return "\n".join(text_parts)
    
    async def _create_feedback_details_keyboard(self, feedback_id: int, feedback: dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        keyboard_buttons = []
        
        if not feedback.get('is_resolved'):
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–Ω—ã–º", callback_data=f"resolve_feedback_{feedback_id}")
            ])
        
        # –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        keyboard_buttons.append([
            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"message_user_{feedback['user_id']}")
        ])
        
        # –ù–∞–∑–∞–¥
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", callback_data="feedback_list")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    async def _resolve_feedback(self, query: CallbackQuery, feedback_id: int) -> CallbackResult:
        """–û—Ç–º–µ—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é."""
        try:
            success = await self.feedback_service.mark_feedback_resolved(feedback_id)
            
            if success:
                answer_text = "‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è"
            else:
                answer_text = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º
            result = await self._show_feedback_details(query, feedback_id)
            result.answer_text = answer_text
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ {feedback_id} –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π")


class SystemCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.system_service = SystemService()
    
    @log_handler_call
    @admin_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ callback'–∏."""
        callback_data = query.data
        
        if callback_data == "system_health":
            return await self._show_system_health(query)
        else:
            return CallbackResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def _show_system_health(self, query: CallbackQuery) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            health = await self.system_service.get_system_health()
            
            text = await self._format_system_health(health)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_health")],
                [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
            ])
            
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    
    async def _format_system_health(self, health: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
        text_parts = [
            "üîß **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**",
            ""
        ]
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        db_health = health.get('database', {})
        db_status = "‚úÖ" if db_health.get('status') == 'healthy' else "‚ùå"
        text_parts.extend([
            f"{db_status} **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**",
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {db_health.get('size', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            f"‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {db_health.get('active_connections', 0)}",
            ""
        ])
        
        # –û—á–µ—Ä–µ–¥–∏
        queue_health = health.get('queues', {})
        queue_status = "‚úÖ" if queue_health.get('status') == 'healthy' else "‚ùå"
        text_parts.extend([
            f"{queue_status} **–û—á–µ—Ä–µ–¥–∏:**",
            f"‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {queue_health.get('processing_generations', 0)}",
            f"‚Ä¢ –ê–≤–∞—Ç–∞—Ä–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏: {queue_health.get('training_avatars', 0)}",
            ""
        ])
        
        # –î–∏—Å–∫
        disk_health = health.get('disk', {})
        disk_status = "‚úÖ" if disk_health.get('status') == 'healthy' else "‚ùå"
        text_parts.extend([
            f"{disk_status} **–•—Ä–∞–Ω–∏–ª–∏—â–µ:**"
        ])
        
        largest_tables = disk_health.get('largest_tables', [])
        if largest_tables:
            text_parts.append("‚Ä¢ –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for table in largest_tables[:3]:
                text_parts.append(f"  - {table['tablename']}: {table['size']}")
        
        text_parts.extend([
            "",
            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {health.get('timestamp', '')[:16].replace('T', ' ')}"
        ])
        
        return "\n".join(text_parts)
