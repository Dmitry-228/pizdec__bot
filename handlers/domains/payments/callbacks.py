"""
Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–µ–π.
"""

import logging
from datetime import datetime, timedelta
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import TARIFFS
from database import check_database_user, get_user_registrations_by_date
from keyboards import create_subscription_keyboard, create_main_menu_keyboard
from states import BotStates
from ..common.base import BaseCallbackHandler
from ..common.decorators import log_handler_call, user_required
from ..common.types import CallbackResult
from .services import PaymentService, TariffService

logger = logging.getLogger(__name__)


class SubscriptionCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.tariff_service = TariffService()
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."""
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await check_database_user(user_id)
            if not user_data:
                return CallbackResult.error_result("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç—è—â–∏–º
            is_paying_user = len(user_data) > 10 and user_data[10] > 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration_time = await self._get_registration_time(user_id)
            time_since_registration = (datetime.now() - registration_time).total_seconds() if registration_time else float('inf')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
            available_tariffs = self.tariff_service.get_available_tariffs(
                is_paying_user, time_since_registration
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
            tariff_text = self._format_tariff_text(user_data, available_tariffs)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
            keyboard = await create_subscription_keyboard(
                hide_mini_tariff=time_since_registration <= 5400
            )
            
            await self.edit_safe_message(query.message, tariff_text, keyboard)
            
            return CallbackResult.success_result(
                message="–¢–∞—Ä–∏—Ñ—ã –ø–æ–∫–∞–∑–∞–Ω—ã",
                answer_text="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤")
    
    async def _get_registration_time(self, user_id: int) -> datetime:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            registrations = await get_user_registrations_by_date(user_id)
            if registrations:
                return registrations[0].get('created_at', datetime.now())
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}")
        return datetime.now()
    
    def _format_tariff_text(self, user_data: tuple, available_tariffs: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤."""
        first_purchase = user_data[5] if len(user_data) > 5 else True
        
        text_parts = [
            "üî• –ì–æ—Ä—è—á–∏–π –≤—ã–±–æ—Ä –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ!",
            "",
            "–•–æ—á–µ—à—å –∫—Ä—É—Ç—ã–µ –∫–∞–¥—Ä—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç? –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç –∏ –ø–æ–ª—É—á–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
        for tariff_id, tariff in available_tariffs.items():
            text_parts.append(tariff.get('display', f"–¢–∞—Ä–∏—Ñ {tariff_id}"))
            text_parts.append("")
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
        if first_purchase:
            text_parts.extend([
                "üéÅ –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –õ–Æ–ë–û–ì–û –ø–∞–∫–µ—Ç–∞ (–∫—Ä–æ–º–µ '–¢–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä') - 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!",
                ""
            ])
        
        text_parts.extend([
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É ‚§µÔ∏è",
            "",
            "üìÑ –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–∞–∫–µ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://telegra.ph/Polzovatelskoe-soglashenie-07-26-12)"
        ])
        
        return "\n".join(text_parts)


class TariffCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.tariff_service = TariffService()
        self.payment_service = PaymentService()
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞."""
        user_id = query.from_user.id
        callback_data = query.data
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ callback_data
        tariff_id = callback_data.replace("tariff_", "").replace("buy_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        tariff = self.tariff_service.get_tariff(tariff_id)
        if not tariff:
            return CallbackResult.error_result(f"–¢–∞—Ä–∏—Ñ '{tariff_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                selected_tariff_id=tariff_id,
                tariff_amount=tariff['price'],
                tariff_description=self.payment_service.format_tariff_description(tariff_id)
            )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –¥–ª—è –æ–ø–ª–∞—Ç—ã
            await self._request_email(query, tariff)
            await state.set_state(BotStates.AWAITING_EMAIL)
            
            return CallbackResult.success_result(
                message=f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ {tariff_id}",
                answer_text=f"üí≥ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff['name']}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_id} –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Ä–∏—Ñ–∞")
    
    async def _request_email(self, query: CallbackQuery, tariff: dict):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
        text = f"""
üí≥ **–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff['name']}**

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']} RUB

üìß –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:

‚ö†Ô∏è Email –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞)
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="subscribe")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)


class PaymentCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.payment_service = PaymentService()
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–µ callback'–∏."""
        callback_data = query.data
        user_id = query.from_user.id
        
        if callback_data == "payment_success":
            return await self._handle_payment_success(query, state)
        elif callback_data == "payment_cancel":
            return await self._handle_payment_cancel(query, state)
        elif callback_data.startswith("payment_check_"):
            payment_id = callback_data.replace("payment_check_", "")
            return await self._handle_payment_check(query, state, payment_id)
        else:
            return CallbackResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
    
    async def _handle_payment_success(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂."""
        user_id = query.from_user.id
        
        success_text = """
‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üéâ –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã!
üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.
        """
        
        keyboard = await create_main_menu_keyboard(user_id)
        await self.edit_safe_message(query.message, success_text.strip(), keyboard)
        await state.clear()
        
        return CallbackResult.success_result(
            message="–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
            answer_text="‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
        )
    
    async def _handle_payment_cancel(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞."""
        user_id = query.from_user.id
        
        cancel_text = """
‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**

–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="subscribe")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.edit_safe_message(query.message, cancel_text.strip(), keyboard)
        await state.clear()
        
        return CallbackResult.success_result(
            message="–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω",
            answer_text="‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω"
        )
    
    async def _handle_payment_check(self, query: CallbackQuery, state: FSMContext, payment_id: str) -> CallbackResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞."""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API YooKassa
            status = await self.payment_service.get_payment_status(payment_id)
            
            if status == "succeeded":
                return await self._handle_payment_success(query, state)
            elif status == "canceled":
                return await self._handle_payment_cancel(query, state)
            else:
                return CallbackResult.success_result(
                    message="–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                    answer_text="‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")