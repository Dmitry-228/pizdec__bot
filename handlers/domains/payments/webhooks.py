"""
Webhook —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.
"""

import json
import logging
from typing import Dict, Any, Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import YOOKASSA_SECRET_KEY
from keyboards import create_main_menu_keyboard
from ..common.exceptions import PaymentError
from .services import PaymentService

logger = logging.getLogger(__name__)


class PaymentWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º."""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.payment_service = PaymentService()
    
    async def handle_yookassa_webhook(self, webhook_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç YooKassa."""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è webhook'–∞
            if not self._validate_yookassa_webhook(webhook_data):
                logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π YooKassa webhook")
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
            event_type = webhook_data.get('event')
            payment_object = webhook_data.get('object', {})
            
            if event_type == 'payment.succeeded':
                return await self._handle_payment_succeeded(payment_object)
            elif event_type == 'payment.canceled':
                return await self._handle_payment_canceled(payment_object)
            elif event_type == 'payment.waiting_for_capture':
                return await self._handle_payment_waiting(payment_object)
            else:
                logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è YooKassa: {event_type}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa webhook: {e}", exc_info=True)
            return False
    
    def _validate_yookassa_webhook(self, webhook_data: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç webhook –æ—Ç YooKassa."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['event', 'object']
        if not all(field in webhook_data for field in required_fields):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_object = webhook_data.get('object', {})
        if not isinstance(payment_object, dict):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –ø–ª–∞—Ç–µ–∂–∞
        if 'id' not in payment_object:
            return False
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ webhook'–∞
        # if YOOKASSA_SECRET_KEY:
        #     return self._verify_webhook_signature(webhook_data)
        
        return True
    
    async def _handle_payment_succeeded(self, payment_object: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂."""
        try:
            payment_id = payment_object.get('id')
            amount_value = float(payment_object.get('amount', {}).get('value', 0))
            metadata = payment_object.get('metadata', {})
            
            user_id = int(metadata.get('user_id', 0))
            if not user_id:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ metadata –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞
            tariff_id = self._determine_tariff_by_amount(amount_value)
            if not tariff_id:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å—É–º–º—ã {amount_value}")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            success = await self.payment_service.process_successful_payment(
                user_id=user_id,
                tariff_id=tariff_id,
                amount=amount_value,
                payment_id=payment_id
            )
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                await self._notify_user_payment_success(user_id, tariff_id, amount_value)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è user_id={user_id}")
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ {payment_id}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
            return False
    
    async def _handle_payment_canceled(self, payment_object: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂."""
        try:
            payment_id = payment_object.get('id')
            metadata = payment_object.get('metadata', {})
            user_id = int(metadata.get('user_id', 0))
            
            if user_id:
                await self._notify_user_payment_canceled(user_id, payment_id)
                logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è user_id={user_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
            return False
    
    async def _handle_payment_waiting(self, payment_object: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂, –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        try:
            payment_id = payment_object.get('id')
            metadata = payment_object.get('metadata', {})
            user_id = int(metadata.get('user_id', 0))
            
            if user_id:
                await self._notify_user_payment_waiting(user_id, payment_id)
                logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è user_id={user_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
            return False
    
    def _determine_tariff_by_amount(self, amount: float) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞."""
        from config import TARIFFS
        
        # –ò—â–µ–º —Ç–∞—Ä–∏—Ñ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ü–µ–Ω–æ–π
        for tariff_id, tariff_data in TARIFFS.items():
            if abs(tariff_data.get('price', 0) - amount) < 0.01:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                return tariff_id
        
        return None
    
    async def _notify_user_payment_success(self, user_id: int, tariff_id: str, amount: float):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
        try:
            success_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üí≥ –¢–∞—Ä–∏—Ñ: {tariff_id}
üí∞ –°—É–º–º–∞: {amount} RUB

üéâ –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã!
üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.
            """
            
            keyboard = await create_main_menu_keyboard(user_id)
            
            await self.bot.send_message(
                chat_id=user_id,
                text=success_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")
    
    async def _notify_user_payment_canceled(self, user_id: int, payment_id: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
        try:
            cancel_text = f"""
‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**

ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}

–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="subscribe")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=cancel_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")
    
    async def _notify_user_payment_waiting(self, user_id: int, payment_id: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏."""
        try:
            waiting_text = f"""
‚è≥ **–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è**

ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}

–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
            """
            
            keyboard = await create_main_menu_keyboard(user_id)
            
            await self.bot.send_message(
                chat_id=user_id,
                text=waiting_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")


class ManualPaymentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.payment_service = PaymentService()
    
    async def process_manual_payment(
        self, 
        user_id: int, 
        tariff_id: str, 
        amount: float,
        admin_id: int,
        note: str = None
    ) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            success = await self.payment_service.process_successful_payment(
                user_id=user_id,
                tariff_id=tariff_id,
                amount=amount,
                payment_id=f"manual_{admin_id}_{user_id}"
            )
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._notify_user_manual_payment(user_id, tariff_id, amount, note)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await self._notify_admin_manual_payment(admin_id, user_id, tariff_id, amount)
                
                logger.info(f"–†—É—á–Ω–æ–π –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: user_id={user_id}, tariff={tariff_id}, admin={admin_id}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
            return False
    
    async def _notify_user_manual_payment(self, user_id: int, tariff_id: str, amount: float, note: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä—É—á–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏."""
        try:
            text = f"""
üéÅ **–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**

üí≥ –¢–∞—Ä–∏—Ñ: {tariff_id}
üí∞ –°—É–º–º–∞: {amount} RUB

üéâ –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã!
            """
            
            if note:
                text += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}"
            
            keyboard = await create_main_menu_keyboard(user_id)
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä—É—á–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
    
    async def _notify_admin_manual_payment(self, admin_id: int, user_id: int, tariff_id: str, amount: float):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä—É—á–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏."""
        try:
            text = f"""
‚úÖ **–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
üí≥ –¢–∞—Ä–∏—Ñ: {tariff_id}
üí∞ –°—É–º–º–∞: {amount} RUB

–†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            """
            
            await self.bot.send_message(
                chat_id=admin_id,
                text=text.strip(),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} –æ —Ä—É—á–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")