"""
Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""

import logging
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from database import get_active_trainedmodel
from keyboards import create_main_menu_keyboard, create_generation_keyboard
from states import BotStates
from ..common.base import BaseCallbackHandler
from ..common.decorators import log_handler_call, user_required, check_resources
from ..common.types import CallbackResult, GenerationRequest
from .services import GenerationService, StyleService

logger = logging.getLogger(__name__)


class GenerationMenuCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        user_id = query.from_user.id
        
        try:
            menu_text = """
üé® **–ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

üì∏ **–§–æ—Ç–æ –ø–æ —Ç–µ–∫—Å—Ç—É** - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
üé≠ **–§–æ—Ç–æ —Å –ª–∏—Ü–æ–º** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º  
üé¨ **–í–∏–¥–µ–æ** - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ
üë§ **–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä** - –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ
            """
            
            keyboard = await create_generation_keyboard(user_id)
            await self.edit_safe_message(query.message, menu_text.strip(), keyboard)
            
            return CallbackResult.success_result(
                message="–ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–æ",
                answer_text="üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


class PhotoGenerationCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ —Ç–µ–∫—Å—Ç—É."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.style_service = StyleService()
    
    @log_handler_call
    @user_required
    @check_resources(photos=1)
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –ø–æ —Ç–µ–∫—Å—Ç—É."""
        user_id = query.from_user.id
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                generation_type='photo',
                generation_subtype='text_to_image'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
            await self._show_style_selection(query, 'photo')
            await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
            
            return CallbackResult.success_result(
                message="–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –ø–æ —Ç–µ–∫—Å—Ç—É",
                answer_text="üì∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è —Ñ–æ—Ç–æ"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    async def _show_style_selection(self, query: CallbackQuery, generation_type: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π."""
        styles = self.style_service.get_available_styles(generation_type)
        
        text = f"""
üé® **–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–ª—è {generation_type}**

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
        """
        
        keyboard_buttons = []
        for style_key, style_data in styles.items():
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{style_data['name']} - {style_data['description']}", 
                    callback_data=f"style_{style_key}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="generation_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await self.edit_safe_message(query.message, text.strip(), keyboard)


class AvatarGenerationCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º."""
    
    @log_handler_call
    @user_required
    @check_resources(photos=1)
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º."""
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
            active_avatar = await get_active_trainedmodel(user_id)
            if not active_avatar or active_avatar[3] != 'success':
                await self._show_no_avatar_message(query)
                return CallbackResult.error_result("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                generation_type='photo',
                generation_subtype='with_avatar',
                active_avatar_id=active_avatar[0]
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
            style_service = StyleService()
            await self._show_avatar_style_selection(query, style_service)
            await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
            
            return CallbackResult.success_result(
                message="–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º",
                answer_text="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    async def _show_no_avatar_message(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞."""
        text = """
‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞**

–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –ª–∏—Ü–æ–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä.

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" ‚Üí "–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã" –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="create_avatar")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
    
    async def _show_avatar_style_selection(self, query: CallbackQuery, style_service: StyleService):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞."""
        styles = style_service.get_available_styles('photo')
        
        text = """
üé≠ **–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–ª—è —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º**

–í–∞—à –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ:
        """
        
        keyboard_buttons = []
        for style_key, style_data in styles.items():
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{style_data['name']} - {style_data['description']}", 
                    callback_data=f"style_{style_key}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="generation_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await self.edit_safe_message(query.message, text.strip(), keyboard)


class VideoGenerationCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    
    @log_handler_call
    @user_required
    @check_resources(photos=1)  # –í–∏–¥–µ–æ —Ç–æ–∂–µ —Ç—Ä–∞—Ç–∏—Ç –ø–µ—á–µ–Ω—å–∫–∏
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ."""
        user_id = query.from_user.id
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                generation_type='video'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ
            style_service = StyleService()
            await self._show_video_style_selection(query, style_service)
            await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
            
            return CallbackResult.success_result(
                message="–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ",
                answer_text="üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∏–¥–µ–æ"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    async def _show_video_style_selection(self, query: CallbackQuery, style_service: StyleService):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–µ–æ."""
        styles = style_service.get_available_styles('video')
        
        text = """
üé¨ **–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–ª—è –≤–∏–¥–µ–æ**

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:
        """
        
        keyboard_buttons = []
        for style_key, style_data in styles.items():
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{style_data['name']} - {style_data['description']}", 
                    callback_data=f"style_{style_key}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="generation_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await self.edit_safe_message(query.message, text.strip(), keyboard)


class StyleCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    
    @log_handler_call
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è."""
        user_id = query.from_user.id
        callback_data = query.data
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å –∏–∑ callback_data
        style_key = callback_data.replace("style_", "")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
            await state.update_data(selected_style=style_key)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            user_data = await state.get_data()
            generation_type = user_data.get('generation_type', 'photo')
            
            if generation_type == 'video':
                # –î–ª—è –≤–∏–¥–µ–æ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
                await self._request_video_prompt(query)
                await state.set_state(BotStates.AWAITING_PROMPT)
            else:
                # –î–ª—è —Ñ–æ—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
                await self._request_photo_prompt(query, style_key)
                await state.set_state(BotStates.AWAITING_PROMPT)
            
            return CallbackResult.success_result(
                message=f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å {style_key}",
                answer_text=f"üé® –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {style_key}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è")
    
    async def _request_photo_prompt(self, query: CallbackQuery, style_key: str):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ."""
        text = f"""
‚úèÔ∏è **–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**

–°—Ç–∏–ª—å: {style_key}

–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ —Ñ–æ—Ç–æ. –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ö–æ—Ç –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º —à–ª–µ–º–µ –Ω–∞ —Ñ–æ–Ω–µ –∑–≤–µ–∑–¥"
‚Ä¢ "–ó–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º —Å –ø–∞—Ä—É—Å–Ω–∏–∫–æ–º"
‚Ä¢ "–î–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ –≤ –ø–∞—Ä–∫–µ"
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="generate_photo")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
    
    async def _request_video_prompt(self, query: CallbackQuery):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
        text = """
üé¨ **–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–∏–¥–µ–æ**

–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ. –í–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 3-5 —Å–µ–∫—É–Ω–¥.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–í–æ–ª–Ω—ã —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –æ —Å–∫–∞–ª—ã"
‚Ä¢ "–û–≥–æ–Ω—å –≤ –∫–∞–º–∏–Ω–µ"
‚Ä¢ "–ü–∞–¥–∞—é—â–∏–µ –ª–∏—Å—Ç—å—è –≤ –æ—Å–µ–Ω–Ω–µ–º –ª–µ—Å—É"
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="generate_video")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)


class CreateAvatarCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    
    @log_handler_call
    @user_required
    @check_resources(avatars=1)
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞."""
        user_id = query.from_user.id
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(generation_type='avatar')
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
            await self._request_avatar_photos(query)
            await state.set_state(BotStates.AWAITING_FACE_IMAGE)
            
            return CallbackResult.success_result(
                message="–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞",
                answer_text="üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞")
    
    async def _request_avatar_photos(self, query: CallbackQuery):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
        text = """
üì∏ **–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ 3-10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–µ–±—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:

‚úÖ **–•–æ—Ä–æ—à–∏–µ —Ñ–æ—Ç–æ:**
‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞
‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã –Ω–∞ —Ñ–æ—Ç–æ

‚ùå **–ü–ª–æ—Ö–∏–µ —Ñ–æ—Ç–æ:**
‚Ä¢ –†–∞–∑–º—ã—Ç—ã–µ –∏–ª–∏ —Ç–µ–º–Ω—ã–µ
‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –Ω–∞ —Ñ–æ—Ç–æ
‚Ä¢ –û—á–∫–∏ –∏–ª–∏ –º–∞—Å–∫–∏
‚Ä¢ –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫–∞–º–µ—Ä—ã

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="generation_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)