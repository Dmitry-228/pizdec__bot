"""
Message —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""

import logging
import os
from typing import List
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from states import BotStates
from keyboards import create_main_menu_keyboard
from ..common.base import BaseMessageHandler
from ..common.decorators import log_handler_call, user_required, check_resources
from ..common.types import HandlerResult, GenerationRequest
from .services import GenerationService, StyleService

logger = logging.getLogger(__name__)


class PromptMessageHandler(BaseMessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π)."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.generation_service = GenerationService()
        self.style_service = StyleService()
    
    @log_handler_call
    @user_required
    async def handle(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        user_id = message.from_user.id
        prompt = message.text.strip()
        
        if not prompt:
            await self._send_empty_prompt_error(message)
            return HandlerResult.error_result("–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_data = await state.get_data()
            generation_type = user_data.get('generation_type', 'photo')
            selected_style = user_data.get('selected_style', 'realistic')
            generation_subtype = user_data.get('generation_subtype', 'text_to_image')
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation_request = GenerationRequest(
                user_id=user_id,
                generation_type=generation_type,
                prompt=prompt,
                style=selected_style,
                additional_params={
                    'generation_subtype': generation_subtype,
                    'active_avatar_id': user_data.get('active_avatar_id')
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await self._send_generation_started(message, generation_type, selected_style)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            if generation_type == 'photo':
                result = await self.generation_service.generate_photo(generation_request)
            elif generation_type == 'video':
                result = await self.generation_service.generate_video(generation_request)
            else:
                return HandlerResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self._send_generation_result(message, result, generation_type)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è user_id={user_id}, type={generation_type}, style={selected_style}")
            
            return HandlerResult.success_result(
                message="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                data={
                    "user_id": user_id,
                    "generation_type": generation_type,
                    "style": selected_style,
                    "prompt": prompt,
                    "result": result
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await self._send_generation_error(message)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    async def _send_empty_prompt_error(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
        error_text = """
‚ùå **–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.

–ü—Ä–∏–º–µ—Ä: "–ö–æ—Ç –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º —à–ª–µ–º–µ –Ω–∞ —Ñ–æ–Ω–µ –∑–≤–µ–∑–¥"
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé® –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generation_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, error_text.strip(), keyboard)
    
    async def _send_generation_started(self, message: Message, generation_type: str, style: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        type_emoji = "üì∏" if generation_type == "photo" else "üé¨"
        type_name = "—Ñ–æ—Ç–æ" if generation_type == "photo" else "–≤–∏–¥–µ–æ"
        
        text = f"""
{type_emoji} **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {type_name} –Ω–∞—á–∞–ª–∞—Å—å!**

üé® –°—Ç–∏–ª—å: {style}
‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 30-60 —Å–µ–∫—É–Ω–¥

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
        """
        
        await self.send_safe_message(message.from_user.id, text.strip())
    
    async def _send_generation_result(self, message: Message, result: dict, generation_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        user_id = message.from_user.id
        
        if not result.get('success'):
            await self._send_generation_error(message)
            return
        
        try:
            if generation_type == 'photo':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                image_urls = result.get('image_urls', [])
                if image_urls:
                    caption = f"""
‚úÖ **–§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!**

üé® –ú–æ–¥–µ–ª—å: {result.get('model_used', 'unknown')}
‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('duration', 0):.1f}—Å
                    """
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_photo")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                    
                    await message.bot.send_photo(
                        chat_id=user_id,
                        photo=image_urls[0],
                        caption=caption.strip(),
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                else:
                    await self._send_generation_error(message)
                    
            elif generation_type == 'video':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
                video_url = result.get('video_url')
                if video_url:
                    caption = f"""
‚úÖ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**

‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration', 3)}—Å
                    """
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_video")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                    
                    await message.bot.send_video(
                        chat_id=user_id,
                        video=video_url,
                        caption=caption.strip(),
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                else:
                    await self._send_generation_error(message)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ user_id={user_id}: {e}", exc_info=True)
            await self._send_generation_error(message)
    
    async def _send_generation_error(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        error_text = """
‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="generation_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, error_text.strip(), keyboard)


class ImageMessageHandler(BaseMessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.generation_service = GenerationService()
        self.avatar_photos: dict = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    
    @log_handler_call
    @user_required
    async def handle(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        user_id = message.from_user.id
        
        if not message.photo:
            return HandlerResult.error_result("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_data = await state.get_data()
            generation_type = user_data.get('generation_type')
            
            if generation_type == 'avatar':
                return await self._handle_avatar_photo(message, state)
            else:
                return await self._handle_face_photo(message, state)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    async def _handle_avatar_photo(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
        user_id = message.from_user.id
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            file_info = await message.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            avatar_dir = f"temp/avatars/{user_id}"
            os.makedirs(avatar_dir, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.avatar_photos:
                self.avatar_photos[user_id] = []
            
            photo_count = len(self.avatar_photos[user_id])
            file_path = f"{avatar_dir}/photo_{photo_count + 1}.jpg"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await message.bot.download_file(file_info.file_path, file_path)
            self.avatar_photos[user_id].append(file_path)
            
            photo_count = len(self.avatar_photos[user_id])
            
            if photo_count < 3:
                # –ù—É–∂–Ω–æ –µ—â–µ —Ñ–æ—Ç–æ
                await self._request_more_photos(message, photo_count)
                return HandlerResult.success_result(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ {photo_count}/3-10")
            elif photo_count < 10:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
                await self._offer_more_photos_or_start(message, photo_count)
                return HandlerResult.success_result(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ {photo_count}/10")
            else:
                # –ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                await self._start_avatar_training(message, state)
                return HandlerResult.success_result("–ù–∞—á–∞—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await self._send_avatar_photo_error(message)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    async def _handle_face_photo(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        user_id = message.from_user.id
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            file_info = await message.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
            temp_dir = f"temp/faces/{user_id}"
            os.makedirs(temp_dir, exist_ok=True)
            file_path = f"{temp_dir}/face.jpg"
            
            await message.bot.download_file(file_info.file_path, file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(face_image_path=file_path)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            await self._request_prompt_with_face(message)
            await state.set_state(BotStates.AWAITING_PROMPT)
            
            return HandlerResult.success_result("–§–æ—Ç–æ –ª–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    async def _request_more_photos(self, message: Message, current_count: int):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞."""
        text = f"""
üì∏ **–§–æ—Ç–æ {current_count}/10 –ø–æ–ª—É—á–µ–Ω–æ**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ (–º–∏–Ω–∏–º—É–º 3, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10):

‚úÖ –•–æ—Ä–æ—à–æ: —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚ùå –ü–ª–æ—Ö–æ: —Ä–∞–∑–º—ã—Ç—ã–µ, —Ç–µ–º–Ω—ã–µ, —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="generation_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, text.strip(), keyboard)
    
    async def _offer_more_photos_or_start(self, message: Message, current_count: int):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ."""
        text = f"""
üì∏ **–§–æ—Ç–æ {current_count}/10 –ø–æ–ª—É—á–µ–Ω–æ**

–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞. –ú–æ–∂–µ—Ç–µ:

‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ (–¥–æ 10 –º–∞–∫—Å–∏–º—É–º)
‚Ä¢ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å–µ–π—á–∞—Å
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_avatar_training")],
            [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_more_photos")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="generation_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, text.strip(), keyboard)
    
    async def _start_avatar_training(self, message: Message, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞."""
        user_id = message.from_user.id
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
            generation_request = GenerationRequest(
                user_id=user_id,
                generation_type='avatar',
                additional_params={
                    'avatar_name': f'–ê–≤–∞—Ç–∞—Ä {user_id}',
                    'photo_paths': self.avatar_photos.get(user_id, [])
                }
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
            result = await self.generation_service.create_avatar(generation_request)
            
            if result.get('success'):
                success_text = f"""
‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞—á–∞–ª–æ—Å—å!**

üéØ ID –∞–≤–∞—Ç–∞—Ä–∞: {result.get('avatar_id')}
‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {result.get('estimated_time', 300) // 60} –º–∏–Ω—É—Ç

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!
                """
                
                keyboard = await create_main_menu_keyboard(user_id)
                await self.send_safe_message(user_id, success_text.strip(), keyboard)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if user_id in self.avatar_photos:
                    del self.avatar_photos[user_id]
                await state.clear()
            else:
                await self._send_avatar_training_error(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await self._send_avatar_training_error(message)
    
    async def _request_prompt_with_face(self, message: Message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ª–∏—Ü–æ–º."""
        text = """
‚úÖ **–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!**

–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º:

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–í –∫–æ—Å—Ç—é–º–µ —Å—É–ø–µ—Ä–≥–µ—Ä–æ—è –Ω–∞ —Ñ–æ–Ω–µ –≥–æ—Ä–æ–¥–∞"
‚Ä¢ "–í —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–æ–º –∑–∞–º–∫–µ –≤ —Ä–æ–ª–∏ —Ä—ã—Ü–∞—Ä—è"
‚Ä¢ "–ù–∞ –ø–ª—è–∂–µ –≤ –ª–µ—Ç–Ω–µ–π –æ–¥–µ–∂–¥–µ"
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="generation_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, text.strip(), keyboard)
    
    async def _send_avatar_photo_error(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞."""
        error_text = """
‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ**

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:

‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –≤—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–æ—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_avatar")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, error_text.strip(), keyboard)
    
    async def _send_avatar_training_error(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
        error_text = """
‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞**

–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞. –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_avatar")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self.send_safe_message(message.from_user.id, error_text.strip(), keyboard)