"""
Message —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞.
"""

import logging
import re
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from keyboards import create_main_menu_keyboard
from states import BotStates
from ..common.base import BaseMessageHandler
from ..common.decorators import log_handler_call, user_required
from ..common.types import HandlerResult
from .services import UserService, SettingsService

logger = logging.getLogger(__name__)


class EmailChangeHandler(BaseMessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.user_service = UserService()
        self.settings_service = SettingsService()
    
    @log_handler_call
    @user_required
    async def handle(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ email."""
        user_id = message.from_user.id
        email = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if not self._is_valid_email(email):
            await self._send_invalid_email_message(message)
            return HandlerResult.success_result("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email
            existing_user = await self.user_service.get_user_by_email(email)
            if existing_user and existing_user['user_id'] != user_id:
                await self._send_email_taken_message(message)
                return HandlerResult.success_result("Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º email
            success = await self.user_service.update_user_email(user_id, email)
            
            if success:
                await self._send_email_updated_message(message, email)
                await state.clear()
                return HandlerResult.success_result(f"Email –æ–±–Ω–æ–≤–ª–µ–Ω: {email}")
            else:
                await self._send_email_update_error_message(message)
                return HandlerResult.error_result("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await self._send_email_update_error_message(message)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email: {e}")
    
    def _is_valid_email(self, email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email."""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    async def _send_invalid_email_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ email."""
        text = """
‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.

–ü—Ä–∏–º–µ—Ä: user@example.com
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_settings")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_email_taken_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."""
        text = """
‚ö†Ô∏è **Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è**

–≠—Ç–æ—Ç email –∞–¥—Ä–µ—Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_settings")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_email_updated_message(self, message: Message, email: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email."""
        text = f"""
‚úÖ **Email –æ–±–Ω–æ–≤–ª–µ–Ω**

–í–∞—à –Ω–æ–≤—ã–π email: {email}

–¢–µ–ø–µ—Ä—å –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å:
‚Ä¢ –ß–µ–∫–∏ –æ–± –æ–ø–ª–∞—Ç–µ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
‚Ä¢ –í–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="user_settings")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_email_update_error_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email."""
        text = """
‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email**

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ email.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="user_settings")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)


class AvatarPhotosHandler(BaseMessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.user_service = UserService()
    
    @log_handler_call
    @user_required
    async def handle(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state != BotStates.UPLOADING_AVATAR_PHOTOS:
            return HandlerResult.success_result("–ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ
        if not message.photo:
            await self._send_photo_required_message(message)
            return HandlerResult.success_result("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            uploaded_photos = state_data.get('uploaded_photos', [])
            avatar_name = state_data.get('avatar_name', '–ú–æ–π –∞–≤–∞—Ç–∞—Ä')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file_info = await self.bot.get_file(photo.file_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            photo_info = {
                'file_id': photo.file_id,
                'file_unique_id': photo.file_unique_id,
                'file_path': file_info.file_path,
                'file_size': photo.file_size,
                'width': photo.width,
                'height': photo.height
            }
            
            uploaded_photos.append(photo_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(uploaded_photos=uploaded_photos)
            
            photos_count = len(uploaded_photos)
            
            if photos_count < 3:
                # –ù—É–∂–Ω–æ –µ—â–µ —Ñ–æ—Ç–æ
                await self._send_need_more_photos_message(message, photos_count)
                return HandlerResult.success_result(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {photos_count} —Ñ–æ—Ç–æ")
            
            elif photos_count < 10:
                # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
                await self._send_can_create_avatar_message(message, photos_count, avatar_name)
                return HandlerResult.success_result(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {photos_count} —Ñ–æ—Ç–æ, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å")
            
            else:
                # –ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
                await self._send_max_photos_reached_message(message, avatar_name)
                return HandlerResult.success_result("–ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            await self._send_photo_upload_error_message(message)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    async def _send_photo_required_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ç–æ."""
        text = """
üì∑ **–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:
‚Ä¢ –í–∞—à–µ –ª–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ë–µ–∑ –æ—á–∫–æ–≤ –∏ –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="profile")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_need_more_photos_message(self, message: Message, count: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ—â–µ —Ñ–æ—Ç–æ."""
        remaining = 3 - count
        
        text = f"""
üì∑ **–§–æ—Ç–æ {count}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ**

–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ –º–∏–Ω–∏–º—É–º {remaining} —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="profile")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_can_create_avatar_message(self, message: Message, count: int, avatar_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
        text = f"""
üì∑ **–§–æ—Ç–æ {count}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ**

–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ "{avatar_name}".

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä —Å–µ–π—á–∞—Å
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ (–¥–æ 10 –º–∞–∫—Å–∏–º—É–º)
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="confirm_create_avatar")],
            [InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_max_photos_reached_message(self, message: Message, avatar_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º—É–º–∞ —Ñ–æ—Ç–æ."""
        text = f"""
üì∑ **–ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (10/10)**

–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ "{avatar_name}".

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="confirm_create_avatar")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_photo_upload_error_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
        text = """
‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ**

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="continue_upload")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)


class FeedbackHandler(BaseMessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.user_service = UserService()
    
    @log_handler_call
    @user_required
    async def handle(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state != BotStates.AWAITING_FEEDBACK:
            return HandlerResult.success_result("–ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        
        feedback_text = message.text.strip()
        
        if not feedback_text:
            await self._send_empty_feedback_message(message)
            return HandlerResult.success_result("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            success = await self.user_service.save_user_feedback(
                user_id=user_id,
                feedback_text=feedback_text,
                message_id=message.message_id
            )
            
            if success:
                await self._send_feedback_saved_message(message)
                await state.clear()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                await self._notify_admins_about_feedback(user_id, feedback_text)
                
                return HandlerResult.success_result("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            else:
                await self._send_feedback_error_message(message)
                return HandlerResult.error_result("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç user_id={user_id}: {e}", exc_info=True)
            await self._send_feedback_error_message(message)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    async def _send_empty_feedback_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        text = """
üìù **–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.

–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_feedback_saved_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        text = """
‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!**

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _send_feedback_error_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        text = """
‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è**

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–ø—Ä—è–º—É—é.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="send_feedback")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(text.strip(), reply_markup=keyboard)
    
    async def _notify_admins_about_feedback(self, user_id: int, feedback_text: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.user_service.get_admin_users()
            
            if not admins:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.user_service.get_user_profile(user_id)
            user_name = user_info.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') if user_info else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            username = user_info.get('username') if user_info else None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admin_text = f"""
üìù **–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**

üë§ –û—Ç: {user_name}
üÜî ID: {user_id}
"""
            
            if username:
                admin_text += f"üè∑ Username: @{username}\n"
            
            admin_text += f"""

üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**
{feedback_text}
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
            for admin in admins:
                try:
                    await self.bot.send_message(
                        chat_id=admin['user_id'],
                        text=admin_text.strip()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin['user_id']}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}", exc_info=True)