"""
Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞.
"""

import logging
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from keyboards import create_user_profile_keyboard, create_main_menu_keyboard
from states import BotStates
from ..common.base import BaseCallbackHandler
from ..common.decorators import log_handler_call, user_required
from ..common.types import CallbackResult
from .services import UserService, AvatarService, SettingsService

logger = logging.getLogger(__name__)


class ProfileCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.user_service = UserService()
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile = await self.user_service.get_user_profile(user_id)
            if not profile:
                return CallbackResult.error_result("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = await self._format_profile_text(profile)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            keyboard = await create_user_profile_keyboard(user_id)
            
            await self.edit_safe_message(query.message, profile_text, keyboard)
            
            return CallbackResult.success_result(
                message="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞–Ω",
                answer_text="üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    
    async def _format_profile_text(self, profile: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è."""
        name = profile.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = profile.get('username')
        
        text_parts = [
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å: {name}**",
            ""
        ]
        
        if username:
            text_parts.append(f"üè∑ Username: @{username}")
        
        text_parts.extend([
            f"üÜî ID: {profile['user_id']}",
            "",
            "üí∞ **–ë–∞–ª–∞–Ω—Å:**",
            f"üç™ –ü–µ—á–µ–Ω—å–∫–∏: {profile['generations_left']}",
            f"üé≠ –ê–≤–∞—Ç–∞—Ä—ã: {profile['avatar_left']}",
            ""
        ])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if profile.get('payments_count', 0) > 0:
            text_parts.extend([
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
                f"üí≥ –ü–æ–∫—É–ø–æ–∫: {profile['payments_count']}",
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {profile.get('total_spent', 0):.2f} RUB",
                ""
            ])
        
        # Email
        email = profile.get('email')
        if email:
            text_parts.append(f"üìß Email: {email}")
        else:
            text_parts.append("üìß Email: –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if profile.get('referrals_count', 0) > 0:
            text_parts.extend([
                "",
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {profile['referrals_count']}"
            ])
        
        return "\n".join(text_parts)


class AvatarCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞–º–∏."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.avatar_service = AvatarService()
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞–º–∏."""
        user_id = query.from_user.id
        callback_data = query.data
        
        if callback_data == "my_avatars":
            return await self._show_avatars_list(query, user_id)
        elif callback_data.startswith("select_avatar_"):
            avatar_id = int(callback_data.replace("select_avatar_", ""))
            return await self._select_avatar(query, user_id, avatar_id)
        elif callback_data.startswith("delete_avatar_"):
            avatar_id = int(callback_data.replace("delete_avatar_", ""))
            return await self._confirm_delete_avatar(query, user_id, avatar_id)
        elif callback_data.startswith("confirm_delete_avatar_"):
            avatar_id = int(callback_data.replace("confirm_delete_avatar_", ""))
            return await self._delete_avatar(query, user_id, avatar_id)
        else:
            return CallbackResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤–∞—Ç–∞—Ä–∞")
    
    async def _show_avatars_list(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            avatars = await self.avatar_service.get_user_avatars(user_id)
            active_avatar = await self.avatar_service.get_active_avatar(user_id)
            
            if not avatars:
                await self._show_no_avatars_message(query)
                return CallbackResult.success_result("–ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤
            text = "üé≠ **–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã**\n\n"
            
            keyboard_buttons = []
            
            for avatar in avatars:
                avatar_name = self.avatar_service.get_avatar_display_name(avatar)
                status = self.avatar_service.format_avatar_status(avatar['status'])
                
                is_active = active_avatar and active_avatar['avatar_id'] == avatar['avatar_id']
                active_mark = " üåü" if is_active else ""
                
                text += f"**{avatar_name}**{active_mark}\n"
                text += f"Status: {status}\n"
                if avatar.get('created_at'):
                    text += f"–°–æ–∑–¥–∞–Ω: {avatar['created_at'][:10]}\n"
                text += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                avatar_buttons = []
                
                if avatar['status'] == 'success' and not is_active:
                    avatar_buttons.append(
                        InlineKeyboardButton(
                            text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {avatar_name[:15]}",
                            callback_data=f"select_avatar_{avatar['avatar_id']}"
                        )
                    )
                
                avatar_buttons.append(
                    InlineKeyboardButton(
                        text=f"üóë –£–¥–∞–ª–∏—Ç—å {avatar_name[:15]}",
                        callback_data=f"delete_avatar_{avatar['avatar_id']}"
                    )
                )
                
                keyboard_buttons.append(avatar_buttons)
            
            # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
            keyboard_buttons.extend([
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä", callback_data="create_avatar")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await self.edit_safe_message(query.message, text.strip(), keyboard)
            
            return CallbackResult.success_result("–°–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤")
    
    async def _show_no_avatars_message(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤."""
        text = """
üé≠ **–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã**

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.

–ê–≤–∞—Ç–∞—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö –∏ —Å–∏—Ç—É–∞—Ü–∏—è—Ö.

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω—É–∂–Ω–æ:
‚Ä¢ 3-10 –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ 1 –∞–≤–∞—Ç–∞—Ä –∏–∑ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ 5-10 –º–∏–Ω—É—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="create_avatar")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
    
    async def _select_avatar(self, query: CallbackQuery, user_id: int, avatar_id: int) -> CallbackResult:
        """–í—ã–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä."""
        try:
            success = await self.avatar_service.set_active_avatar(user_id, avatar_id)
            
            if success:
                text = f"""
‚úÖ **–ê–≤–∞—Ç–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º.

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è" ‚Üí "–§–æ—Ç–æ —Å –ª–∏—Ü–æ–º" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate_avatar")],
                    [InlineKeyboardButton(text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")]
                ])
                
                await self.edit_safe_message(query.message, text.strip(), keyboard)
                
                return CallbackResult.success_result(
                    "–ê–≤–∞—Ç–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                    answer_text="‚úÖ –ê–≤–∞—Ç–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
                )
            else:
                return CallbackResult.error_result("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    async def _confirm_delete_avatar(self, query: CallbackQuery, user_id: int, avatar_id: int) -> CallbackResult:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
        try:
            avatars = await self.avatar_service.get_user_avatars(user_id)
            avatar = next((a for a in avatars if a['avatar_id'] == avatar_id), None)
            
            if not avatar:
                return CallbackResult.error_result("–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            avatar_name = self.avatar_service.get_avatar_display_name(avatar)
            
            text = f"""
üóë **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä "{avatar_name}"?

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_avatar_{avatar_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_avatars")
                ]
            ])
            
            await self.edit_safe_message(query.message, text.strip(), keyboard)
            
            return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    async def _delete_avatar(self, query: CallbackQuery, user_id: int, avatar_id: int) -> CallbackResult:
        """–£–¥–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä."""
        try:
            success = await self.avatar_service.delete_avatar(user_id, avatar_id)
            
            if success:
                text = """
‚úÖ **–ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω**

–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await self.edit_safe_message(query.message, text.strip(), keyboard)
                
                return CallbackResult.success_result(
                    "–ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω",
                    answer_text="‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω"
                )
            else:
                return CallbackResult.error_result("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


class SettingsCallbackHandler(BaseCallbackHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    def __init__(self, bot):
        super().__init__(bot)
        self.settings_service = SettingsService()
    
    @log_handler_call
    @user_required
    async def handle(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        user_id = query.from_user.id
        callback_data = query.data
        
        if callback_data == "user_settings":
            return await self._show_settings(query, user_id)
        elif callback_data == "change_email":
            return await self._request_email_change(query, state)
        elif callback_data.startswith("toggle_"):
            setting_name = callback_data.replace("toggle_", "")
            return await self._toggle_setting(query, user_id, setting_name)
        else:
            return CallbackResult.error_result("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def _show_settings(self, query: CallbackQuery, user_id: int) -> CallbackResult:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            settings = await self.settings_service.get_user_settings(user_id)
            profile = await UserService().get_user_profile(user_id)
            
            text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            
            # Email
            email = profile.get('email') if profile else None
            if email:
                text += f"üìß Email: {email}\n"
            else:
                text += "üìß Email: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
            
            text += "\n**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = "‚úÖ" if settings.get('notifications_enabled', True) else "‚ùå"
            text += f"{notifications} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ\n"
            
            email_notifications = "‚úÖ" if settings.get('email_notifications', True) else "‚ùå"
            text += f"{email_notifications} Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            
            text += "\n**–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:**\n"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            quality = settings.get('generation_quality', 'high')
            quality_text = {'low': '–ù–∏–∑–∫–æ–µ', 'medium': '–°—Ä–µ–¥–Ω–µ–µ', 'high': '–í—ã—Å–æ–∫–æ–µ'}.get(quality, quality)
            text += f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n"
            
            default_style = settings.get('default_style', 'realistic')
            text += f"üñº –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_style}\n"
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="change_email")],
                [
                    InlineKeyboardButton(
                        text=f"{'üîï' if settings.get('notifications_enabled', True) else 'üîî'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        callback_data="toggle_notifications_enabled"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{'üìß‚ùå' if settings.get('email_notifications', True) else 'üìß‚úÖ'} Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        callback_data="toggle_email_notifications"
                    )
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await self.edit_safe_message(query.message, text, keyboard)
            
            return CallbackResult.success_result("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def _request_email_change(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ email."""
        text = """
üìß **–ò–∑–º–µ–Ω–µ–Ω–∏–µ email**

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å:

Email –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
‚Ä¢ –í–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_settings")]
        ])
        
        await self.edit_safe_message(query.message, text.strip(), keyboard)
        await state.set_state(BotStates.AWAITING_EMAIL_CHANGE)
        
        return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è email")
    
    async def _toggle_setting(self, query: CallbackQuery, user_id: int, setting_name: str) -> CallbackResult:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
        try:
            current_settings = await self.settings_service.get_user_settings(user_id)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            current_value = current_settings.get(setting_name, True)
            new_settings = {setting_name: not current_value}
            
            success = await self.settings_service.update_user_settings(user_id, new_settings)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                return await self._show_settings(query, user_id)
            else:
                return CallbackResult.error_result("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_name} –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")