"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞.
"""

import logging
from typing import Dict, Any
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from states import BotStates
from ..common.base import BaseDomainHandler
from ..common.types import HandlerResult, CallbackResult
from .callbacks import ProfileCallbackHandler, AvatarCallbackHandler, SettingsCallbackHandler
from .messages import EmailChangeHandler, AvatarPhotosHandler, FeedbackHandler

logger = logging.getLogger(__name__)


class UserDomainHandler(BaseDomainHandler):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –ü—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ê–≤–∞—Ç–∞—Ä–∞–º–∏
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    - –û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    """
    
    def __init__(self, bot):
        super().__init__(bot)
        self.domain_name = "user"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º callback —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.profile_handler = ProfileCallbackHandler(bot)
        self.avatar_handler = AvatarCallbackHandler(bot)
        self.settings_handler = SettingsCallbackHandler(bot)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º message —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.email_change_handler = EmailChangeHandler(bot)
        self.avatar_photos_handler = AvatarPhotosHandler(bot)
        self.feedback_handler = FeedbackHandler(bot)
        
        # –ú–∞–ø–ø–∏–Ω–≥ callback'–æ–≤ –Ω–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.callback_routes = {
            # –ü—Ä–æ—Ñ–∏–ª—å
            'profile': self.profile_handler,
            
            # –ê–≤–∞—Ç–∞—Ä—ã
            'my_avatars': self.avatar_handler,
            'select_avatar_': self.avatar_handler,  # –ü—Ä–µ—Ñ–∏–∫—Å
            'delete_avatar_': self.avatar_handler,  # –ü—Ä–µ—Ñ–∏–∫—Å
            'confirm_delete_avatar_': self.avatar_handler,  # –ü—Ä–µ—Ñ–∏–∫—Å
            'create_avatar': self._handle_create_avatar_callback,
            'confirm_create_avatar': self._handle_confirm_create_avatar,
            'continue_upload': self._handle_continue_upload,
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            'user_settings': self.settings_handler,
            'change_email': self.settings_handler,
            'toggle_': self.settings_handler,  # –ü—Ä–µ—Ñ–∏–∫—Å
            
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            'send_feedback': self._handle_send_feedback_callback,
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ message —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.message_state_routes = {
            BotStates.AWAITING_EMAIL_CHANGE: self.email_change_handler,
            BotStates.UPLOADING_AVATAR_PHOTOS: self.avatar_photos_handler,
            BotStates.AWAITING_FEEDBACK: self.feedback_handler,
        }
    
    async def handle_callback(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞."""
        callback_data = query.data
        
        try:
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if callback_data in self.callback_routes:
                handler = self.callback_routes[callback_data]
                if callable(handler):
                    return await handler(query, state)
                else:
                    return await handler.handle(query, state)
            
            # –ò—â–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
            for prefix, handler in self.callback_routes.items():
                if callback_data.startswith(prefix):
                    if callable(handler):
                        return await handler(query, state)
                    else:
                        return await handler.handle(query, state)
            
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –≤ user –¥–æ–º–µ–Ω–µ: {callback_data}")
            return CallbackResult.error_result(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {callback_data}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback_data}: {e}", exc_info=True)
            return CallbackResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    async def handle_message(self, message: Message, state: FSMContext) -> HandlerResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞."""
        current_state = await state.get_state()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É
            if current_state in self.message_state_routes:
                handler = self.message_state_routes[current_state]
                return await handler.handle(message, state)
            
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return HandlerResult.success_result("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ user –¥–æ–º–µ–Ω–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ user –¥–æ–º–µ–Ω–µ: {e}", exc_info=True)
            return HandlerResult.error_result(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_create_avatar_callback(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
        from keyboards import create_main_menu_keyboard
        from ..generation.services import GenerationService
        
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–≤–∞—Ç–∞—Ä–æ–≤
            generation_service = GenerationService()
            user_resources = await generation_service.get_user_resources(user_id)
            
            if user_resources['avatar_left'] <= 0:
                text = """
‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω—É–∂–µ–Ω 1 –∞–≤–∞—Ç–∞—Ä –∏–∑ –±–∞–ª–∞–Ω—Å–∞.

–ö—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
                """
                
                keyboard = create_main_menu_keyboard()
                await query.message.edit_text(text.strip(), reply_markup=keyboard)
                
                return CallbackResult.success_result(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤",
                    answer_text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤"
                )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
            text = """
üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞**

–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –≤–∞—à –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä?

–ù–∞–ø—Ä–∏–º–µ—Ä: "–†–∞–±–æ—á–∏–π", "–î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π", "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π"

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile")]
            ])
            
            await query.message.edit_text(text.strip(), reply_markup=keyboard)
            await state.set_state(BotStates.AWAITING_AVATAR_NAME)
            
            return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")
    
    async def _handle_confirm_create_avatar(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞."""
        from ..generation.services import GenerationService
        
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            uploaded_photos = state_data.get('uploaded_photos', [])
            avatar_name = state_data.get('avatar_name', '–ú–æ–π –∞–≤–∞—Ç–∞—Ä')
            
            if len(uploaded_photos) < 3:
                return CallbackResult.error_result("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            generation_service = GenerationService()
            avatar_id = await generation_service.create_avatar(
                user_id=user_id,
                avatar_name=avatar_name,
                photos=uploaded_photos
            )
            
            if avatar_id:
                text = f"""
‚úÖ **–ê–≤–∞—Ç–∞—Ä "{avatar_name}" —Å–æ–∑–¥–∞–µ—Ç—Å—è!**

üîÑ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç.

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ –±–æ—Ç
üìß –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await query.message.edit_text(text.strip(), reply_markup=keyboard)
                await state.clear()
                
                return CallbackResult.success_result(
                    f"–ê–≤–∞—Ç–∞—Ä {avatar_name} —Å–æ–∑–¥–∞–µ—Ç—Å—è",
                    answer_text="‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è!"
                )
            else:
                return CallbackResult.error_result("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return CallbackResult.error_result(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
    
    async def _handle_continue_upload(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
        text = """
üì∑ **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.

–ú–∞–∫—Å–∏–º—É–º: 10 —Ñ–æ—Ç–æ
–ú–∏–Ω–∏–º—É–º: 3 —Ñ–æ—Ç–æ
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="profile")]
        ])
        
        await query.message.edit_text(text.strip(), reply_markup=keyboard)
        
        return CallbackResult.success_result("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
    
    async def _handle_send_feedback_callback(self, query: CallbackQuery, state: FSMContext) -> CallbackResult:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        text = """
üìù **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.

–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await query.message.edit_text(text.strip(), reply_markup=keyboard)
        await state.set_state(BotStates.AWAITING_FEEDBACK)
        
        return CallbackResult.success_result("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    
    def get_domain_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ."""
        return {
            'name': self.domain_name,
            'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º, –∞–≤–∞—Ç–∞—Ä–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'callback_routes': list(self.callback_routes.keys()),
            'message_states': list(self.message_state_routes.keys()),
            'handlers': {
                'callbacks': [
                    'ProfileCallbackHandler',
                    'AvatarCallbackHandler', 
                    'SettingsCallbackHandler'
                ],
                'messages': [
                    'EmailChangeHandler',
                    'AvatarPhotosHandler',
                    'FeedbackHandler'
                ]
            }
        }
