# handlers/user_management.py

import asyncio
import logging
import uuid
import re
from states import BotStates
from datetime import datetime
from typing import List, Dict, Optional
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command
from database import (
    check_database_user, get_user_generation_stats, get_user_payments, get_user_trainedmodels,
    get_user_rating_and_registration, get_user_logs, delete_user_activity, block_user_access, is_user_blocked,
    update_user_credits, get_active_trainedmodel, search_users_by_query
)
from config import ADMIN_IDS
from keyboards import create_admin_user_actions_keyboard, create_admin_keyboard
from handlers.utils import (
    escape_message_parts, send_message_with_fallback, truncate_text,
    create_isolated_context, clean_admin_context
)
import aiosqlite
from keyboards import create_main_menu_keyboard

from logger import get_logger
logger = get_logger('main')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_management_router = Router()

async def show_user_actions(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        await state.clear()
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    callback_data = query.data
    logger.debug(f"show_user_actions: user_id={user_id}, callback_data={callback_data}")

    try:
        parts = callback_data.split("_")
        if len(parts) < 3 or parts[0] != "user" or parts[1] != "actions":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[2])
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(0, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"
    username_display = f"(@{u_name})" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
    email_display = email_val or "–ù–µ —É–∫–∞–∑–∞–Ω"

    text_parts = [
        "üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n",
        f"–ò–º—è: {display_name} {username_display}\n",
        f"ID: `{target_user_id}`\n",
        f"Email: {email_display}\n",
        "\nüí∞ –ë–∞–ª–∞–Ω—Å:\n",
        f"  ‚Ä¢ –ü–µ—á–µ–Ω—å–∫–∏: `{g_left}`\n",
        f"  ‚Ä¢ –ê–≤–∞—Ç–∞—Ä—ã: `{a_left}`\n"
    ]

    gen_stats = await get_user_generation_stats(target_user_id)
    if gen_stats:
        text_parts.append("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n")
        type_names = {
            'with_avatar': '–§–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
            'photo_to_photo': '–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É',
            'ai_video_v2_1': 'AI-–≤–∏–¥–µ–æ (Kling 2.1)',
            'train_flux': '–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤',
            'prompt_assist': '–ü–æ–º–æ—â—å —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏'
        }
        for gen_type, count in gen_stats.items():
            text_parts.append(f"  ‚Ä¢ {type_names.get(gen_type, gen_type)}: `{count}`\n")

    avatars = await get_user_trainedmodels(target_user_id)
    if avatars:
        text_parts.append(f"\nüé≠ –ê–≤–∞—Ç–∞—Ä—ã ({len(avatars)}):\n")
        for avatar in avatars[:3]:
            if len(avatar) >= 9:
                avatar_id, _, _, status, _, _, _, _, avatar_name = avatar[:9]
                name = avatar_name or f"–ê–≤–∞—Ç–∞—Ä {avatar_id}"
                status_icon = "‚úÖ" if status == "success" else "‚è≥" if status in ["pending", "starting", "processing"] else "‚ùå"
                text_parts.append(f"  ‚Ä¢ {name}: {status_icon} {status}\n")
        if len(avatars) > 3:
            text_parts.append(f"  ...–∏ –µ—â–µ {len(avatars) - 3}\n")

    payments = await get_user_payments(target_user_id)
    if payments:
        total_spent = sum(p[2] for p in payments if p[2])
        text_parts.append(f"\nüí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π ({len(payments)}):\n")
        text_parts.append(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: `{total_spent:.2f}` RUB\n")
        for _, plan, amount, p_date in payments[:3]:
            date_str = datetime.strptime(str(p_date).split('.')[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y') if p_date else "N/A"
            text_parts.append(f"  ‚Ä¢ `{date_str}`: {plan.capitalize() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'} - `{amount:.2f}` RUB\n")

    text_parts.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"show_user_actions: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

    is_blocked = await is_user_blocked(target_user_id)
    keyboard_buttons = await create_admin_user_actions_keyboard(target_user_id, is_blocked)

    user_data = await state.get_data()
    admin_view_source = user_data.get('admin_view_source', 'admin_stats')
    back_button_text = "üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    back_button_callback = "admin_panel"
    if admin_view_source == 'admin_stats':
        back_button_text = "üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
        back_button_callback = "admin_stats"
    elif admin_view_source == 'admin_search_user':
        back_button_text = "üîô –ö –ø–æ–∏—Å–∫—É"
        back_button_callback = "admin_search_user"

    buttons_list = keyboard_buttons.inline_keyboard
    buttons_list.append([InlineKeyboardButton(text=back_button_text, callback_data=back_button_callback)])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons_list)

    await send_message_with_fallback(
        query.bot, user_id, text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id, target_user_id=target_user_id)
    await query.answer()
    logger.debug(f"show_user_actions: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")

async def show_user_profile_admin(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"
    username_display = f"(@{u_name})" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
    email_display = email_val or "–ù–µ —É–∫–∞–∑–∞–Ω"

    active_avatar_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"
    if act_avatar_id:
        active_model_data = await get_active_trainedmodel(target_user_id)
        if active_model_data and active_model_data[3] == 'success':
            active_avatar_name = active_model_data[8] or f"–ê–≤–∞—Ç–∞—Ä {act_avatar_id}"

    avg_rating, rating_count, registration_date = await get_user_rating_and_registration(target_user_id)
    rating_text = f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ({rating_count} –æ—Ü–µ–Ω–æ–∫)" if avg_rating else "‚≠ê –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    registration_text = f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}" if registration_date else "üìÖ –ù–µ —É–∫–∞–∑–∞–Ω–∞"

    payments = await get_user_payments(target_user_id)
    payments_history = "\n_–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫._"
    if payments:
        payments_history = "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n"
        for _, plan, amount, p_date in payments[:3]:
            p_date_formatted = datetime.strptime(str(p_date).split('.')[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M') if p_date else "N/A"
            payments_history += f"  ‚Ä¢ {plan.capitalize() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'} ({amount:.2f} RUB) - {p_date_formatted}\n"

    text = escape_message_parts(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {display_name} {username_display} (ID: `{target_user_id}`)\n\n",
        f"üí∞ –ë–∞–ª–∞–Ω—Å:\n  üì∏ –ü–µ—á–µ–Ω—å–∫–∏: `{g_left}`\n  üë§ –ê–≤–∞—Ç–∞—Ä—ã: `{a_left}`\n\n",
        f"üåü –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä: {active_avatar_name}\n",
        f"üìß Email: {email_display}\n",
        f"{rating_text}\n",
        f"{registration_text}\n",
        f"üõí –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {'–î–∞' if f_purchase_val else '–ù–µ—Ç'}\n",
        f"{payments_history}",
        version=2
    )
    logger.debug(f"show_user_profile_admin: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id, target_user_id=target_user_id)
    await query.answer()

async def show_user_avatars_admin(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    display_name = target_user_info[8] or target_user_info[3] or f"ID {target_user_id}"
    text_parts = [f"üñºÔ∏è –ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name} (ID: `{target_user_id}`)\n\n"]

    avatars = await get_user_trainedmodels(target_user_id)
    if not avatars:
        text_parts.append("_–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤._")
    else:
        for avatar in avatars:
            if len(avatar) < 9:
                logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id={target_user_id}: {avatar}")
                continue
            avatar_id, model_id, model_version, status, prediction_id, trigger_word, _, _, avatar_name = avatar[:9]
            name = avatar_name or f"–ê–≤–∞—Ç–∞—Ä {avatar_id}"
            status_icon = "‚úÖ" if status == "success" else "‚è≥" if status in ["pending", "starting", "processing"] else "‚ùå"
            text_parts.extend([
                f"{name} (ID: {avatar_id})\n",
                f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_icon} {status or 'N/A'}\n",
                f"  ‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä: `{trigger_word}`\n"
            ])
            if model_id:
                text_parts.append(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: `{model_id}`\n")
            if model_version:
                text_parts.append(f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: `{model_version}`\n")
            if prediction_id:
                text_parts.append(f"  ‚Ä¢ Training ID: `{prediction_id}`\n")
            text_parts.append("\n")

    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"show_user_avatars_admin: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id, target_user_id=target_user_id)
    await query.answer()

async def show_user_logs(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        logs = await get_user_logs(target_user_id, limit=50)
        if not logs:
            text = escape_message_parts(
                f"üìú –õ–æ–≥–∏ –¥–ª—è ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                version=2
            )
            await state.clear()
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        text_parts = [f"üìú –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n\n"]
        for log in logs:
            timestamp, action_type, details = log
            timestamp_str = datetime.strptime(str(timestamp).split('.')[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            text_parts.append(f"‚Ä¢ `{timestamp_str}`: {action_type} - {truncate_text(str(details), 50)}\n")

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        MAX_MESSAGE_LENGTH = 4000  # –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ Telegram (4096)
        messages = []
        current_message = ""
        for part in text_parts:
            if len(current_message) + len(part) < MAX_MESSAGE_LENGTH:
                current_message += part
            else:
                messages.append(current_message)
                current_message = part
        if current_message:
            messages.append(current_message)

        logger.debug(f"show_user_logs: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={target_user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, message_text in enumerate(messages):
            text = escape_message_parts(message_text, version=2)
            logger.debug(f"show_user_logs: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(messages)}, –¥–ª–∏–Ω–∞={len(text)}")
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]) if i == len(messages) - 1 else None
            await send_message_with_fallback(
                query.bot, user_id, text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –¥–ª—è ID {target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤.",
            " –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
            version=2
        )
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id, target_user_id=target_user_id)
    await query.answer()

async def change_balance_admin(query: CallbackQuery, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    logger.debug(f"change_balance_admin: user_id={user_id}, callback_data={callback_data}")

    try:
        parts = callback_data.split("_")
        if len(parts) < 3 or parts[0] != "change" or parts[1] != "balance":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[2])
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(0, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    username = target_user_info[3] or "–ù–µ—Ç"
    first_name = target_user_info[8] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    await state.clear()
    await state.update_data(awaiting_balance_change=True, target_user_id=target_user_id, user_id=user_id)
    text = escape_message_parts(
        f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} ({first_name}, ID `{target_user_id}`)\n\n",
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n",
        "`+10 —Ñ–æ—Ç–æ` –∏–ª–∏ `-1 –∞–≤–∞—Ç–∞—Ä`\n",
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
        version=2
    )
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BotStates.AWAITING_BALANCE_CHANGE)
    await query.answer()

async def handle_balance_change_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    user_id = message.from_user.id
    user_data = await state.get_data()
    if not user_data.get('awaiting_balance_change'):
        logger.warning(f"handle_balance_change_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_balance_change –¥–ª—è user_id={user_id}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.",
            version=2
        )
        await message.answer(
            text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_id = user_data.get('target_user_id')
    await state.update_data(awaiting_balance_change=None, target_user_id=None, user_id=user_id)

    if not target_user_id:
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.",
            version=2
        )
        await message.answer(
            text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    input_text = message.text.strip()
    try:
        operation = 'increment' if input_text.startswith('+') else 'decrement'
        amount = int(input_text[1:].split()[0])
        resource = input_text.split()[1].lower()
        if resource not in ['—Ñ–æ—Ç–æ', '–∞–≤–∞—Ç–∞—Ä–∞', '–∞–≤–∞—Ç–∞—Ä']:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞")

        action = f"{operation}_{'photo' if resource == '—Ñ–æ—Ç–æ' else 'avatar'}"
        success = await update_user_credits(target_user_id, action, amount)
        user_info = await check_database_user(target_user_id)
        if success and user_info:
            text = escape_message_parts(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å ID `{target_user_id}` –∏–∑–º–µ–Ω–µ–Ω: {input_text}\n",
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{user_info[0]}` –ø–µ—á–µ–Ω–µ–∫, `{user_info[1]}` –∞–≤–∞—Ç–∞—Ä–æ–≤",
                version=2
            )
        else:
            text = escape_message_parts(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ID `{target_user_id}`.",
                version=2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.",
            " –ü—Ä–∏–º–µ—Ä: `+10 —Ñ–æ—Ç–æ`",
            version=2
        )

    await state.clear()
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
    ])
    await message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

async def delete_user_admin(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    text = escape_message_parts(
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n",
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`?\n",
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        version=2
    )
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{target_user_id}")],
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
            ]
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)
    await query.answer()

async def confirm_delete_user(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        target_user_info = await check_database_user(target_user_id)
        if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
            text = escape_message_parts(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                version=2
            )
            await state.clear()
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        try:
            await query.bot.send_message(
                chat_id=target_user_id,
                text=escape_message_parts(
                    "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    " –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                    version=2
                ),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={target_user_id}")
        except Exception as e_notify:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e_notify}")

        success = await delete_user_activity(target_user_id)
        if success:
            text = escape_message_parts(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                version=2
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={target_user_id} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
        else:
            text = escape_message_parts(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
                version=2
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}")

        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}.",
            version=2
        )
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)
    await query.answer()

async def block_user_admin(query: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    logger.debug(f"block_user_admin: user_id={user_id}, callback_data={callback_data}")

    try:
        parts = callback_data.split("_")
        if len(parts) < 4 or parts[0] != "block" or parts[1] != "user":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[2])
        action = parts[3]
        block = (action == "block")
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(0, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    is_already_blocked = await is_user_blocked(target_user_id)
    if block and is_already_blocked:
        await state.clear()
        text = escape_message_parts(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return
    elif not block and not is_already_blocked:
        await state.clear()
        text = escape_message_parts(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if block else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    action_emoji = "üîí" if block else "üîì"

    await state.clear()
    await state.update_data(block_action={'target_user_id': target_user_id, 'block': block}, user_id=user_id)

    if block:
        await state.update_data(awaiting_block_reason={'target_user_id': target_user_id})
        text = escape_message_parts(
            f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.\n",
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'.\n",
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
            version=2
        )
        keyboard = [
            [InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"confirm_block_user_{target_user_id}_block_no_reason")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BLOCK_REASON)
    else:
        text = escape_message_parts(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`?",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"{action_emoji} –î–∞, {action_text}", callback_data=f"confirm_block_user_{target_user_id}_unblock")],
                    [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
                ]
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await query.answer()

async def confirm_block_user(query: CallbackQuery, state: FSMContext, bot: Bot, is_fake_query: bool = False) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        if not is_fake_query:
            await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    user_data = await state.get_data()
    block_action = user_data.get('block_action', {})
    target_user_id = block_action.get('target_user_id')
    block = block_action.get('block', True)
    block_reason = block_action.get('block_reason', "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")

    if query.data:
        callback_data = query.data
        logger.debug(f"confirm_block_user: user_id={user_id}, callback_data={callback_data}")
        try:
            parts = callback_data.split("_")
            if len(parts) < 4 or parts[0] != "confirm" or parts[1] != "block" or parts[2] != "user":
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            target_user_id = int(parts[3])
            action = parts[4]
            if action == "block" and len(parts) > 5 and parts[5] == "no":
                block_reason = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
            elif action == "unblock":
                block = False
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
            text = escape_message_parts(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                version=2
            )
            await send_message_with_fallback(
                bot, user_id, text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            if not is_fake_query:
                await query.answer()
            return

    if not target_user_id:
        logger.error(f"confirm_block_user: target_user_id –Ω–µ —É–∫–∞–∑–∞–Ω, block_action={block_action}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.",
            version=2
        )
        await send_message_with_fallback(
            bot, user_id, text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        if not is_fake_query:
            await query.answer()
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        logger.error(f"confirm_block_user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        if not is_fake_query:
            await query.answer()
        return

    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {'–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞' if block else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞'} –¥–ª—è user_id={target_user_id}, –ø—Ä–∏—á–∏–Ω–∞={block_reason if block else 'N/A'}")
        success = await block_user_access(target_user_id, block, block_reason if block else None)
        if success:
            action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if block else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            action_emoji = "üîí" if block else "üîì"
            text_parts = [
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` {action_text}."
            ]
            if block:
                text_parts.append(f"–ü—Ä–∏—á–∏–Ω–∞: {block_reason}")
            text = escape_message_parts(*text_parts, version=2)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={target_user_id} {action_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
            try:
                await bot.send_message(
                    chat_id=target_user_id,
                    text=escape_message_parts(
                        f"{action_emoji} –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª {action_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n",
                        f"{'–ü—Ä–∏—á–∏–Ω–∞: ' + block_reason if block else ''}",
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                        version=2
                    ),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e_notify:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e_notify}")

        else:
            text = escape_message_parts(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if block else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
                version=2
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if block else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}")

        await state.clear()
        await send_message_with_fallback(
            bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {'–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ' if block else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {'–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ' if block else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}.",
            version=2
        )
        await state.clear()
        await send_message_with_fallback(
            bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    if not is_fake_query:
        await query.answer()
    await state.update_data(user_id=user_id)

async def search_users_admin(query: CallbackQuery, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID, –∏–º–µ–Ω–∏ –∏–ª–∏ email."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    await state.clear()
    await state.update_data(awaiting_user_search=True, admin_view_source='admin_search_user', user_id=user_id)
    text = escape_message_parts(
        "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n",
        "–í–≤–µ–¥–∏—Ç–µ ID, –∏–º—è, username (—Å @) –∏–ª–∏ email –¥–ª—è –ø–æ–∏—Å–∫–∞.\n",
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
        version=2
    )
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    await send_message_with_fallback(
        query.bot, user_id, text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è user_id={user_id}")
    await state.set_state(BotStates.AWAITING_USER_SEARCH)

async def handle_user_search_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = message.from_user.id
    logger.debug(f"handle_user_search_input –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, —Ç–µ–∫—Å—Ç='{message.text}'")

    user_data = await state.get_data()
    if not user_data.get('awaiting_user_search'):
        logger.warning(f"handle_user_search_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_user_search –¥–ª—è user_id={user_id}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.",
            version=2
        )
        await message.answer(
            text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    await state.update_data(awaiting_user_search=None, user_id=user_id)
    search_query = message.text.strip()
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è user_id={user_id}, –∑–∞–ø—Ä–æ—Å='{search_query}'")

    try:
        users: List[Tuple] = await search_users_by_query(search_query)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{search_query}': –Ω–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {[f'ID={u[0]}, username={u[1]}, first_name={u[2]}' for u in users]}")

        if not users:
            text = escape_message_parts(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                version=2
            )
            await state.update_data(admin_view_source='admin_search_user', user_id=user_id)
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search_user")],
                    [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ]
            )
            await message.answer(
                text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.debug(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è user_id={user_id}")
            return

        text_parts = [f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_query}' (–Ω–∞–π–¥–µ–Ω–æ: {len(users)}):\n\n"]
        keyboard_buttons = []
        for user in users[:10]:
            if not isinstance(user, tuple) or len(user) < 5:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ —Å 5 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø–æ–ª—É—á–µ–Ω {type(user)}, –¥–∞–Ω–Ω—ã–µ={user}")
                continue

            u_id, u_name, f_name, generations_left, avatar_left = user
            u_name = u_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            f_name = f_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            name_display = f_name if f_name != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else u_name
            text_parts.append(
                f"üë§ {name_display} (@{u_name}) (ID: `{u_id}`)\n"
                f"üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {generations_left} | üñº –ê–≤–∞—Ç–∞—Ä–æ–≤: {avatar_left}\n"
            )
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            button_text = f"üë§ {name_display} (ID: {u_id})"
            if len(button_text) > 64:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                button_text = f"üë§ {name_display[:20]}... (ID: {u_id})"
            keyboard_buttons.append([
                InlineKeyboardButton(text=button_text, callback_data=f"user_actions_{u_id}")
            ])

        if len(users) > 10:
            text_parts.append(f"\n...–∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

        text = escape_message_parts(*text_parts, version=2)
        logger.debug(f"handle_user_search_input: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

        keyboard_buttons.append([InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search_user")])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await state.update_data(admin_view_source='admin_search_user', user_id=user_id)
        await message.answer(
            text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è user_id={user_id}, –Ω–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è user_id={user_id}, –∑–∞–ø—Ä–æ—Å='{search_query}': {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            version=2
        )
        await state.update_data(admin_view_source='admin_search_user', user_id=user_id)
        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search_user")],
                [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
        )
        await message.answer(
            text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.debug(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –¥–ª—è user_id={user_id}")

async def confirm_reset_avatar(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        success = await update_user_credits(target_user_id, action="set_active_avatar", amount=0)
        if success:
            text = escape_message_parts(
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` —Å–±—Ä–æ—à–µ–Ω.",
                version=2
            )
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id} —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
            try:
                await query.bot.send_message(
                    chat_id=target_user_id,
                    text=escape_message_parts(
                        "‚ö†Ô∏è –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                        " –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                        version=2
                    ),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e_notify:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ —Å–±—Ä–æ—Å–µ –∞–≤–∞—Ç–∞—Ä–∞: {e_notify}")
        else:
            text = escape_message_parts(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
                version=2
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}")

        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤–∞—Ç–∞—Ä–∞ ID `{target_user_id}`: {str(e)}.",
            version=2
        )
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.update_data(user_id=user_id)
    await query.answer()

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    await state.clear()
    text = escape_message_parts("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", version=2)
    reply_markup = await create_admin_keyboard() if user_id in ADMIN_IDS else await create_main_menu_keyboard(user_id)
    await message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(user_id=user_id)

async def handle_block_reason_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    user_id = message.from_user.id
    bot = message.bot
    logger.debug(f"handle_block_reason_input: user_id={user_id}, message_text='{message.text}'")

    if user_id not in ADMIN_IDS:
        logger.warning(f"handle_block_reason_input: user_id={user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    if not user_data.get('awaiting_block_reason'):
        logger.warning(f"handle_block_reason_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_block_reason –¥–ª—è user_id={user_id}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.",
            version=2
        )
        await message.answer(
            text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_id = user_data['awaiting_block_reason']['target_user_id']
    await state.update_data(awaiting_block_reason=None, user_id=user_id)

    if not message.text:
        logger.warning(f"handle_block_reason_input: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id={user_id}")
        text = escape_message_parts(
            f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'.\n",
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
            version=2
        )
        keyboard = [
            [InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"confirm_block_user_{target_user_id}_block_no_reason")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]
        await state.update_data(awaiting_block_reason={'target_user_id': target_user_id}, user_id=user_id)
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BLOCK_REASON)
        return

    reason = message.text.strip()
    if len(reason) > 255:
        logger.warning(f"handle_block_reason_input: –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(reason)} —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è user_id={user_id}")
        text = escape_message_parts(
            f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.\n",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'.\n",
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
            version=2
        )
        keyboard = [
            [InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"confirm_block_user_{target_user_id}_block_no_reason")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]
        await state.update_data(awaiting_block_reason={'target_user_id': target_user_id}, user_id=user_id)
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BLOCK_REASON)
        return

    await state.update_data(block_action={
        'target_user_id': target_user_id,
        'block': True,
        'block_reason': reason
    }, user_id=user_id)
    logger.info(f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è user_id={target_user_id}: {reason}")

    try:
        fake_query = CallbackQuery(
            id=str(uuid.uuid4()),
            from_user=message.from_user,
            chat_instance=str(uuid.uuid4()),
            message=message,
            data=f"confirm_block_user_{target_user_id}_block"
        )
        fake_query = fake_query.as_(bot)
        await confirm_block_user(fake_query, state, bot, is_fake_query=True)
        logger.debug(f"confirm_block_user –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ confirm_block_user –¥–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}.",
            version=2
        )
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@user_management_router.callback_query(
    lambda c: c.data and c.data.startswith((
        'user_actions_', 'view_user_profile_', 'user_avatars_', 'user_logs_', 'change_balance_',
        'delete_user_', 'confirm_delete_user_', 'block_user_', 'confirm_block_user_', 'payments_',
        'visualize_', 'reset_avatar_', 'add_photos_to_user_', 'add_avatar_to_user_', 'chat_with_user_',
        'give_subscription_', 'activity_'
    ))
)
async def user_management_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    callback_data = query.data
    logger.debug(f"user_management_callback_handler: user_id={query.from_user.id}, callback_data={callback_data}")
    try:
        if callback_data.startswith("user_actions_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è user_actions –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            await show_user_actions(query, state)
        elif callback_data.startswith("view_user_profile_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è view_user_profile –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_profile_admin(query, state, target_user_id)
        elif callback_data.startswith("user_avatars_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è user_avatars –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_avatars_admin(query, state, target_user_id)
        elif callback_data.startswith("change_balance_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è change_balance –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            await change_balance_admin(query, state)
        elif callback_data.startswith("user_logs_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è user_logs –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_logs(query, state, target_user_id)
        elif callback_data.startswith("delete_user_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è delete_user –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            target_user_id = int(callback_data.split("_")[-1])
            await delete_user_admin(query, state, target_user_id)
        elif callback_data.startswith("confirm_delete_user_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è confirm_delete_user –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            target_user_id = int(callback_data.split("_")[-1])
            await confirm_delete_user(query, state, target_user_id)
        elif callback_data.startswith("block_user_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è block_user –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            await block_user_admin(query, state)
        elif callback_data.startswith("confirm_block_user_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è confirm_block_user –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            await confirm_block_user(query, state, query.bot, is_fake_query=False)
        elif callback_data.startswith("reset_avatar_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è reset_avatar –¥–ª—è user_id={query.from_user.id}, callback_data={callback_data}")
            target_user_id = int(callback_data.split("_")[-1])
            await confirm_reset_avatar(query, state, target_user_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data} –¥–ª—è user_id={query.from_user.id}")
            text = escape_message_parts(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                version=2
            )
            await query.message.answer(
                text,
                reply_markup=await create_admin_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_management_callback_handler: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            version=2
        )
        await query.message.answer(
            text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
