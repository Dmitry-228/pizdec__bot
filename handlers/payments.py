# handlers/payments.py

import asyncio
import logging
import os
import uuid
import pytz
from datetime import datetime, timedelta
from decimal import Decimal
from typing import List, Dict
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command
from database import get_payments_by_date, get_generation_cost_log, get_registrations_by_date
from config import ADMIN_IDS, DATABASE_PATH
from generation_config import IMAGE_GENERATION_MODELS
from excel_utils import create_payments_excel, create_registrations_excel
from keyboards import create_admin_keyboard
from handlers.utils import safe_escape_markdown as escape_md, send_message_with_fallback

from logger import get_logger
logger = get_logger('payments')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
payments_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ Markdown V2
def escape_md_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è ParseMode.MARKDOWN_V2."""
    characters_to_escape = r'_[]()*~`#+-=|{}!.>'
    for char in characters_to_escape:
        text = text.replace(char, f'\\{char}')
    return text

async def show_payments_menu(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        msk_tz = pytz.timezone('Europe/Moscow')
        today = datetime.now(msk_tz).strftime('%Y-%m-%d')
        yesterday = (datetime.now(msk_tz) - timedelta(days=1)).strftime('%Y-%m-%d')
        last_7_days_start = (datetime.now(msk_tz) - timedelta(days=7)).strftime('%Y-%m-%d')
        last_30_days_start = (datetime.now(msk_tz) - timedelta(days=30)).strftime('%Y-%m-%d')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
        for date_str in [today, yesterday, last_7_days_start, last_30_days_start]:
            datetime.strptime(date_str, '%Y-%m-%d')

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –§–æ—Ä–º–∞—Ç –¥–∞—Ç –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–Ω—É—Ç—Ä–∏ ` ` –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω
        text = (
            escape_md("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n") +
            "`YYYY-MM-DD` (–¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è)\n–∏–ª–∏\n`YYYY-MM-DD YYYY-MM-DD` (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)\\.\n\n" +
            escape_md_v2("–ü—Ä–∏–º–µ—Ä:\n") +
            f"`{today}` –∏–ª–∏ `{last_30_days_start} {today}`"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"payments_date_{today}_{today}")],
            [InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data=f"payments_date_{yesterday}_{yesterday}")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data=f"payments_date_{last_7_days_start}_{today}")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data=f"payments_date_{last_30_days_start}_{today}")],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="payments_manual_date")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])

        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payments_menu –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_payments_date(query: CallbackQuery, state: FSMContext, start_date: str, end_date: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        datetime.strptime(start_date, '%Y-%m-%d')
        datetime.strptime(end_date, '%Y-%m-%d')
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –æ—Ç user_id={user_id}: {start_date} - {end_date}")
        text = escape_md_v2("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-26\\.")
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_keyboard(user_id), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        payments = await get_payments_by_date(start_date, end_date)
        registrations = await get_registrations_by_date(start_date, end_date)

        payments_file_path = None
        registrations_file_path = None

        if payments:
            payments_filename = f"payments_{start_date}_{end_date}_{uuid.uuid4().hex[:8]}.xlsx"
            payments_file_path = create_payments_excel(payments, payments_filename, start_date, end_date)
        else:
            logger.info(f"–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        if registrations:
            registrations_filename = f"registrations_{start_date}_{end_date}_{uuid.uuid4().hex[:8]}.xlsx"
            registrations_file_path = create_registrations_excel(
                registrations, registrations_filename, start_date if start_date == end_date else f"{start_date} - {end_date}"
            )
        else:
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        total_payments = len(payments)
        total_amount = sum(p[2] for p in payments if p[2]) if payments else 0
        total_registrations = len(registrations)

        period_text = start_date if start_date == end_date else f"{start_date} - {end_date}"
        text = (
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_text} (MSK)\n\n" +
            escape_md_v2("üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n") +
            f"üî¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n" +
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} RUB\n\n" +
            escape_md_v2("üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n") +
            f"üî¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_registrations}\n\n" +
            escape_md("üìä –î–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö\\.")
        )

        if not payments and not registrations:
            text = f"üö´ –ó–∞ {period_text} (MSK) –Ω–µ—Ç –Ω–∏ –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∏ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\\."
            await send_message_with_fallback(
                query.bot, user_id, escape_md_v2(text),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_payments")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_payments")],
                [InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        if payments_file_path and os.path.exists(payments_file_path):
            document = FSInputFile(path=payments_file_path, filename=payments_filename)
            await query.bot.send_document(
                chat_id=user_id,
                document=document,
                caption=escape_md_v2("–û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∑–∞ ") + f"{period_text} (MSK)"
            )
            os.remove(payments_file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π {payments_file_path} —É–¥–∞–ª–µ–Ω.")

        if registrations_file_path and os.path.exists(registrations_file_path):
            document = FSInputFile(path=registrations_file_path, filename=registrations_filename)
            await query.bot.send_document(
                chat_id=user_id,
                document=document,
                caption=escape_md_v2("–û—Ç—á–µ—Ç –ø–æ –Ω–æ–≤—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º –∑–∞ ") + f"{period_text} (MSK)"
            )
            os.remove(registrations_file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π {registrations_file_path} —É–¥–∞–ª–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ {start_date} - {end_date} –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_md_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏\\.")
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_keyboard(user_id), parse_mode=ParseMode.MARKDOWN_V2
        )
        for file_path in [payments_file_path, registrations_file_path]:
            if file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.")
                except Exception as e_remove:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e_remove}")

async def handle_manual_date_input(query: CallbackQuery, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    await state.update_data(awaiting_payments_date=True)
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –§–æ—Ä–º–∞—Ç –¥–∞—Ç –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–Ω—É—Ç—Ä–∏ ` ` –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω
    text = (
        escape_md("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n") +
                    "`YYYY-MM-DD` (–¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è)\n–∏–ª–∏\n`YYYY-MM-DD YYYY-MM-DD` (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)\\.\n\n" +
                  escape_md("–ü—Ä–∏–º–µ—Ä:\n`2025-05-26` –∏–ª–∏ `2025-05-01 2025-05-26`\n\n"
                       "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\\.")
    )

    reply_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_payments")]])

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_payments_date_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
    user_id = message.from_user.id
    logger.debug(f"handle_payments_date_input: user_id={user_id}")
    user_data = await state.get_data()
    if not user_data.get('awaiting_payments_date'):
        logger.warning(f"handle_payments_date_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_payments_date –¥–ª—è user_id={user_id}")
        await state.clear()
        return

    await state.update_data(awaiting_payments_date=None)
    text = message.text.strip()

    try:
        dates = text.split()
        if len(dates) == 1:
            start_date = end_date = dates[0]
        elif len(dates) == 2:
            start_date, end_date = dates
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç.")

        await handle_payments_date(
            CallbackQuery(query_id=None, from_user=message.from_user, message=message, data=None, bot=message.bot),
            state, start_date, end_date
        )

    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –æ—Ç user_id={user_id}: {text}, error: {e}")
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –§–æ—Ä–º–∞—Ç –¥–∞—Ç –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–Ω—É—Ç—Ä–∏ ` ` –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω
        text = (
            escape_md_v2("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ") +
            "`YYYY-MM-DD` –∏–ª–∏ `YYYY-MM-DD YYYY-MM-DD`\\. " +
            escape_md_v2("–ü—Ä–∏–º–µ—Ä: `2025-05-26` –∏–ª–∏ `2025-05-01 2025-05-26`\\.")
        )
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_payments")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    await state.clear()

async def show_replicate_costs(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ Replicate."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.message.answer(
            escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤\\."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        log_entries_all_time = await get_generation_cost_log()
        msk_tz = pytz.timezone('Europe/Moscow')
        thirty_days_ago = (datetime.now(msk_tz) - timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
        log_entries_30_days = await get_generation_cost_log(start_date_str=thirty_days_ago)

        total_cost_all_time = Decimal(0)
        costs_by_model_all_time = {}
        for entry in log_entries_all_time:
            model_id, _, cost, _ = entry
            cost_decimal = Decimal(str(cost)) if cost is not None else Decimal(0)
            total_cost_all_time += cost_decimal
            key = model_id if model_id else "unknown_model_id"
            costs_by_model_all_time[key] = costs_by_model_all_time.get(key, Decimal(0)) + cost_decimal

        total_cost_30_days = Decimal(0)
        costs_by_model_30_days = {}
        for entry in log_entries_30_days:
            model_id, _, cost, _ = entry
            cost_decimal = Decimal(str(cost)) if cost is not None else Decimal(0)
            total_cost_30_days += cost_decimal
            key = model_id if model_id else "unknown_model_id"
            costs_by_model_30_days[key] = costs_by_model_30_days.get(key, Decimal(0)) + cost_decimal

        text = escape_md_v2("üí∞ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ Replicate (USD):\n\n")
        text += f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n  –û–±—â–∞—è —Å—É–º–º–∞: ${total_cost_all_time:.4f}\n"
        if costs_by_model_all_time:
            text += escape_md_v2("  –ü–æ –º–æ–¥–µ–ª—è–º:\n")
            for model_id, cost in costs_by_model_all_time.items():
                model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                if model_id and model_id != "unknown_model_id":
                    model_name = next(
                        (m_data.get('name', model_id) for _, m_data in IMAGE_GENERATION_MODELS.items() if m_data.get('id') == model_id),
                        model_id
                    )
                elif model_id == "unknown_model_id":
                    model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –Ω–µ –∑–∞–ø–∏—Å–∞–Ω)"
                text += f"    ‚Ä¢ {model_name}: ${cost:.4f}\n"

        text += f"\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n  –û–±—â–∞—è —Å—É–º–º–∞: ${total_cost_30_days:.4f}\n"
        if costs_by_model_30_days:
            text += escape_md_v2("  –ü–æ –º–æ–¥–µ–ª—è–º:\n")
            for model_id, cost in costs_by_model_30_days.items():
                model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                if model_id and model_id != "unknown_model_id":
                    model_name = next(
                        (m_data.get('name', model_id) for _, m_data in IMAGE_GENERATION_MODELS.items() if m_data.get('id') == model_id),
                        model_id
                    )
                elif model_id == "unknown_model_id":
                    model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –Ω–µ –∑–∞–ø–∏—Å–∞–Ω)"
                text += f"    ‚Ä¢ {model_name}: ${cost:.4f}\n"

        text += escape_md_v2("\n_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏\\._")

        reply_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])

        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ Replicate: {e}", exc_info=True)
        text = escape_md_v2("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏\\.")
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_keyboard(user_id), parse_mode=ParseMode.MARKDOWN_V2
        )

async def cancel_payments(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤–≤–æ–¥–∞ –¥–∞—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π."""
    user_id = message.from_user.id
    await state.update_data(awaiting_payments_date=None)
    await message.answer(
        escape_md_v2("‚úÖ –í–≤–æ–¥ –¥–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω\\."),
        reply_markup=await create_admin_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–í–≤–æ–¥ –¥–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è user_id={user_id}")
    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@payments_router.callback_query(
    lambda c: c.data and c.data.startswith("payments_date_") or c.data in ["payments_manual_date", "admin_payments"]
)
async def payments_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    callback_data = query.data
    logger.debug(f"payments_callback_handler: user_id={query.from_user.id}, callback_data={callback_data}")
    try:
        if callback_data.startswith("payments_date_"):
            parts = callback_data.split("_")
            start_date, end_date = parts[2], parts[3]
            await handle_payments_date(query, state, start_date, end_date)
        elif callback_data == "payments_manual_date":
            await handle_manual_date_input(query, state)
        elif callback_data == "admin_payments":
            await show_payments_menu(query, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ payments_callback_handler: {e}", exc_info=True)
        await query.message.answer(
            escape_md_v2("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\."),
            reply_markup=await create_admin_keyboard(query.from_user.id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
