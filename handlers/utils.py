import re
from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter, TelegramNetworkError, TelegramForbiddenError
from aiogram.enums import ParseMode
import logging
import tenacity
from aiogram.fsm.context import FSMContext
import uuid
import copy
from typing import Optional, Union, Dict

from config import TARIFFS, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, ADMIN_IDS

from logger import get_logger
logger = get_logger('main')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è YooKassa
try:
    from yookassa import Configuration as YooKassaConfiguration, Payment as YooKassaPayment
    YOOKASSA_AVAILABLE = True
except ImportError:
    YOOKASSA_AVAILABLE = False
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ yookassa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram API
retry_telegram_call = tenacity.retry(
    retry=tenacity.retry_if_exception_type((TelegramNetworkError, TelegramRetryAfter)),
    wait=tenacity.wait_exponential(multiplier=1, min=1, max=10),
    stop=tenacity.stop_after_attempt(3),
    before_sleep=tenacity.before_sleep_log(logger, logging.WARNING),
    reraise=True
)

def safe_escape_markdown(text: str, exclude_chars: Optional[list] = None, version: int = 2) -> str:
    if not text:
        return ""

    text = str(text)

    if version == 1:
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
        special_chars = ['_', '*', '`', '[']
    else:
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for char in special_chars:
        text = text.replace(char, f'\\{char}')

    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    if exclude_chars:
        for char in exclude_chars:
            text = text.replace(f'\\{char}', char)

    logger.debug(f"Escaped text (version={version}): {text[:200]}...")
    return text

def format_user_info_safe(name: str, username: str = None, user_id: int = None, email: str = None) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è Markdown.
    """
    safe_name = safe_escape_markdown(str(name))

    text = f"üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
    text += f"–ò–º—è: {safe_name}"

    if username:
        safe_username = safe_escape_markdown(str(username))
        text += f" \\(@{safe_username}\\)"

    text += f"\n"

    if user_id:
        safe_user_id = safe_escape_markdown(str(user_id))
        text += f"ID: `{safe_user_id}`\n"

    if email:
        safe_email = safe_escape_markdown(str(email))
        text += f"Email: {safe_email}\n"

    return text

def format_balance_info_safe(photo_balance: int, avatar_balance: int) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è Markdown.
    """
    text = "üí∞ –ë–∞–ª–∞–Ω—Å:\n"
    text += f"  ‚Ä¢ –ü–µ—á–µ–Ω—å–∫–∏: `{safe_escape_markdown(str(photo_balance))}`\n"
    text += f"  ‚Ä¢ –ê–≤–∞—Ç–∞—Ä—ã: `{safe_escape_markdown(str(avatar_balance))}`\n"

    return text

def format_stats_info_safe(stats_data: dict) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è Markdown.
    """
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n"

    for key, value in stats_data.items():
        safe_key = safe_escape_markdown(str(key))
        safe_value = safe_escape_markdown(str(value))
        text += f"  ‚Ä¢ {safe_key}: `{safe_value}`\n"

    return text

async def format_user_detail_message(user_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    username = user_data.get('username', '')
    user_id = user_data.get('user_id', 0)
    email = user_data.get('email', '')
    photo_balance = user_data.get('photo_balance', 0)
    avatar_balance = user_data.get('avatar_balance', 0)

    stats = {
        '–§–æ—Ç–æ –ø–æ —Ç–µ–∫—Å—Ç—É': user_data.get('text_generations', 0),
        '–§–æ—Ç–æ —Å –ª–∏—Ü–æ–º': user_data.get('face_generations', 0),
        '–ê–≤–∞—Ç–∞—Ä—ã': user_data.get('avatar_generations', 0),
        '–í–∏–¥–µ–æ': user_data.get('video_generations', 0)
    }

    message_text = format_user_info_safe(name, username, user_id, email)
    message_text += format_balance_info_safe(photo_balance, avatar_balance)
    message_text += format_stats_info_safe(stats)

    return message_text

@retry_telegram_call
async def safe_edit_message(
    message: Message,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    parse_mode: Optional[str] = ParseMode.MARKDOWN_V2,
    disable_web_page_preview: bool = True
) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Markdown.
    """
    if not message:
        return None

    try:
        return await message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview
        )
    except TelegramBadRequest as e:
        error_str = str(e).lower()

        if "message is not modified" in error_str:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (API): {e}")
            return message

        elif "can't parse entities" in error_str or "can't parse" in error_str:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:200]}...")

            try:
                return await message.edit_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=None,
                    disable_web_page_preview=disable_web_page_preview
                )
            except Exception as e_plain:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e_plain}")
                return None

        else:
            logger.error(f"BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return None

@retry_telegram_call
async def send_message_with_fallback(
    bot: Bot,
    chat_id: int,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    parse_mode: Optional[str] = ParseMode.MARKDOWN_V2,
    disable_web_page_preview: bool = True
) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown.
    """
    logger.debug(f"send_message_with_fallback: chat_id={chat_id}, text={text[:200]}..., parse_mode={parse_mode}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ chat_id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    bot_info = await bot.get_me()
    if chat_id == bot_info.id:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É –±–æ—Ç—É: chat_id={chat_id} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å bot_id={bot_info.id}")
        return None

    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action: {e}")

    try:
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview
        )
        logger.debug(f"Message sent successfully: chat_id={chat_id}, message_id={sent_message.message_id}")
        return sent_message
    except TelegramBadRequest as e:
        error_str = str(e).lower()

        if "can't parse entities" in error_str:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:200]}...")

            try:
                sent_message = await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=None,
                    disable_web_page_preview=disable_web_page_preview
                )
                logger.debug(f"Message sent without formatting: chat_id={chat_id}, message_id={sent_message.message_id}")
                return sent_message
            except Exception as e_plain:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e_plain}")
                try:
                    error_message = await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        parse_mode=None
                    )
                    logger.debug(f"Fallback error message sent: chat_id={chat_id}, message_id={error_message.message_id}")
                    return error_message
                except Exception as e_fallback:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_fallback}")
                    return None
        else:
            logger.error(f"BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    except TelegramForbiddenError as e:
        logger.error(f"–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ chat_id={chat_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id={chat_id}: {e}", exc_info=True)
        return None

@retry_telegram_call
async def safe_answer_callback(query: CallbackQuery, text: Optional[str] = None, show_alert: bool = False) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query.
    """
    if query:
        try:
            await query.answer(text=text, show_alert=show_alert)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ CallbackQuery: {e}")

async def delete_message_safe(message: Message) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if message:
        try:
            await message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def send_typing_action(bot: Bot, chat_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç'.
    """
    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action: {e}")

async def send_upload_photo_action(bot: Bot, chat_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ'.
    """
    try:
        await bot.send_chat_action(chat_id=chat_id, action="upload_photo")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å upload_photo action: {e}")

async def send_upload_video_action(bot: Bot, chat_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ'.
    """
    try:
        await bot.send_chat_action(chat_id=chat_id, action="upload_video")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å upload_video action: {e}")

async def clean_admin_context(context: FSMContext) -> None:

    try:
        if not isinstance(context, FSMContext):
            logger.error(f"–û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç FSMContext, –ø–æ–ª—É—á–µ–Ω {type(context)}")
            return

        data = await context.get_data()
        admin_keys = [
            'admin_generation_for_user',
            'admin_target_user_id',
            'is_admin_generation',
            'generation_type',
            'model_key',
            'active_model_version',
            'active_trigger_word',
            'active_avatar_name',
            'style_key',
            'selected_prompt',
            'user_prompt',
            'face_image_path',
            'photo_to_photo_image_path',
            'awaiting_activity_dates',
            'awaiting_support_message'
        ]
        if data:
            new_data = {k: v for k, v in data.items() if k not in admin_keys}
            await context.set_data(new_data)
            if admin_keys:
                logger.debug(f"–û—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª—é—á–∏: {admin_keys}")
            else:
                logger.debug("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        else:
            logger.debug("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)

def create_isolated_context(original_context: Dict, target_user_id: int) -> Dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    return {
        'bot': original_context.get('bot'),
        'user_data': copy.deepcopy(original_context.get('user_data', {}).get(target_user_id, {})),
        'chat_data': {},
    }

async def check_user_permissions(message: Message, required_permissions: Optional[list] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id

    if required_permissions is None:
        return True

    if 'admin' in required_permissions and user_id not in ADMIN_IDS:
        await message.answer(
            safe_escape_markdown("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return False

    return True

def get_user_display_name(user: Dict) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if user.get('first_name'):
        name = user['first_name']
        if user.get('last_name'):
            name += f" {user['last_name']}"
        return name
    elif user.get('username'):
        return f"@{user['username']}"
    else:
        return f"User {user.get('id', 'Unknown')}"

def format_user_mention(user: Dict, escape: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    display_name = get_user_display_name(user)

    if user.get('username'):
        mention = f"{display_name} (@{user['username']})"
    else:
        mention = f"{display_name} (ID: {user.get('id', 'Unknown')})"

    return safe_escape_markdown(mention) if escape else mention

def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.
    """
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix

def get_tariff_text(first_purchase: bool = False, is_paying_user: bool = False, time_since_registration: float = float('inf')) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è MarkdownV2."""
    header1 = safe_escape_markdown("üî• –ì–æ—Ä—è—á–∏–π –≤—ã–±–æ—Ä –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ!", version=2)
    header2 = safe_escape_markdown("–•–æ—á–µ—à—å –∫—Ä—É—Ç—ã–µ –∫–∞–¥—Ä—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç? –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç –∏ –ø–æ–ª—É—á–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!", version=2)
    gift_text_unconditional = safe_escape_markdown(" –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –õ–Æ–ë–û–ì–û –ø–∞–∫–µ—Ç–∞ (–∫—Ä–æ–º–µ '–¢–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä') - 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!", version=2)
    footer = safe_escape_markdown("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É ‚§µÔ∏è", version=2)

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2
    terms_link_text = safe_escape_markdown("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º", version=2)
    terms_text = f"\n\nüìÑ –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–∞–∫–µ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [{terms_link_text}](https://telegra.ph/Polzovatelskoe-soglashenie-07-26-12)"

    text_parts = [header1, header2, "\n"]

    available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_paying_user:
        if time_since_registration <= 1800:  # 30 –º–∏–Ω—É—Ç
            available_tariffs = {k: v for k, v in available_tariffs.items() if k in ["–∫–æ–º—Ñ–æ—Ä—Ç"]}
        elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
            available_tariffs = {k: v for k, v in available_tariffs.items() if k in ["–∫–æ–º—Ñ–æ—Ä—Ç", "–ª–∞–π—Ç"]}
        # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç "–º–∏–Ω–∏" –¥–æ—Å—Ç—É–ø–µ–Ω

    for _, details in available_tariffs.items():
        text_parts.append(safe_escape_markdown(details['display'], version=2) + "\n")

    if first_purchase:
        text_parts.append(f"\n{gift_text_unconditional}\n")
    else:
        text_parts.append("\n")

    text_parts.append(footer)
    text_parts.append(terms_text)
    return "".join(text_parts)


async def check_resources(bot: Bot, user_id: int, required_photos: int = 0, required_avatars: int = 0) -> Optional[tuple]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from database import check_database_user
    from keyboards import create_main_menu_keyboard, create_subscription_keyboard

    try:
        subscription_data = await check_database_user(user_id)
        logger.debug(f"[check_resources] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_data}")

        if not subscription_data:
            logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}")
            error_text = safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2)
            main_menu_kb = await create_main_menu_keyboard(user_id)
            await send_message_with_fallback(bot, user_id, error_text, reply_markup=main_menu_kb, parse_mode=ParseMode.MARKDOWN_V2)
            return None

        if len(subscription_data) < 9:
            logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_data}")
            error_text = safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", version=2)
            main_menu_kb = await create_main_menu_keyboard(user_id)
            await send_message_with_fallback(bot, user_id, error_text, reply_markup=main_menu_kb, parse_mode=ParseMode.MARKDOWN_V2)
            return None

        generations_left = subscription_data[0] if subscription_data[0] is not None else 0
        avatar_left = subscription_data[1] if subscription_data[1] is not None else 0

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è user_id={user_id}: —Ñ–æ—Ç–æ={generations_left}, –∞–≤–∞—Ç–∞—Ä—ã={avatar_left}")
        logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è: —Ñ–æ—Ç–æ={required_photos}, –∞–≤–∞—Ç–∞—Ä—ã={required_avatars}")

        error_message_parts = []

        if required_photos > 0 and generations_left < required_photos:
            error_message_parts.append(f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—á–µ–Ω–µ–∫! –ù—É–∂–Ω–æ: {required_photos}, —É —Ç–µ–±—è: {generations_left}")

        if required_avatars > 0 and avatar_left < required_avatars:
            error_message_parts.append(f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤! –ù—É–∂–Ω–æ: {required_avatars}, —É —Ç–µ–±—è: {avatar_left}")

        if error_message_parts:
            error_summary = "\n".join(error_message_parts)
            first_purchase = subscription_data[5] if len(subscription_data) > 5 else True
            tariff_message_text = get_tariff_text(first_purchase, hide_mini_tariff=True)

            full_message = f"{safe_escape_markdown(error_summary, version=2)}\n\n{tariff_message_text}"
            subscription_kb = await create_subscription_keyboard(hide_mini_tariff=True)
            await send_message_with_fallback(bot, user_id, full_message, reply_markup=subscription_kb, parse_mode=ParseMode.MARKDOWN_V2)
            return None

        logger.debug(f"[check_resources] –†–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã –¥–ª—è user_id={user_id}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º: {subscription_data}")
        return subscription_data

    except Exception as e:
        logger.error(f"[check_resources] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ user_id={user_id}: {e}", exc_info=True)
        error_text = safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2)
        main_menu_kb = await create_main_menu_keyboard(user_id)
        await send_message_with_fallback(bot, user_id, error_text, reply_markup=main_menu_kb, parse_mode=ParseMode.MARKDOWN_V2)
        return None

async def check_active_avatar(bot: Bot, user_id: int) -> Optional[tuple]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from database import get_active_trainedmodel
    from keyboards import create_user_profile_keyboard, create_main_menu_keyboard

    try:
        trained_model = await get_active_trainedmodel(user_id)
        if not trained_model or trained_model[3] != 'success':
            logger.warning(f"[check_active_avatar] –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è user_id={user_id}")
            text = safe_escape_markdown("üö´ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' -> '–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã'!")
            reply_markup = await create_user_profile_keyboard(user_id)
            await send_message_with_fallback(bot, user_id, text, reply_markup=reply_markup)
            return None

        logger.debug(f"[check_active_avatar] –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è user_id={user_id}: ID {trained_model[0]}")
        return trained_model

    except Exception as e:
        logger.error(f"[check_active_avatar] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ user_id={user_id}: {e}", exc_info=True)
        text = safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤–∞—Ç–∞—Ä–∞!")
        reply_markup = await create_main_menu_keyboard(user_id)
        await send_message_with_fallback(bot, user_id, text, reply_markup=reply_markup)
        return None

def check_style_config(style_type: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π.
    """
    from generation_config import (
        NEW_MALE_AVATAR_STYLES, NEW_FEMALE_AVATAR_STYLES
    )
    from style import new_male_avatar_prompts, new_female_avatar_prompts

    config_map = {
        'new_male_avatar': (NEW_MALE_AVATAR_STYLES, new_male_avatar_prompts),
        'new_female_avatar': (NEW_FEMALE_AVATAR_STYLES, new_female_avatar_prompts),
    }

    if style_type not in config_map:
        if style_type == 'generic_avatar':
            logger.info(f"–¢–∏–ø —Å—Ç–∏–ª—è '{style_type}' –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return True

        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∏–ª—è '{style_type}' –≤ check_style_config")
        return False

    style_dict, prompt_dict_for_type = config_map[style_type]

    if not (style_dict and isinstance(style_dict, dict) and len(style_dict) > 0):
        logger.error(f"–°–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π –¥–ª—è '{style_type}' ({type(style_dict).__name__}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –≤ config.py")
        return False

    if not (prompt_dict_for_type and isinstance(prompt_dict_for_type, dict) and len(prompt_dict_for_type) > 0):
        logger.error(f"–°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è '{style_type}' ({type(prompt_dict_for_type).__name__}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –≤ config.py")
        return False

    missing_keys = [key for key in style_dict if key not in prompt_dict_for_type]
    if missing_keys:
        logger.error(f"–î–ª—è '{style_type}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–º—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π: {missing_keys} –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–ª–æ–≤–∞—Ä–µ –ø—Ä–æ–º—Ç–æ–≤.")
        return False

    return True

async def create_payment_link(user_id: int, email: str, amount_value: float, description: str, bot_username: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ YooKassa.
    """
    logger.debug(f"create_payment_link –≤—ã–∑–≤–∞–Ω: user_id={user_id}, email={email}, amount={amount_value}, description={description}, bot_username={bot_username}")

    if not YOOKASSA_AVAILABLE:
        logger.error(f"YooKassa –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è user_id={user_id}: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return f"https://test.payment.link/user_id={user_id}&amount={amount_value}"

    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error(f"YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è user_id={user_id}: YOOKASSA_SHOP_ID={YOOKASSA_SHOP_ID}, YOOKASSA_SECRET_KEY={'***' if YOOKASSA_SECRET_KEY else None}")
        return f"https://test.payment.link/user_id={user_id}&amount={amount_value}"

    try:
        YooKassaConfiguration.account_id = YOOKASSA_SHOP_ID
        YooKassaConfiguration.secret_key = YOOKASSA_SECRET_KEY
        idempotency_key = str(uuid.uuid4())
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa: account_id={YOOKASSA_SHOP_ID}, idempotency_key={idempotency_key}")

        payment = YooKassaPayment.create({
            "amount": {
                "value": f"{amount_value:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{bot_username.lstrip('@')}"
            },
            "capture": True,
            "description": description[:128],
            "metadata": {
                "user_id": str(user_id),
                "description_for_user": description[:128]
            },
            "receipt": {
                "customer": {"email": email},
                "items": [{
                    "description": description[:128],
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount_value:.2f}",
                        "currency": "RUB"
                    },
                    "vat_code": "1",
                    "payment_subject": "service",
                    "payment_mode": "full_payment"
                }]
            }
        }, idempotency_key)

        if not hasattr(payment, 'confirmation') or not hasattr(payment.confirmation, 'confirmation_url'):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç YooKassa –¥–ª—è user_id={user_id}: payment={payment}")
            return f"https://test.payment.link/user_id={user_id}&amount={amount_value}"

        logger.info(f"–ü–ª–∞—Ç—ë–∂ YooKassa —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ID={payment.id}, URL={payment.confirmation.confirmation_url}, user_id={user_id}")
        return payment.confirmation.confirmation_url

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ YooKassa –¥–ª—è user_id={user_id}, amount={amount_value}: {e}", exc_info=True)
        return f"https://test.payment.link/user_id={user_id}&amount={amount_value}"

def test_markdown_escaping():
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    test_cases = [
        "Sh.Ai.ProTech (@ShAIPro)",
        "user@example.com",
        "ID: 123456789",
        "Balance: $10.50",
        "Text with (parentheses) and [brackets]",
        "Special chars: !@#$%^&*()_+-={}[]|\\:;\"'<>?,./",
    ]

    for test_text in test_cases:
        escaped = safe_escape_markdown(test_text)
        print(f"Original: {test_text}")
        print(f"Escaped:  {escaped}")
        print("---")

def debug_markdown_text(text: str) -> str:
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å Markdown.
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    found_chars = []

    for char in special_chars:
        if char in text and f'\\{char}' not in text:
            found_chars.append(char)

    if found_chars:
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {found_chars}")
        logger.debug(f"–¢–µ–∫—Å—Ç: {text[:200]}...")

    return text

def escape_message_parts(*parts: str, version: int = 2) -> str:

    if not parts:
        return ""

    escaped_parts = [safe_escape_markdown(str(part), version=version) for part in parts]
    result = "".join(escaped_parts)
    logger.debug(f"escape_message_parts: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[:200]}...")
    return result

def unescape_markdown(text: str) -> str:

    if not text:
        return ""

    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(f'\\{char}', char)
    logger.debug(f"unescape_markdown: –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:200]}...")
    return text
