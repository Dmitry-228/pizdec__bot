import asyncio
import logging
import os
import io
from datetime import datetime, timedelta
from typing import List, Dict
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command
from database import get_payments_by_date, get_user_activity_metrics, get_generation_cost_log
from config import ADMIN_IDS, DATABASE_PATH
from generation_config import IMAGE_GENERATION_MODELS
from handlers.utils import safe_escape_markdown as escape_md, send_message_with_fallback
import aiosqlite
from keyboards import create_admin_keyboard, create_admin_user_actions_keyboard


from logger import get_logger
logger = get_logger('main')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
visualization_router = Router()

async def show_visualization(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN
        )
        return

    await state.clear()
    text = escape_md(
        "üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:"
    )
    keyboard = [
        [InlineKeyboardButton("üìà –ü–ª–∞—Ç–µ–∂–∏", callback_data="visualize_payments")],
        [InlineKeyboardButton("üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="visualize_registrations")],
        [InlineKeyboardButton("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="visualize_generations")],
        [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN
    )

async def visualize_payments(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=30)
        payments = await get_payments_by_period(start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")

        dates = []
        amounts = []
        current_date = start_date
        while current_date <= end_date:
            dates.append(current_date)
            amounts.append(0.0)
            current_date += timedelta(days=1)

        for payment in payments:
            if payment[4] is None:
                logger.warning(f"–ü–ª–∞—Ç–µ–∂ {payment[3]} –∏–º–µ–µ—Ç –ø—É—Å—Ç—É—é –¥–∞—Ç—É created_at")
                continue
            try:
                payment_date = datetime.strptime(payment[4], '%Y-%m-%d %H:%M:%S').date()
                if start_date <= payment_date <= end_date:
                    index = dates.index(payment_date)
                    amounts[index] += float(payment[2])
            except (ValueError, AttributeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ {payment[3]}: {e}")

        if not any(amounts):
            text = escape_md("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.")
            await state.clear()
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")]]),
                parse_mode=ParseMode.MARKDOWN
            )
            return

        plt.figure(figsize=(12, 6))
        sns.set_style("whitegrid")
        plt.plot(dates, amounts, color='#4CAF50', linewidth=2, marker='o')
        plt.fill_between(dates, amounts, color=(76/255, 175/255, 80/255, 0.2))
        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=14, pad=10)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–°—É–º–º–∞ (RUB)", fontsize=12)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()

        text = escape_md("üìà –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN
        )

        await query.bot.send_photo(
            chat_id=user_id, photo=buffer, caption="–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"
        )
        buffer.close()
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")]]),
            parse_mode=ParseMode.MARKDOWN
        )

async def visualize_registrations(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        if not os.path.exists(DATABASE_PATH):
            logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATABASE_PATH}")
            text = escape_md("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")]]),
                parse_mode=ParseMode.MARKDOWN
            )
            return

        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)

        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute(
                """
                SELECT DATE(created_at) as reg_date, COUNT(*) as count
                FROM users
                WHERE created_at BETWEEN ? AND ?
                GROUP BY DATE(created_at)
                ORDER BY reg_date
                """,
                (start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))
            )
            registrations = await c.fetchall()

        dates = []
        counts = []
        current_date = start_date
        while current_date <= end_date:
            dates.append(current_date.strftime('%Y-%m-%d'))
            counts.append(0)
            current_date += timedelta(days=1)

        for reg in registrations:
            reg_date = reg['reg_date']
            if reg_date in dates:
                counts[dates.index(reg_date)] = reg['count']

        plt.figure(figsize=(12, 6))
        sns.set_style("whitegrid")
        plt.bar(dates, counts, color='#2196F3', edgecolor='#1976D2')
        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=14, pad=10)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()

        text = escape_md("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN
        )

        await query.bot.send_photo(
            chat_id=user_id, photo=buffer, caption="–ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"
        )
        buffer.close()
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")]]),
            parse_mode=ParseMode.MARKDOWN
        )

async def visualize_generations(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        if not os.path.exists(DATABASE_PATH):
            logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATABASE_PATH}")
            text = escape_md("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")]]),
                parse_mode=ParseMode.MARKDOWN
            )
            return

        end_date = datetime.now().strftime('%Y-%m-%d')
        start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        log_entries = await get_generation_cost_log(start_date_str=start_date, end_date_str=end_date)

        dates = []
        generation_counts: Dict[str, List[int]] = {}
        current_date = datetime.strptime(start_date, '%Y-%m-%d')
        end_date_dt = datetime.strptime(end_date, '%Y-%m-%d')
        while current_date <= end_date_dt:
            dates.append(current_date.strftime('%Y-%m-%d'))
            current_date += timedelta(days=1)

        for entry in log_entries:
            model_id, units, _, created_at = entry
            date_str = str(created_at).split(' ')[0]
            if date_str in dates:
                if model_id not in generation_counts:
                    generation_counts[model_id] = [0] * len(dates)
                generation_counts[model_id][dates.index(date_str)] += units

        plt.figure(figsize=(12, 6))
        sns.set_style("whitegrid")
        colors = sns.color_palette("husl", len(generation_counts))

        for idx, (model_id, counts) in enumerate(generation_counts.items()):
            model_name = next(
                (m_data.get('name', model_id) for _, m_data in IMAGE_GENERATION_MODELS.items() if m_data.get('id') == model_id),
                model_id
            )
            plt.plot(dates, counts, label=model_name, color=colors[idx], linewidth=2)

        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=14, pad=10)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.legend(title="–ú–æ–¥–µ–ª–∏", bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()

        text = escape_md("üì∏ –ì—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN
        )

        await query.bot.send_photo(
            chat_id=user_id, photo=buffer, caption="–ì—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
        )
        buffer.close()
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")]]),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_activity_stats(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN
        )
        return

    await state.clear()
    await state.update_data(awaiting_activity_dates=True)
    text = escape_md(
        "üìä –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`YYYY-MM-DD YYYY-MM-DD` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-05-01 2025-05-26`)\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:"
    )
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="activity_7_days")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="activity_30_days")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(BotStates.AWAITING_ACTIVITY_DATES)

async def handle_activity_stats(query: CallbackQuery, state: FSMContext, start_date: str, end_date: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await state.clear()
        await query.message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        stats = await get_user_activity_metrics(start_date, end_date)
        if not stats:
            text = escape_md(f"üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}.")
            await state.clear()
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")]]),
                parse_mode=ParseMode.MARKDOWN
            )
            return

        text = f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({start_date} - {end_date})\n\n"
        for stat in stats[:10]:
            user_id_stat, username, messages, photos, videos, purchases = stat
            username_display = f"@{escape_md(username)}" if username else f"ID {user_id_stat}"
            text += (
                f"üë§ {username_display} (ID: `{user_id_stat}`)\n"
                f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: `{messages}`\n"
                f"  ‚Ä¢ –§–æ—Ç–æ: `{photos}`\n"
                f"  ‚Ä¢ –í–∏–¥–µ–æ: `{videos}`\n"
                f"  ‚Ä¢ –ü–æ–∫—É–ø–æ–∫: `{purchases}`\n\n"
            )

        if len(stats) > 10:
            text += f"_...–∏ –µ—â–µ {len(stats) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π._"

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="admin_activity_stats")],
            [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await state.clear()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")]]),
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_activity_dates_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    user_id = message.from_user.id
    user_data = await state.get_data()
    if not user_data.get('awaiting_activity_dates'):
        logger.warning(f"handle_activity_dates_input invoked without state for user_id={user_id}")
        await state.clear()
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    await state.update_data(awaiting_activity_dates=None)
    text = message.text.strip()

    try:
        dates = text.split()
        if len(dates) != 2:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD YYYY-MM-DD`")
        start_date, end_date = dates

        datetime.strptime(start_date, '%Y-%m-%d')
        datetime.strptime(end_date, '%Y-%m-%d')
        if start_date > end_date:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è user_id={user_id} —Å {start_date} –ø–æ {end_date}")
        await handle_activity_stats(
            CallbackQuery(query_id=None, from_user=message.from_user, message=message, data=None, bot=message.bot),
            state, start_date, end_date
        )
        await state.clear()
    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –æ—Ç user_id={user_id}: {text}, error: {e}")
        text = escape_md(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `YYYY-MM-DD YYYY-MM-DD` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-05-01 2025-05-26`)."
        )
        await state.update_data(awaiting_activity_dates=True)
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")]]),
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(BotStates.AWAITING_ACTIVITY_DATES)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await message.answer(
            text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")]]),
            parse_mode=ParseMode.MARKDOWN
        )

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    await state.clear()
    text = escape_md("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    reply_markup = await create_admin_main() if user_id in ADMIN_IDS else await create_user_main_menu(user_id)
    await message.answer(
        text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@visualization_router.callback_query(
    lambda c: c.data in [
        "admin_visualization", "visualize_payments", "visualize_registrations",
        "visualize_generations", "admin_activity_stats"
    ] or c.data.startswith("activity_")
)
async def visualization_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    callback_data = query.data
    logger.debug(f"visualization_callback_handler: user_id={query.from_user.id}, callback_data={callback_data}")
    try:
        if callback_data == "admin_visualization":
            await show_visualization(query, state)
        elif callback_data == "visualize_payments":
            await visualize_payments(query, state)
        elif callback_data == "visualize_registrations":
            await visualize_registrations(query, state)
        elif callback_data == "visualize_generations":
            await visualize_generations(query, state)
        elif callback_data == "admin_activity_stats":
            await show_activity_stats(query, state)
        elif callback_data.startswith("activity_"):
            days = 7 if callback_data == "activity_7_days" else 30
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            await handle_activity_stats(query, state, start_date, end_date)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ visualization_callback_handler: {e}", exc_info=True)
        await query.message.answer(
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."),
            reply_markup=await create_admin_main(),
            parse_mode=ParseMode.MARKDOWN
        )
