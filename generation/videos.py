import aiosqlite
import asyncio
import logging
import os
import requests
import uuid
import random
from aiogram import Bot, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ContentType
from aiogram.enums import ParseMode
from deep_translator import GoogleTranslator
import replicate
from replicate.exceptions import ReplicateError
from states import BotStates
from config import REPLICATE_API_TOKEN, DATABASE_PATH
from generation_config import IMAGE_GENERATION_MODELS, GENERATION_TYPE_TO_MODEL_KEY, get_ultra_negative_prompt
from database import check_database_user, update_user_credits, save_video_task, update_video_task_status, log_generation, check_user_resources
from keyboards import create_main_menu_keyboard, create_rating_keyboard, create_video_generate_menu_keyboard, create_subscription_keyboard, create_back_keyboard, create_confirmation_keyboard
from generation.images import upload_image_to_replicate
from generation.utils import TempFileManager, reset_generation_context, send_message_with_fallback, send_video_with_retry
from handlers.utils import clean_admin_context, escape_message_parts, safe_escape_markdown as escape_md
from utils import get_cookie_progress_bar

from logger import get_logger
logger = get_logger('generation')

class VideoStates(StatesGroup):
    AWAITING_VIDEO_PROMPT = State()
    AWAITING_VIDEO_PHOTO = State()
    AWAITING_VIDEO_CONFIRMATION = State()

video_router = Router()

async def get_video_progress_message(elapsed_minutes: int, model_name: str, style_name: str = "custom", total_minutes: int = 5) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    VIDEO_PROGRESS_MESSAGES = {
        "1": [
            "üé¨ –í–∏–¥–µ–æ '{model_name}' ({style_name}) –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π –ø—Ä–æ–º–ø—Ç...",
            "‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–¥—Ä–æ–≤! –ò–ò —Å–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è '{model_name}' ({style_name})...",
            "üé• –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ '{model_name}' ({style_name})..."
        ],
        "2": [
            "üî• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ! {elapsed} –º–∏–Ω –∏–∑ ~{total} ({style_name})",
            "üí´ –í–∏–¥–µ–æ '{model_name}' ({style_name}) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! –°–æ–∑–¥–∞—ë–º –¥–∏–Ω–∞–º–∏–∫—É...",
            "‚öôÔ∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç—Ä—É–¥–∏—Ç—Å—è! {elapsed}/{total} –º–∏–Ω –¥–ª—è '{model_name}' ({style_name})"
        ],
        "3": [
            "üéûÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–¥—Ä–æ–≤! –í–∏–¥–µ–æ '{model_name}' ({style_name}) –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
            "‚ú® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ, –∏ '{model_name}' ({style_name}) –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ...",
            "üèÅ –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ! –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é '{model_name}' ({style_name})..."
        ],
        "4": [
            "üíé –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ '{model_name}' ({style_name})...",
            "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ '{model_name}' ({style_name})...",
            "‚è∞ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è '{model_name}' ({style_name})..."
        ]
    }

    STAGE_EMOJIS = {
        1: ["üé¨", "‚ö°", "üé•", "üí•"],
        2: ["üî•", "üí´", "‚öôÔ∏è", "‚ú®"],
        3: ["üéûÔ∏è", "üèÅ", "üéâ", "üéä"],
        4: ["üíé", "üîç", "‚è∞", "‚úÖ"]
    }

    message_key = str(min(elapsed_minutes, 4))
    if message_key not in VIDEO_PROGRESS_MESSAGES:
        keys = sorted([int(k) for k in VIDEO_PROGRESS_MESSAGES.keys()])
        for k in keys:
            if elapsed_minutes <= k:
                message_key = str(k)
                break
        else:
            message_key = str(keys[-1])

    messages = VIDEO_PROGRESS_MESSAGES[message_key]
    message = random.choice(messages)

    message = message.format(model_name=model_name, style_name=style_name, elapsed=elapsed_minutes, total=total_minutes)

    percentage = min(int((elapsed_minutes / total_minutes) * 100), 95)
    progress_bar = get_cookie_progress_bar(percentage)

    stage_emoji = random.choice(STAGE_EMOJIS.get(int(message_key), ["‚è≥"]))

    final_message = f"{stage_emoji} {message}\n\n"
    final_message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n"

    if elapsed_minutes >= 3:
        final_message += "\nüîî –í–∏–¥–µ–æ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ï—â—ë —á—É—Ç—å-—á—É—Ç—å!"
    elif elapsed_minutes >= 2:
        final_message += f"\n‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {total_minutes - elapsed_minutes} –º–∏–Ω"

    return final_message

async def send_video_progress(bot: Bot, user_id: int, elapsed_minutes: int, model_name: str, style_name: str = "custom", total_minutes: int = 5) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    try:
        message = await get_video_progress_message(elapsed_minutes, model_name, style_name, total_minutes)
        await send_message_with_fallback(bot, user_id, message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_video_progress_with_delay(bot: Bot, user_id: int, elapsed_minutes: int, model_name: str, style_name: str = "custom", total_minutes: int = 5, delay: int = 0) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    await asyncio.sleep(delay)
    await send_video_progress(bot, user_id, elapsed_minutes, model_name, style_name, total_minutes)

async def schedule_video_notifications(bot: Bot, user_id: int, model_name: str, style_name: str, task_id: int, prediction_id: str, total_minutes: int = 5):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    notification_schedule = [1, 2, 3, 4]
    for minutes in notification_schedule:
        if minutes < total_minutes:
            asyncio.create_task(send_video_progress_with_delay(
                bot, user_id, minutes, model_name, style_name, total_minutes, delay=minutes * 30
            ))

async def generate_video(message: Message, state: FSMContext, task_id: int = None, prediction_id: str = None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ."""
    user_data = await state.get_data()
    user_id = user_data.get('user_id', message.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    admin_user_id = message.from_user.id if is_admin_generation and user_id != message.from_user.id else None
    bot = message.bot
    generation_type = user_data.get('generation_type', 'ai_video_v2_1')
    model_key = user_data.get('model_key')
    style_name = user_data.get('style_name', 'custom')

    logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}, target_user_id={target_user_id}" +
                 (f", admin_user_id={admin_user_id}" if admin_user_id else "") +
                 f", —Å—Ç–∏–ª—å: {style_name}, generation_type={generation_type}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ user_id
    if user_id == bot.id:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è bot_id={user_id}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ target_user_id={target_user_id}")
        user_id = target_user_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è target_user_id
    from generation_config import get_video_generation_cost
    required_photos = user_data.get('video_cost', get_video_generation_cost(generation_type))
    if not await check_user_resources(bot, target_user_id, required_photos=required_photos):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è target_user_id={target_user_id}")
        await state.update_data(user_id=user_id)
        return

    if not model_key or model_key not in IMAGE_GENERATION_MODELS:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π model_key –¥–ª—è –≤–∏–¥–µ–æ: {model_key} –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            bot, user_id,
            f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ–º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=await create_video_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
        if admin_user_id:
            await send_message_with_fallback(
                bot, admin_user_id,
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                parse_mode=ParseMode.MARKDOWN
            )
        await reset_generation_context(state, generation_type)
        return

    model_config = IMAGE_GENERATION_MODELS[model_key]
    model_name_display = model_config.get('name', "AI-–í–∏–¥–µ–æ (Kling 2.1)")
    replicate_video_model_id = model_config['id']
    required_photos = user_data.get('video_cost', get_video_generation_cost(generation_type))
    logger.debug(f"required_photos –¥–ª—è user_id={user_id}: {required_photos}")
    video_path_local_db_entry = None

    if not await check_user_resources(bot, user_id, required_photos=required_photos):
        return

    async with TempFileManager() as temp_manager:
        try:
            if not task_id:
                if 'video_prompt' not in user_data:
                    await send_message_with_fallback(
                        bot, user_id,
                        f"‚ùå –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ /menu ‚Üí –í–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí {model_name_display}!",
                        reply_markup=await create_video_generate_menu_keyboard(),
                        parse_mode=ParseMode.MARKDOWN
                    )
                    if admin_user_id:
                        await send_message_with_fallback(
                            bot, admin_user_id,
                            f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`.",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                            parse_mode=ParseMode.MARKDOWN
                        )
                    await reset_generation_context(state, generation_type or 'ai_video_v2_1')
                    return

                prompt = user_data['video_prompt']
                start_image_path = user_data.get('start_image')

                video_path_local_db_entry = f"generated/video_{user_id}_{uuid.uuid4()}.mp4"
                os.makedirs(os.path.dirname(video_path_local_db_entry), exist_ok=True)

                current_task_id = await save_video_task(
                    user_id,
                    prediction_id=None,
                    model_key=replicate_video_model_id,
                    video_path=video_path_local_db_entry,
                    status='pending_submission'
                )

                if not current_task_id:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤–∏–¥–µ–æ –≤ –ë–î.")

                task_id = current_task_id

                await send_message_with_fallback(
                    bot, user_id,
                    f"üé¨ –ó–∞–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ ({model_name_display}, {style_name})! "
                    f"–≠—Ç–æ –∑–∞–π–º—ë—Ç 3-5 –º–∏–Ω—É—Ç. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ! "
                    f"(–±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {required_photos} –ø–µ—á–µ–Ω–µ–∫)",
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN
                )
                if admin_user_id:
                    await send_message_with_fallback(
                        bot, admin_user_id,
                        f"üé¨ –ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}` (—Å—Ç–∏–ª—å: {style_name}).",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                        parse_mode=ParseMode.MARKDOWN
                    )

                logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}, task_id={task_id}, "
                          f"prompt='{prompt[:50]}...', style_name={style_name}, start_image='{start_image_path}', model='{model_name_display}'")

                await schedule_video_notifications(
                    bot, user_id, model_name_display, style_name, task_id, prediction_id, total_minutes=5
                )

            else:
                async with aiosqlite.connect(DATABASE_PATH) as conn_check:
                    c_check = await conn_check.cursor()
                    await c_check.execute(
                        "SELECT video_path, prediction_id FROM video_tasks WHERE id = ? AND user_id = ?",
                        (task_id, user_id)
                    )
                    task_data = await c_check.fetchone()

                if not task_data:
                    logger.error(f"–ó–∞–¥–∞—á–∞ –≤–∏–¥–µ–æ task_id={task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}")
                    return

                video_path_local_db_entry, prediction_id_from_db = task_data
                prediction_id = prediction_id_from_db
                prompt = user_data.get('video_prompt', "–í–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
                start_image_path = user_data.get('start_image')

                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}, task_id={task_id}, style_name={style_name}")

            translated_prompt = GoogleTranslator(source='auto', target='en').translate(prompt)

            input_params_video = {
                "mode": "pro",
                "prompt": translated_prompt,
                "duration": 5,
                "negative_prompt": get_ultra_negative_prompt(),
                "aspect_ratio": "16:9"
            }

            if start_image_path and os.path.exists(start_image_path):
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ start_image –¥–ª—è –≤–∏–¥–µ–æ: {start_image_path}")
                uploaded_image_url = await upload_image_to_replicate(start_image_path)
                input_params_video["start_image"] = uploaded_image_url
                logger.info(f"Start_image –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_image_url}")
                temp_manager.add(start_image_path)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ")
                default_image_path = "images/example1.jpg"
                if os.path.exists(default_image_path):
                    uploaded_image_url = await upload_image_to_replicate(default_image_path)
                    input_params_video["start_image"] = uploaded_image_url
                    logger.info(f"–î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_image_url}")
                else:
                    logger.error(f"–î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {default_image_path}")
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ")

            await update_user_credits(user_id, "decrement_photo", amount=required_photos)
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {required_photos} —Ñ–æ—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ user_id={user_id}, task_id={task_id}")

            replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

            if not prediction_id:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è Replicate –¥–ª—è –≤–∏–¥–µ–æ task_id={task_id}")

                prediction_instance = replicate_client.predictions.create(
                    version=replicate_video_model_id,
                    input=input_params_video
                )

                prediction_id = prediction_instance.id
                if not prediction_id:
                    raise ValueError("Replicate API –Ω–µ –≤–µ—Ä–Ω—É–ª prediction_id –¥–ª—è –≤–∏–¥–µ–æ.")

                await update_video_task_status(task_id, status='processing', prediction_id=prediction_id)
                logger.info(f"–í–∏–¥–µ–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: prediction_id={prediction_id}, task_id={task_id}")

            asyncio.create_task(check_video_status_with_delay(
                bot,
                {
                    'user_id': user_id,
                    'task_id': task_id,
                    'prediction_id': prediction_id,
                    'attempt': 1,
                    'generation_type': generation_type,
                    'model_key': model_key,
                    'style_name': style_name,
                    'admin_user_id': admin_user_id
                },
                delay=60
            ))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}, task_id={task_id}: {e}", exc_info=True)

            await send_message_with_fallback(
                bot, user_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ ({model_name_display}, {style_name})! "
                f"{required_photos} –ø–µ—á–µ–Ω—å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                reply_markup=await create_video_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
            if admin_user_id:
                await send_message_with_fallback(
                    bot, admin_user_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`: {str(e)}",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                    parse_mode=ParseMode.MARKDOWN
                )

            if task_id:
                await update_video_task_status(task_id, status='failed')

            try:
                await update_user_credits(user_id, "increment_photo", amount=required_photos)
                logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {required_photos} —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ.")
            except Exception as db_e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ {required_photos} —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {db_e}")
                await send_message_with_fallback(
                    bot, user_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ {required_photos} –ø–µ—á–µ–Ω–µ–∫ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!",
                    reply_markup=await create_video_generate_menu_keyboard(),
                    parse_mode=ParseMode.MARKDOWN
                )
                if admin_user_id:
                    await send_message_with_fallback(
                        bot, admin_user_id,
                        f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                        parse_mode=ParseMode.MARKDOWN
                    )

            await reset_generation_context(state, generation_type or 'ai_video_v2_1')

        finally:
            if video_path_local_db_entry and task_id:
                async with aiosqlite.connect(DATABASE_PATH) as conn_clean:
                    c_clean = await conn_clean.cursor()
                    await c_clean.execute("SELECT status FROM video_tasks WHERE id = ?", (task_id,))
                    final_status_row = await c_clean.fetchone()

                    if final_status_row and final_status_row[0] != 'completed' and os.path.exists(video_path_local_db_entry):
                        try:
                            os.remove(video_path_local_db_entry)
                            logger.info(f"–£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π/–Ω–µ—É–¥–∞—á–Ω—ã–π —Ñ–∞–π–ª –≤–∏–¥–µ–æ: {video_path_local_db_entry}")
                        except Exception as e_clean_db_path:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ –∏–∑ –ë–î {video_path_local_db_entry}: {e_clean_db_path}")

@video_router.callback_query(lambda c: c.data == 'ai_video_v2_1')
async def handle_generate_video_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ callback."""
    await query.answer()
    user_id = query.from_user.id
    bot = query.bot

    generation_type = 'ai_video_v2_1'
    await state.update_data(generation_type=generation_type, user_id=user_id)

    model_key = GENERATION_TYPE_TO_MODEL_KEY.get(generation_type)
    if not model_key:
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.",
            version=2
        )
        await send_message_with_fallback(
            bot, user_id,
            text,
            reply_markup=await create_video_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    await state.update_data(model_key=model_key, user_id=user_id)
    model_config = IMAGE_GENERATION_MODELS.get(model_key, {})
    cost = get_video_generation_cost(generation_type)
    await state.update_data(video_cost=cost, user_id=user_id)

    subscription_data = await check_database_user(user_id)
    photos_balance = subscription_data[0]

    if photos_balance < cost:
        text_parts = [
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—á–µ–Ω–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n",
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {photos_balance} –ø–µ—á–µ–Ω–µ–∫\n",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ: {cost} –ø–µ—á–µ–Ω–µ–∫\n\n",
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        ]
        text = escape_message_parts(*text_parts, version=2)
        logger.debug(f"handle_generate_video_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        keyboard = await create_subscription_keyboard()
        await query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
        return

    text_parts = [
        f"üé• AI-–≤–∏–¥–µ–æ (Kling 2.1)\n\n",
        f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è *{cost} –ø–µ—á–µ–Ω–µ–∫* —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n",
        f"–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ:"
    ]
    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"handle_generate_video_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.edit_text(
        text,
        reply_markup=await create_video_styles_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(VideoStates.AWAITING_VIDEO_PROMPT)
    await state.update_data(user_id=user_id)

@video_router.callback_query(lambda c: c.data == 'confirm_video_prompt')
async def handle_confirm_video_prompt(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ."""
    await query.answer()
    user_id = query.from_user.id
    bot = query.bot

    user_data = await state.get_data()
    prompt = user_data.get('video_prompt')
    start_image = user_data.get('start_image')
    model_key = user_data.get('model_key')
    model_config = IMAGE_GENERATION_MODELS.get(model_key, {})
    model_name_display = model_config.get('name', "AI-–í–∏–¥–µ–æ (Kling 2.1)")
    style_name = user_data.get('style_name', 'custom')
    cost = user_data.get('video_cost', get_video_generation_cost(generation_type))

    if not prompt:
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–º–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.",
            version=2
        )
        logger.debug(f"handle_confirm_video_prompt: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
        await send_message_with_fallback(
            bot, user_id,
            text,
            reply_markup=await create_video_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.clear()
        await state.update_data(user_id=user_id)
        return

    await query.message.delete()
    await generate_video(query.message, state)
    await state.update_data(user_id=user_id)

@video_router.callback_query(lambda c: c.data == 'edit_video_prompt')
async def handle_edit_video_prompt(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."""
    await query.answer()
    user_id = query.from_user.id
    bot = query.bot

    await state.update_data(waiting_for_video_prompt=True, user_id=user_id)
    await query.message.delete()
    text = escape_message_parts(
        "üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ:",
        version=2
    )
    logger.debug(f"handle_edit_video_prompt: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await send_message_with_fallback(
        bot, user_id,
        text,
        reply_markup=await create_back_keyboard("video_generate_menu"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(VideoStates.AWAITING_VIDEO_PROMPT)
    await state.update_data(user_id=user_id)

@video_router.callback_query(lambda c: c.data == 'edit_video_photo')
async def handle_edit_video_photo(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
    await query.answer()
    user_id = query.from_user.id
    bot = query.bot

    await state.update_data(awaiting_video_photo=True, user_id=user_id)
    await query.message.delete()
    text = escape_message_parts(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ (/skip).",
        version=2
    )
    logger.debug(f"handle_edit_video_photo: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await send_message_with_fallback(
        bot, user_id,
        text,
        reply_markup=await create_back_keyboard("video_generate_menu"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(VideoStates.AWAITING_VIDEO_PHOTO)
    await state.update_data(user_id=user_id)

@video_router.message(VideoStates.AWAITING_VIDEO_PROMPT)
async def handle_video_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ."""
    user_id = message.from_user.id
    bot = message.bot
    prompt = message.text.strip()

    if not prompt:
        await message.reply(
            escape_md("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ!", version=2),
            reply_markup=await create_back_keyboard("ai_video_v2_1"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    generation_type = user_data.get('generation_type', 'ai_video_v2_1')
    model_key = user_data.get('model_key', 'kwaivgi/kling-v2.1')
    style_name = user_data.get('style_name', 'custom')
    start_image_path = user_data.get('start_image')
    use_llama_prompt = user_data.get('use_llama_prompt', False)

    if use_llama_prompt:
        try:
            gender = user_data.get('selected_gender', 'person')
            assisted_prompt = await generate_assisted_prompt(prompt, gender, generation_type=generation_type)
            prompt = assisted_prompt
            logger.info(f"AI-–ø—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id={user_id}: {prompt[:50]}...")
            await state.update_data(assisted_prompt=prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            prompt = prompt

    await state.update_data(video_prompt=prompt, style_name=style_name, awaiting_video_prompt=False, user_id=user_id)

    model_name = IMAGE_GENERATION_MODELS.get(model_key, {}).get('name', 'AI-–í–∏–¥–µ–æ (Kling 2.1)')
    photo_status = "—Å —Ñ–æ—Ç–æ" if start_image_path else "–±–µ–∑ —Ñ–æ—Ç–æ"
    prompt_preview = prompt[:150] + '...' if len(prompt) > 150 else prompt
    confirm_text = (
        escape_md(f"üìã –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n\n", version=2) +
        escape_md(f"üé¨ –¢–∏–ø: {model_name}\n", version=2) +
        escape_md(f"üé® –°—Ç–∏–ª—å: {style_name}\n", version=2) +
        escape_md(f"üì∏ –§–æ—Ç–æ: {photo_status}\n", version=2) +
        escape_md(f"üí≠ –ü—Ä–æ–º–ø—Ç: _{prompt_preview}_\n\n", version=2) +
        escape_md(f"–í—Å—ë –≤–µ—Ä–Ω–æ?", version=2)
    )

    await message.reply(
        confirm_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", callback_data="confirm_video_generation")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="edit_video_prompt")],
            [InlineKeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_video_photo")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_video_v2_1")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(VideoStates.AWAITING_VIDEO_CONFIRMATION)
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ –¥–ª—è user_id={user_id}")

async def show_video_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π."""
    user_id = message.from_user.id
    bot = message.bot
    user_data = await state.get_data()
    prompt = user_data.get('video_prompt')
    start_image = user_data.get('start_image')
    model_key = user_data.get('model_key')
    model_config = IMAGE_GENERATION_MODELS.get(model_key, {})
    model_name_display = model_config.get('name', "AI-–í–∏–¥–µ–æ (Kling 2.1)")
    style_name = user_data.get('style_name', 'custom')
    generation_type = user_data.get('generation_type', 'ai_video_v2_1')
    cost = user_data.get('video_cost', get_video_generation_cost(generation_type))

    text_parts = [
        f"üé• –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ ({model_name_display}, {style_name}):\n\n",
        f"üìù –ü—Ä–æ–º–ø—Ç: `{prompt}`\n",
        f"üì∏ –§–æ—Ç–æ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if start_image else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n",
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –ø–µ—á–µ–Ω–µ–∫\n\n",
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    ]
    text = escape_message_parts(*text_parts, version=2)
    logger.debug(f"show_video_confirmation: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_video_prompt")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="edit_video_prompt")],
        [InlineKeyboardButton(text="üì∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_video_photo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="video_generate_menu")]
    ])

    if start_image and os.path.exists(start_image):
        photo_file = FSInputFile(path=start_image)
        await bot.send_photo(
            chat_id=user_id,
            photo=photo_file,
            caption=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await send_message_with_fallback(
            bot, user_id,
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    await state.set_state(VideoStates.AWAITING_VIDEO_CONFIRMATION)
    await state.update_data(user_id=user_id)

@video_router.message(VideoStates.AWAITING_VIDEO_PHOTO, lambda message: message.content_type == ContentType.PHOTO)
async def handle_video_photo(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    bot = message.bot
    logger.info(f"handle_video_photo: user_id={user_id}, data={await state.get_data()}")

    try:
        if not message.photo:
            logger.warning(f"handle_video_photo –≤—ã–∑–≤–∞–Ω –±–µ–∑ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")
            await send_message_with_fallback(
                bot, user_id,
                escape_md("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é /skip.", version=2),
                reply_markup=await create_back_keyboard("ai_video_v2_1"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        photo_file_id = message.photo[-1].file_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id}, file_id={photo_file_id}")

        photo_file = await bot.get_file(photo_file_id)
        uploads_dir = f"generated/{user_id}"
        os.makedirs(uploads_dir, exist_ok=True)
        photo_path = os.path.join(uploads_dir, f"video_photo_{uuid.uuid4()}.jpg")
        await bot.download_file(photo_file.file_path, photo_path)

        user_data = await state.get_data()
        is_admin_generation = user_data.get('is_admin_generation', False)
        target_user_id = user_data.get('admin_generation_for_user', user_id)
        generation_type = user_data.get('generation_type', 'ai_video_v2_1')
        model_key = user_data.get('model_key', 'kwaivgi/kling-v2.1')
        use_llama_prompt = user_data.get('use_llama_prompt', False)
        awaiting_llama_after_photo = user_data.get('awaiting_llama_after_photo', False)
        came_from_custom_prompt = user_data.get('came_from_custom_prompt', False)

        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: use_llama_prompt={use_llama_prompt}, awaiting_llama_after_photo={awaiting_llama_after_photo}, came_from_custom_prompt={came_from_custom_prompt}")

        await state.update_data(start_image=photo_path)

        if use_llama_prompt and awaiting_llama_after_photo:
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AI-–ø–æ–º–æ—â–Ω–∏–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
            await state.update_data(
                waiting_for_custom_prompt_llama=True,
                awaiting_video_photo=False,
                awaiting_llama_after_photo=False,
                video_prompt=None,
                user_id=user_id
            )
            text = escape_md(
                f"ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ{' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}!\n\n"
                f"–û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: _\"–º—É–∂—á–∏–Ω–∞ —Ç–∞–Ω—Ü—É–µ—Ç –Ω–∞ —É–ª–∏—Ü–µ\"_ –∏–ª–∏ _\"–¥–µ–≤—É—à–∫–∞ –∏–¥—ë—Ç –ø–æ –ø–ª—è–∂—É\"_",
                version=2
            )
            await message.answer(
                text,
                reply_markup=await create_back_keyboard("ai_video_v2_1"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(BotStates.AWAITING_STYLE_SELECTION)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, user_id={user_id}, target_user_id={target_user_id}")
        elif came_from_custom_prompt and not user_data.get('video_prompt'):
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
            await state.update_data(
                waiting_for_video_prompt=True,
                awaiting_video_photo=False,
                user_id=user_id
            )
            text = escape_md(
                f"üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–¢–∞–Ω—Ü—É—é—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫\"){' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ' + str(target_user_id) if is_admin_generation else ''}:",
                version=2
            )
            await message.answer(
                text,
                reply_markup=await create_back_keyboard("ai_video_v2_1"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(VideoStates.AWAITING_VIDEO_PROMPT)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, user_id={user_id}, target_user_id={target_user_id}")
        else:
            prompt = user_data.get('video_prompt', '')
            style_name = user_data.get('style_name', 'custom')
            if not prompt:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç video_prompt –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
                await message.answer(
                    escape_md("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", version=2),
                    reply_markup=await create_video_generate_menu_keyboard(),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.clear()
                await state.update_data(user_id=user_id)
                return
            text = escape_md(
                f"üé¨ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ:\n\n"
                f"üì∏ –°—Ç–∏–ª—å: {style_name}\n"
                f"üìù –ü—Ä–æ–º–ø—Ç: {prompt[:50]}{'...' if len(prompt) > 50 else ''}\n"
                f"üñº –§–æ—Ç–æ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if photo_path else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 20 –ø–µ—á–µ–Ω–µ–∫\n\n"
                f"–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ '–î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!'",
                version=2
            )
            await message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", callback_data="confirm_video_generation")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="edit_video_prompt")],
                    [InlineKeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_video_photo")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_video_v2_1")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.set_state(VideoStates.AWAITING_VIDEO_CONFIRMATION)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_video_photo –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await state.clear()
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)

@video_router.message(VideoStates.AWAITING_VIDEO_PHOTO, Command("skip"))
async def handle_skip_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    user_id = message.from_user.id
    user_data = await state.get_data()
    came_from_custom_prompt = user_data.get('came_from_custom_prompt', False)

    await state.update_data(awaiting_video_photo=False)

    if came_from_custom_prompt:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
        text = escape_md("‚úçÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ:", version=2)
        await message.reply(
            text,
            reply_markup=await create_back_keyboard("ai_video_v2_1"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(VideoStates.AWAITING_VIDEO_PROMPT)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")
    else:
        # –î–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –ø—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
        await message.reply(
            escape_md("‚ùå –î–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–≤–æ–π –ø—Ä–æ–º–ø—Ç' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ñ–æ—Ç–æ.", version=2),
            reply_markup=await create_back_keyboard("ai_video_v2_1"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")

async def check_video_status(bot: Bot, data: dict):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    user_id = data['user_id']
    task_id = data['task_id']
    prediction_id = data['prediction_id']
    attempt = data.get('attempt', 1)
    generation_type = data.get('generation_type', 'ai_video_v2_1')
    model_key = data.get('model_key')
    style_name = data.get('style_name', 'custom')
    admin_user_id = data.get('admin_user_id')

    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ: user_id={user_id}, task_id={task_id}, "
                f"prediction_id={prediction_id}, attempt={attempt}, style_name={style_name}")

    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute(
                "SELECT status, video_path FROM video_tasks WHERE id = ? AND user_id = ?",
                (task_id, user_id)
            )
            task_info = await c.fetchone()

        if not task_info:
            logger.error(f"–ó–∞–¥–∞—á–∞ –≤–∏–¥–µ–æ task_id={task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}")
            return

        current_status_db = task_info['status']
        video_path = task_info['video_path']

        if current_status_db in ['completed', 'failed']:
            logger.info(f"–í–∏–¥–µ–æ task_id={task_id} —É–∂–µ –∏–º–µ–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {current_status_db}")
            return

        replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)
        prediction = replicate_client.predictions.get(prediction_id)
        current_replicate_status = prediction.status

        logger.info(f"–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –Ω–∞ Replicate –¥–ª—è prediction_id={prediction_id}: {current_replicate_status}")

        if current_replicate_status == 'succeeded':
            video_url = None
            if prediction.output:
                if isinstance(prediction.output, str):
                    video_url = prediction.output
                elif isinstance(prediction.output, list) and prediction.output:
                    video_url = prediction.output[0]
                elif isinstance(prediction.output, dict) and 'video' in prediction.output:
                    video_url = prediction.output['video']

            if video_url:
                try:
                    logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å URL: {video_url}")
                    response = requests.get(video_url, timeout=300)
                    response.raise_for_status()

                    os.makedirs(os.path.dirname(video_path), exist_ok=True)
                    with open(video_path, 'wb') as f:
                        f.write(response.content)
                    logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {video_path}")

                    await update_video_task_status(task_id, status='completed', video_path=video_path)

                    if model_key:
                        await log_generation(user_id, generation_type, model_key, units_generated=1)

                    model_name = IMAGE_GENERATION_MODELS.get(model_key, {}).get('name', 'AI-–í–∏–¥–µ–æ (Kling 2.1)') if model_key else 'AI-–í–∏–¥–µ–æ (Kling 2.1)'

                    text_parts = [
                        f"üé¨ –¢–≤–æ—ë –≤–∏–¥–µ–æ ({model_name}, {style_name}) –≥–æ—Ç–æ–≤–æ! ",
                        "–û—Ü–µ–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"
                    ]
                    text = escape_message_parts(*text_parts, version=2)
                    logger.debug(f"check_video_status: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")

                    video_file = FSInputFile(path=video_path)
                    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ: path={video_path}, user_id={user_id}")
                    await send_video_with_retry(
                        bot,
                        user_id,
                        video_file,
                        caption=text,
                        reply_markup=await create_rating_keyboard(generation_type, model_key),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )

                    logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                    if admin_user_id:
                        text_admin = escape_message_parts(
                            f"‚úÖ –í–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}` (—Å—Ç–∏–ª—å: {style_name}) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.",
                            version=2
                        )
                        await send_message_with_fallback(
                            bot, admin_user_id,
                            text_admin,
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                            parse_mode=ParseMode.MARKDOWN_V2
                        )

                except Exception as e_download:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è task_id={task_id}: {e_download}", exc_info=True)
                    await update_video_task_status(task_id, status='failed')

                    text = escape_message_parts(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.",
                        f" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID –∑–∞–¥–∞—á–∏: {task_id}",
                        version=2
                    )
                    await send_message_with_fallback(
                        bot, user_id,
                        text,
                        reply_markup=await create_video_generate_menu_keyboard(),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    if admin_user_id:
                        text_admin = escape_message_parts(
                            f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`: {str(e_download)}",
                            version=2
                        )
                        await send_message_with_fallback(
                            bot, admin_user_id,
                            text_admin,
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
            else:
                logger.error(f"–í–∏–¥–µ–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ output –¥–ª—è prediction_id={prediction_id}")
                await update_video_task_status(task_id, status='failed')

                text = escape_message_parts(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.",
                    " –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    version=2
                )
                await send_message_with_fallback(
                    bot, user_id,
                    text,
                    reply_markup=await create_video_generate_menu_keyboard(),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                if admin_user_id:
                    text_admin = escape_message_parts(
                        f"‚ùå –í–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}` –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É.",
                        version=2
                    )
                    await send_message_with_fallback(
                        bot, admin_user_id,
                        text_admin,
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )

        elif current_replicate_status in ['failed', 'canceled']:
            error_details = prediction.error or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            logger.error(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è prediction_id={prediction_id}: {error_details}")

            await update_video_task_status(task_id, status='failed')

            video_cost = get_video_generation_cost(generation_type)
            logger.debug(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º {video_cost} —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")

            text_parts = [
                f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ({style_name}) –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                f" –ü—Ä–∏—á–∏–Ω–∞: {error_details}.",
                f" {video_cost} –ø–µ—á–µ–Ω—å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
            ]
            text = escape_message_parts(*text_parts, version=2)
            await send_message_with_fallback(
                bot, user_id,
                text,
                reply_markup=await create_video_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await update_user_credits(user_id, "increment_photo", amount=video_cost)

            if admin_user_id:
                text_admin = escape_message_parts(
                    f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}` (—Å—Ç–∏–ª—å: {style_name}) –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_details}.",
                    version=2
                )
                await send_message_with_fallback(
                    bot, admin_user_id,
                    text_admin,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                    parse_mode=ParseMode.MARKDOWN_V2
                )

        else:
            max_attempts = 30

            if attempt >= max_attempts:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è task_id={task_id}")
                await update_video_task_status(task_id, status='timeout')

                video_cost = get_video_generation_cost(generation_type)
                logger.debug(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º {video_cost} —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id} –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞")

                text_parts = [
                    f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ ({style_name}).",
                    f" {video_cost} –ø–µ—á–µ–Ω—å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
                    " –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                ]
                text = escape_message_parts(*text_parts, version=2)
                await send_message_with_fallback(
                    bot, user_id,
                    text,
                    reply_markup=await create_video_generate_menu_keyboard(),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await update_user_credits(user_id, "increment_photo", amount=video_cost)

                if admin_user_id:
                    text_admin = escape_message_parts(
                        f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}` (—Å—Ç–∏–ª—å: {style_name}).",
                        version=2
                    )
                    await send_message_with_fallback(
                        bot, admin_user_id,
                        text_admin,
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{user_id}")]]),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                return

            next_delay = 60

            logger.info(f"–í–∏–¥–µ–æ –¥–ª—è task_id={task_id} –≤—Å–µ –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. "
                        f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {next_delay} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")

            asyncio.create_task(check_video_status_with_delay(
                bot,
                {
                    'user_id': user_id,
                    'task_id': task_id,
                    'prediction_id': prediction_id,
                    'attempt': attempt + 1,
                    'generation_type': generation_type,
                    'model_key': model_key,
                    'style_name': style_name,
                    'admin_user_id': admin_user_id
                },
                delay=next_delay
            ))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –¥–ª—è task_id={task_id}: {e}", exc_info=True)

        if attempt < 10:
            asyncio.create_task(check_video_status_with_delay(
                bot,
                {
                    'user_id': user_id,
                    'task_id': task_id,
                    'prediction_id': prediction_id,
                    'attempt': attempt + 1,
                    'generation_type': generation_type,
                    'model_key': model_key,
                    'style_name': style_name,
                    'admin_user_id': admin_user_id
                },
                delay=120
            ))

async def check_video_status_with_delay(bot: Bot, data: dict, delay: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    await asyncio.sleep(delay)
    await check_video_status(bot, data)

async def check_pending_video_tasks(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–∏–¥–µ–æ."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()

            await c.execute("""
                SELECT id, user_id, video_path, prediction_id, model_key
                FROM video_tasks
                WHERE status IN ('pending', 'starting', 'processing')
            """)
            pending_tasks = await c.fetchall()

        if not pending_tasks:
            logger.info("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_tasks)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

        for row in pending_tasks:
            task_id = row['id']
            user_id = row['user_id']
            prediction_id = row['prediction_id']
            model_key = row['model_key']

            if not prediction_id:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è task_id={task_id}, user_id={user_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç prediction_id.")
                continue

            generation_type = 'ai_video_v2_1' if model_key == IMAGE_GENERATION_MODELS.get("kwaivgi/kling-v2.1", {}).get("id") else 'ai_video_v2_1'

            asyncio.create_task(check_video_status_with_delay(
                bot,
                {
                    'user_id': user_id,
                    'task_id': task_id,
                    'prediction_id': prediction_id,
                    'attempt': 1,
                    'generation_type': generation_type,
                    'model_key': model_key,
                    'style_name': 'custom'
                },
                delay=random.randint(15, 45)
            ))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–∏–¥–µ–æ: {e}", exc_info=True)

async def create_video_styles_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –≤–∏–¥–µ–æ."""
    buttons = [
        [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç", callback_data="custom_video_prompt")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="video_generate_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def create_video_photo_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞."""
    buttons = [
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="skip_photo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_video_v2_1")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@video_router.callback_query(lambda c: c.data == 'custom_video_prompt')
async def handle_custom_video_prompt_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    await query.answer()
    user_id = query.from_user.id
    bot = query.bot

    await state.update_data(came_from_custom_prompt=True, waiting_for_video_prompt=True, user_id=user_id)
    text = escape_message_parts(
        "üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–¢–∞–Ω—Ü—É—é—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫\"):",
        version=2
    )
    logger.debug(f"handle_custom_video_prompt_callback: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text[:200]}...")
    await query.message.edit_text(
        text,
        reply_markup=await create_back_keyboard("video_generate_menu"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(VideoStates.AWAITING_VIDEO_PROMPT)
    await state.update_data(user_id=user_id)

@video_router.callback_query(lambda c: c.data == 'skip_photo')
async def handle_skip_photo_button(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'."""
    await query.answer()
    user_id = query.from_user.id
    user_data = await state.get_data()
    came_from_custom_prompt = user_data.get('came_from_custom_prompt', False)

    await state.update_data(awaiting_video_photo=False)

    if came_from_custom_prompt:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
        text = escape_md("‚úçÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ:", version=2)
        await query.message.edit_text(
            text,
            reply_markup=await create_back_keyboard("ai_video_v2_1"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(VideoStates.AWAITING_VIDEO_PROMPT)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")
    else:
        # –î–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –ø—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
        await query.message.edit_text(
            escape_md("‚ùå –î–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–≤–æ–π –ø—Ä–æ–º–ø—Ç' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ñ–æ—Ç–æ.", version=2),
            reply_markup=await create_back_keyboard("ai_video_v2_1"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")
