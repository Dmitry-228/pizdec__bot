from asyncio import Lock
import re
import aiosqlite
import asyncio
import logging
import os
import uuid
import random
import zipfile
from typing import Dict, Optional, List
from aiogram import Bot, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
import replicate
from replicate.exceptions import ReplicateError

from config import REPLICATE_USERNAME_OR_ORG_NAME, ADMIN_IDS, REPLICATE_API_TOKEN, DATABASE_PATH
from generation_config import IMAGE_GENERATION_MODELS
from database import check_database_user, update_user_credits, save_user_trainedmodel, update_trainedmodel_status, log_generation, check_user_resources
from keyboards import create_main_menu_keyboard, create_training_keyboard, create_user_profile_keyboard, create_subscription_keyboard, create_confirmation_keyboard
from generation.utils import TempFileManager, reset_generation_context, send_message_with_fallback
from generation.images import upload_image_to_replicate
from handlers.utils import clean_admin_context, safe_escape_markdown as escape_md
from utils import get_cookie_progress_bar

from logger import get_logger
logger = get_logger('generation')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_locks = {}

class TrainingStates(StatesGroup):
    AWAITING_AVATAR_NAME = State()
    AWAITING_PHOTOS = State()
    AWAITING_CONFIRMATION = State()

training_router = Router()

TRAINING_PROGRESS_MESSAGES = {
    "1": [
        "üöÄ –ò–ò —Å–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –∞–≤–∞—Ç–∞—Ä–∞ - '{name}' –Ω–∞—á–∞–ª –æ–±—É—á–µ–Ω–∏–µ! –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–∏ —Ñ–æ—Ç–æ...",
        "‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π! –ò–ò –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ '{name}' –∏–∑—É—á–∞–µ—Ç —á–µ—Ä—Ç—ã –ª–∏—Ü–∞...",
        "üéØ –ó–∞–ø—É—Å–∫! –ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ '{name}' –¥–µ—Ç–∞–ª–∏..."
    ],
    "2": [
        "üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–π –º–æ—â–Ω–æ—Å—Ç–∏! {elapsed} –º–∏–Ω –∏–∑ ~{total}",
        "üí´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥—ë—Ç –æ—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±—É–µ–º –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ '{name}' ...",
        "‚öôÔ∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç—Ä—É–¥–∏—Ç—Å—è! {elapsed}/{total} –º–∏–Ω –¥–ª—è '{name}'"
    ],
    "3": [
        "üé≠ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –Ω–µ–π—Ä–æ–¥–µ—Ç–∞–ª–µ–π! –ê–≤–∞—Ç–∞—Ä - '{name}' –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤...",
        "‚ú® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ, –∏ '{name}' –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤...",
        "üèÅ –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ! –ó–∞–∫–∞–Ω—á–∏–≤–∞—é –æ–±—É—á–µ–Ω–∏–µ '{name}'..."
    ],
    "4": [
        "üíé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–µ—Ç–∞–ª–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ '{name}'...",
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ '{name}'...",
        "‚è∞ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è '{name}'..."
    ]
}



STAGE_EMOJIS = {
    1: ["üöÄ", "‚ö°", "üéØ", "üí•"],
    2: ["üî•", "üí´", "‚öôÔ∏è", "‚ú®"],
    3: ["üé≠", "üèÅ", "üéâ", "üéä"],
    4: ["üíé", "üîç", "‚è∞", "‚úÖ"]
}

TRAINER_VERSION = "replicate/fast-flux-trainer:8b10794665aed907bb98a1a5324cd1d3a8bea0e9b31e65210967fb9c9e2e08ed"

def generate_trigger_word(user_id: int, avatar_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    clean_name = re.sub(r'[^a-zA-Z0-9]', '', avatar_name.lower())
    if not clean_name:
        clean_name = "avatar"
    trigger_base = clean_name[:10]
    unique_suffix = f"{user_id % 1000}{uuid.uuid4().hex[:4]}"
    trigger_word = f"{trigger_base}{unique_suffix}"
    trigger_word = re.sub(r'[^a-z0-9]', '', trigger_word.lower())
    return trigger_word

async def get_training_progress_message(elapsed_minutes: int, avatar_name: str, total_minutes: int = 5) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è."""
    message_key = str(elapsed_minutes)
    if message_key not in TRAINING_PROGRESS_MESSAGES:
        keys = sorted([int(k) for k in TRAINING_PROGRESS_MESSAGES.keys()])
        for k in keys:
            if elapsed_minutes <= k:
                message_key = str(k)
                break
        else:
            message_key = str(keys[-1])

    messages = TRAINING_PROGRESS_MESSAGES[message_key]
    message = random.choice(messages)

    message = message.format(name=avatar_name, elapsed=elapsed_minutes, total=total_minutes)

    percentage = min(int((elapsed_minutes / total_minutes) * 100), 95)
    progress_bar = get_cookie_progress_bar(percentage)

    stage_emoji = random.choice(STAGE_EMOJIS.get(int(message_key), ["‚è≥"]))

    final_message = f"{stage_emoji} {message}\n\n"
    final_message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n"

    if elapsed_minutes >= 3:
        final_message += "\nüîî –ë—É–∫–≤–∞–ª—å–Ω–æ –º–∏–Ω—É—Ç–∞ ‚Äî –∏ –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!"
    elif elapsed_minutes >= 2:
        final_message += f"\n‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {total_minutes - elapsed_minutes} –º–∏–Ω"

    return final_message

async def send_training_progress(bot: Bot, user_id: int, elapsed_minutes: int, avatar_name: str, total_minutes: int = 5) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è."""
    try:
        message = await get_training_progress_message(elapsed_minutes, avatar_name, total_minutes)
        await send_message_with_fallback(bot, user_id, message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_training_progress_with_delay(bot: Bot, user_id: int, elapsed_minutes: int, avatar_name: str, total_minutes: int, delay: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    await asyncio.sleep(delay)
    await send_training_progress(bot, user_id, elapsed_minutes, avatar_name, total_minutes)

async def schedule_training_notifications(bot: Bot, user_id: int, avatar_name: str, avatar_id: int, training_id: str, model_name: str, total_minutes: int = 5):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è."""
    notification_schedule = [1, 2, 3, 4]
    for minutes in notification_schedule:
        if minutes < total_minutes:
            asyncio.create_task(send_training_progress_with_delay(
                bot, user_id, minutes, avatar_name, total_minutes, delay=minutes * 60
            ))
    asyncio.create_task(check_training_status_with_delay(
        bot, {'user_id': user_id, 'prediction_id': training_id, 'model_name': model_name, 'avatar_id': avatar_id}, delay=total_minutes * 60
    ))

async def start_training(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Replicate trainings API."""
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    user_id = message.from_user.id
    user_data = await state.get_data()
    stored_user_id = user_data.get('user_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_id ID –±–æ—Ç–∞
    bot = message.bot
    bot_info = await bot.get_me()
    bot_id = bot_info.id
    if user_id == bot_id:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å ID {bot_id}")
        if stored_user_id and stored_user_id != bot_id:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM: {stored_user_id}")
            user_id = stored_user_id
        else:
            logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ: user_id ({user_id}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –±–æ—Ç–∞ –∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ user_id")
            return

    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è user_id={user_id}")
    training_photos = user_data.get('training_photos', [])
    avatar_name = user_data.get('avatar_name')

    status_message = None

    if not avatar_name:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç avatar_name –¥–ª—è user_id={user_id} –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏—è.")
        await message.reply(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.", version=2),
            reply_markup=await create_user_profile_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await reset_generation_context(state, 'train_flux_no_avatar_name')
        return

    trigger_word = generate_trigger_word(user_id, avatar_name)
    await state.update_data(trigger_word=trigger_word, user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ: {trigger_word} –¥–ª—è user_id={user_id}")

    if len(training_photos) < 10:
        await message.reply(
            escape_md(f"‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ñ–æ—Ç–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(training_photos)}. –î–æ–±–∞–≤—å –µ—â—ë.", version=2),
            reply_markup=await create_training_keyboard(user_id, len(training_photos)),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not await check_user_resources(bot, user_id, required_avatars=1):
        return

    status_message = await send_message_with_fallback(
        bot, user_id, escape_md("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    model_name_for_db = f"{REPLICATE_USERNAME_OR_ORG_NAME}/fastnew"

    async with TempFileManager() as temp_manager:
        try:
            await update_user_credits(user_id, "decrement_avatar", amount=1)
            logger.info(f"–°–ø–∏—Å–∞–Ω 1 –∞–≤–∞—Ç–∞—Ä –¥–ª—è user_id={user_id} –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏—è.")

            zip_dir = f"uploads/{user_id}"
            os.makedirs(zip_dir, exist_ok=True)
            zip_filename = f"train_photos_{trigger_word}_{uuid.uuid4().hex[:6]}.zip"
            zip_path = os.path.join(zip_dir, zip_filename)
            temp_manager.add(zip_path)

            try:
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for photo_path_item in training_photos:
                        if os.path.exists(photo_path_item):
                            zipf.write(photo_path_item, os.path.basename(photo_path_item))
                            temp_manager.add(photo_path_item)
                        else:
                            logger.warning(f"–§–∞–π–ª —Ñ–æ—Ç–æ {photo_path_item} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP –¥–ª—è user_id={user_id}")
                logger.info(f"ZIP-–∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path} —Å {len(training_photos)} —Ñ–∞–π–ª–∞–º–∏.")
            except Exception as e_zip:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP –¥–ª—è user_id={user_id}: {e_zip}", exc_info=True)
                raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–∞: {e_zip}")

            replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

            await status_message.edit_text(
                escape_md("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–±–ª–∞–∫–æ...", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )

            zip_url = await upload_image_to_replicate(zip_path)

            await status_message.edit_text(
                escape_md("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞—é –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )

            training_params = {"lora_type": "subject", "input_images": zip_url, "training_steps": 1000}

            logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è. Destination: {model_name_for_db}, Version: {TRAINER_VERSION}, Params: {training_params}")

            training_id = None
            try:
                training = replicate_client.trainings.create(
                    destination=model_name_for_db, version=TRAINER_VERSION, input=training_params
                )
                training_id = training.id
                if not training_id:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è!")
                logger.info(f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ trainings API: user_id={user_id}, training_id={training_id}, destination={model_name_for_db}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ trainings API: {e}")
                try:
                    prediction = replicate_client.run(
                        TRAINER_VERSION, input={**training_params, "trigger_word": trigger_word}
                    )
                    training_id = prediction.id if hasattr(prediction, 'id') else f"training_{uuid.uuid4().hex[:8]}"
                    logger.info(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–µ–¥–∏–∫—Ü–∏–∏: training_id={training_id}")
                except Exception as e_alt:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e_alt}")
                    raise

            if not training_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ–±—É—á–µ–Ω–∏—è –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º!")

            new_avatar_id = await save_user_trainedmodel(
                user_id, training_id, trigger_word, training_photos, avatar_name, training_step="started"
            )

            if not new_avatar_id:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –≤ –ë–î.")

            await update_trainedmodel_status(avatar_id=new_avatar_id, model_id=model_name_for_db, status='starting')

            await log_generation(user_id, 'train_flux', TRAINER_VERSION, units_generated=1)

            final_user_message = (
                escape_md(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ '{avatar_name}' –∑–∞–ø—É—â–µ–Ω–æ!", version=2) + "\n\n" +
                escape_md("‚ö° –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –æ–∫–æ–ª–æ 3-—Ö –º–∏–Ω—É—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!", version=2) + "\n" +
                escape_md("üì± –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.", version=2) + "\n" +
                escape_md("üîî –¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!", version=2) + "\n\n" +
                escape_md("‚ú® –ù–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä—ã –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ —Ñ–æ—Ç–æ!", version=2)
            )

            await status_message.edit_text(
                final_user_message,
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )

            status_message = None

            await schedule_training_notifications(
                bot, user_id, avatar_name, new_avatar_id, training_id, model_name_for_db, total_minutes=5
            )

            await reset_generation_context(state, 'train_flux_started_success')

        except ReplicateError as e_replicate:
            logger.error(f"–û—à–∏–±–∫–∞ Replicate –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è user_id={user_id}: "
                        f"{e_replicate.detail if hasattr(e_replicate, 'detail') else e_replicate}", exc_info=True)
            await update_user_credits(user_id, "increment_avatar", amount=1)
            logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω 1 –∞–≤–∞—Ç–∞—Ä –¥–ª—è user_id={user_id} –∏–∑-–∑–∞ ReplicateError –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏.")
            user_message_error = (
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. ", version=2) +
                escape_md(f"–ê–≤–∞—Ç–∞—Ä '{avatar_name}' –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", version=2)
            )
            if status_message:
                await status_message.edit_text(
                    user_message_error,
                    reply_markup=await create_user_profile_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await send_message_with_fallback(
                    bot, user_id, user_message_error,
                    reply_markup=await create_user_profile_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            await reset_generation_context(state, 'train_flux_replicate_error')

        except Exception as e_train:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {e_train}", exc_info=True)
            await update_user_credits(user_id, "increment_avatar", amount=1)
            logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω 1 –∞–≤–∞—Ç–∞—Ä –¥–ª—è user_id={user_id} –∏–∑-–∑–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –æ–±—É—á–µ–Ω–∏—è.")
            user_message_error_general = (
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. ", version=2) +
                escape_md(f"–ê–≤–∞—Ç–∞—Ä '{avatar_name}' –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", version=2)
            )
            if status_message:
                await status_message.edit_text(
                    user_message_error_general,
                    reply_markup=await create_user_profile_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await send_message_with_fallback(
                    bot, user_id, user_message_error_general,
                    reply_markup=await create_user_profile_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            await reset_generation_context(state, 'train_flux_general_error')

        finally:
            if status_message:
                try:
                    await status_message.delete()
                except Exception:
                    pass

async def check_training_status(bot: Bot, data: Dict[str, any]) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    user_id = data['user_id']
    training_id = data.get('prediction_id', data.get('training_id'))
    model_name = data['model_name']
    avatar_id = data['avatar_id']

    async with aiosqlite.connect(DATABASE_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        c = await conn.cursor()
        await c.execute(
            "SELECT avatar_name, trigger_word, photo_paths FROM user_trainedmodels WHERE avatar_id = ?",
            (avatar_id,)
        )
        avatar_info = await c.fetchone()

    if not avatar_info:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–µ avatar_id={avatar_id}")
        return

    avatar_name = avatar_info['avatar_name']
    trigger_word = avatar_info['trigger_word']

    replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è user_id={user_id}, avatar_id={avatar_id}, training_id={training_id}")

        training_status = None
        output = None

        try:
            training = replicate_client.trainings.get(training_id)
            training_status = training.status
            output = training.output if hasattr(training, 'output') else None
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ trainings API: {training_status}")
            logger.debug(f"Training output: {output}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ trainings API: {e}")
            try:
                prediction = replicate_client.predictions.get(training_id)
                training_status = prediction.status
                output = prediction.output
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ predictions API: {training_status}")
                logger.debug(f"Prediction output: {output}")
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∏ —á–µ—Ä–µ–∑ trainings, –Ω–∏ —á–µ—Ä–µ–∑ predictions API: {e2}")
                training_status = 'failed'
                output = None

        if training_status == 'succeeded':
            model_version = None
            if output:
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º output: type={type(output)}, content={output}")
                if isinstance(output, dict):
                    if 'version' in output:
                        model_version = output['version']
                        logger.info(f"–í–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ output['version']: {model_version}")
                    elif 'weights' in output:
                        weights_url = output['weights']
                        logger.info(f"Weights URL: {weights_url}")
                        if 'pbxt/' in weights_url:
                            version_match = re.search(r'pbxt/([a-f0-9]{64})', weights_url)
                            if version_match:
                                model_version = version_match.group(1)
                                logger.info(f"–í–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ weights URL: {model_version}")
                    elif 'model' in output:
                        model_path = output['model']
                        if ':' in model_path:
                            model_version = model_path.split(':')[-1]
                            logger.info(f"–í–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ model path: {model_version}")
                elif isinstance(output, str):
                    if len(output) == 64 and all(c in '0123456789abcdef' for c in output):
                        model_version = output
                        logger.info(f"Output —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä—Å–∏–µ–π: {model_version}")
                    elif 'pbxt/' in output:
                        version_match = re.search(r'pbxt/([a-f0-9]{64})', output)
                        if version_match:
                            model_version = version_match.group(1)
                            logger.info(f"–í–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ output URL: {model_version}")
                    elif ':' in output:
                        model_version = output.split(':')[-1]
                        logger.info(f"–í–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏: {model_version}")

            if not model_version:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –∏–∑ output: {output}")
                try:
                    model_base = model_name.split(':')[0] if ':' in model_name else model_name
                    model = replicate_client.models.get(model_base)
                    if model and hasattr(model, 'latest_version'):
                        latest_version = model.latest_version
                        if hasattr(latest_version, 'id'):
                            model_version = latest_version.id
                            logger.info(f"–í–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ latest_version: {model_version}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ models API: {e}")
                if not model_version:
                    model_version = f"temp-{uuid.uuid4().hex}"
                    logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {model_version}")

            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {model_version}")

            model_base_name = model_name.split(':')[0] if ':' in model_name else model_name

            await update_trainedmodel_status(
                avatar_id, model_base_name, model_version, 'success', training_id
            )

            await update_user_credits(user_id, "set_trained_model", amount=1)
            await update_user_credits(user_id, "set_active_avatar", amount=avatar_id)

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
            safe_avatar_name = escape_md(avatar_name, version=2)
            success_message = (
                escape_md(f"üéâüéä –ì–û–¢–û–í–û! –í–∞—à–∞ –º–æ–¥–µ–ª—å –∞–≤–∞—Ç–∞—Ä–∞ - '{safe_avatar_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!\n\n", version=2) +
                escape_md("‚úÖ –û–±—É—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ —Ñ–æ—Ç–æ!\n", version=2) +
                escape_md("üîë –°–æ–∑–¥–∞–≤–∞–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ —Ç–µ–ø–µ—Ä—å —Å–æ —Å–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º\n", version=2) +
                escape_md("‚ö° –í—ã–±–∏—Ä–∞–π –≥–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!\n\n", version=2) +
                escape_md("üé® –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ç–æ!\n", version=2) +
                escape_md("–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å' –∏ –Ω–∞—á–∏–Ω–∞–π!\n\n", version=2) +
                escape_md("üí° –°–æ–≤–µ—Ç: –ö–∞–∂–¥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ù–ï –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â—É—é!", version=2)
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ!", callback_data="generate_menu")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])

            await send_message_with_fallback(
                bot, user_id, success_message, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2, is_escaped=True
            )

            for admin_id in ADMIN_IDS:
                try:
                    safe_model_base_name = escape_md(model_base_name, version=2)
                    safe_model_version = escape_md(model_version[:16], version=2)
                    safe_training_id = escape_md(training_id, version=2)
                    admin_message = (
                        escape_md(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏!\n", version=2) +
                        escape_md(f"üë§ User: {user_id}\n", version=2) +
                        escape_md(f"üè∑ –ê–≤–∞—Ç–∞—Ä: {safe_avatar_name}\n", version=2) +
                        escape_md(f"üîë –¢—Ä–∏–≥–≥–µ—Ä: {escape_md(trigger_word, version=2)}\n", version=2) +
                        escape_md(f"üì¶ –ú–æ–¥–µ–ª—å: {safe_model_base_name}\n", version=2) +
                        escape_md(f"üîñ –í–µ—Ä—Å–∏—è: {safe_model_version}...\n", version=2) +
                        escape_md(f"üìù Training ID: {safe_training_id}", version=2)
                    )
                    await bot.send_message(admin_id, admin_message, parse_mode=ParseMode.MARKDOWN_V2)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        elif training_status in ['failed', 'canceled']:
            logger.error(f"–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {training_status}")
            await update_trainedmodel_status(avatar_id, status='failed')
            safe_avatar_name = escape_md(avatar_name, version=2)
            error_message = (
                escape_md(f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ '{safe_avatar_name}' –Ω–µ —É–¥–∞–ª–æ—Å—å.\n\n", version=2) +
                escape_md("üîÑ –ê–≤–∞—Ç–∞—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n", version=2) +
                escape_md("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n", version=2) +
                escape_md("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ\n", version=2) +
                escape_md("- –°–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã\n", version=2) +
                escape_md("- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n", version=2) +
                escape_md("–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ç–æ!", version=2)
            )
            await send_message_with_fallback(
                bot, user_id, error_message, reply_markup=await create_main_menu_keyboard(user_id), parse_mode=ParseMode.MARKDOWN_V2, is_escaped=True
            )
            await update_user_credits(user_id, "increment_avatar", amount=1)

        else:
            logger.info(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è user_id={user_id}, avatar_id={avatar_id} –≤—Å—ë –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {training_status}")
            safe_avatar_name = escape_md(avatar_name, version=2)
            progress_message = (
                escape_md(f"‚è≥ –ê–≤–∞—Ç–∞—Ä '{safe_avatar_name}' –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...", version=2)
            )
            await send_message_with_fallback(
                bot, user_id, progress_message, parse_mode=ParseMode.MARKDOWN_V2, is_escaped=True
            )
            asyncio.create_task(check_training_status_with_delay(bot, data, delay=30))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await update_user_credits(user_id, "increment_avatar", amount=1)
        safe_avatar_name = escape_md(avatar_name, version=2)
        error_message = (
            escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ '{safe_avatar_name}'. ", version=2) +
            escape_md("–ê–≤–∞—Ç–∞—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.", version=2)
        )
        await send_message_with_fallback(
            bot, user_id, error_message, reply_markup=await create_main_menu_keyboard(user_id), parse_mode=ParseMode.MARKDOWN_V2, is_escaped=True
        )

async def check_training_status_with_delay(bot: Bot, data: Dict[str, any], delay: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    await asyncio.sleep(delay)
    await check_training_status(bot, data)

async def check_pending_trainings(bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("""
                SELECT user_id, prediction_id, avatar_id, model_id, trigger_word, avatar_name
                FROM user_trainedmodels
                WHERE status IN ('pending', 'starting', 'processing')
            """)
            pending_trainings = await c.fetchall()

        if not pending_trainings:
            logger.info("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_trainings)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

        for row in pending_trainings:
            user_id = row['user_id']
            training_id = row['prediction_id']
            avatar_id = row['avatar_id']
            model_id_db = row['model_id']
            trigger_word_db = row['trigger_word']
            avatar_name = row['avatar_name'] or f"Avatar {avatar_id}"

            if not training_id:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è avatar_id={avatar_id}, user_id={user_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç training_id.")
                continue

            model_name_for_check = model_id_db
            if not model_name_for_check:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç model_id –¥–ª—è avatar_id={avatar_id}, user_id={user_id}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è.")
                model_name_for_check = f"{REPLICATE_USERNAME_OR_ORG_NAME}/fastnew"
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω model_name –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {model_name_for_check}")

            logger.info(f"–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è user_id={user_id}, "
                        f"avatar_id={avatar_id}, training_id={training_id}, model_name='{model_name_for_check}'")

            asyncio.create_task(check_training_status_with_delay(bot, {
                'user_id': user_id, 'prediction_id': training_id, 'model_name': model_name_for_check, 'avatar_id': avatar_id
            }, delay=random.randint(10, 30)))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—É—á–µ–Ω–∏—è: {e}", exc_info=True)

@training_router.callback_query(lambda c: c.data and c.data.startswith("train_new_avatar"))
async def initiate_training(query: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    await query.answer()
    user_id = query.from_user.id
    bot = query.bot

    await query.message.edit_text(
        escape_md("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(TrainingStates.AWAITING_AVATAR_NAME)

@training_router.message(TrainingStates.AWAITING_AVATAR_NAME)
async def handle_avatar_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞."""
    user_id = message.from_user.id
    bot = message.bot
    avatar_name = message.text.strip()

    if not avatar_name or len(avatar_name) > 50:
        await message.reply(
            escape_md("‚ùå –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    training_photos = user_data.get('training_photos', [])
    photo_count = len(training_photos)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞
    await state.update_data(avatar_name=avatar_name, training_photos=training_photos, processed_media_groups=set())

    if photo_count >= 10:
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        text = (
            escape_md(f"üëç –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n", version=2) +
            escape_md(f"üë§ –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞: {avatar_name}\n", version=2) +
            escape_md(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {photo_count} —à—Ç.\n\n", version=2) +
            escape_md(f"üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è!\n", version=2) +
            escape_md(f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 3-5 –º–∏–Ω—É—Ç.\n", version=2) +
            escape_md(f"üíé –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω 1 –∞–≤–∞—Ç–∞—Ä —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n", version=2) +
            escape_md(f"–ù–∞—á–∏–Ω–∞–µ–º?", version=2)
        )
        await message.reply(
            text,
            reply_markup=await create_confirmation_keyboard(
                confirm_callback="confirm_start_training",
                cancel_callback="user_profile",
                confirm_text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!",
                cancel_text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(TrainingStates.AWAITING_CONFIRMATION)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        text = (
            escape_md(f"‚úÖ –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞: {avatar_name}\n\n", version=2) +
            escape_md(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10. –ó–∞–≥—Ä—É–∑–∏ –µ—â—ë {10 - photo_count}.", version=2) + "\n" +
            escape_md("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n", version=2) +
            escape_md("- –ß—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞\n", version=2) +
            escape_md("- –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã\n", version=2) +
            escape_md("- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n", version=2) +
            escape_md("- –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n", version=2) +
            escape_md("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.", version=2)
        )
        await message.reply(
            text,
            reply_markup=await create_training_keyboard(user_id, photo_count),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(TrainingStates.AWAITING_PHOTOS)

@training_router.message(TrainingStates.AWAITING_CONFIRMATION)
async def handle_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_id = message.from_user.id
    await message.reply(
        escape_md("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@training_router.callback_query(TrainingStates.AWAITING_CONFIRMATION, lambda c: c.data == "confirm_start_training")
async def handle_confirm_training_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."""
    user_id = query.from_user.id
    await query.answer("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ!")
    await start_training(query.message, state)
    await state.clear()

@training_router.callback_query(TrainingStates.AWAITING_CONFIRMATION, lambda c: c.data == "user_profile")
async def handle_cancel_training_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ–±—É—á–µ–Ω–∏—è."""
    user_id = query.from_user.id
    await state.clear()
    await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await query.message.answer(
        escape_md("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.", version=2),
        reply_markup=await create_user_profile_keyboard(user_id, query.bot),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@training_router.message(TrainingStates.AWAITING_PHOTOS, lambda message: message.content_type == ContentType.PHOTO)
async def handle_training_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º."""
    user_id = message.from_user.id
    bot = message.bot
    media_group_id = message.media_group_id

    user_data = await state.get_data()
    training_photos = user_data.get('training_photos', [])
    processed_media_groups = user_data.get('processed_media_groups', set())

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if media_group_id and media_group_id in processed_media_groups:
        logger.debug(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {media_group_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è user_id={user_id}")
        return

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ message.photo)
    photos = message.photo
    if not photos:
        logger.error(f"–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è user_id={user_id}")
        await message.reply(
            escape_md("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–æ–≤–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    photo = photos[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    try:
        file = await bot.get_file(photo.file_id)
        photo_path = f"temp/{user_id}_{uuid.uuid4()}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        await bot.download_file(file.file_path, photo_path)
        if photo_path not in training_photos:
            training_photos.append(photo_path)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {photo_path} –¥–ª—è user_id={user_id}")
        else:
            logger.debug(f"–§–æ—Ç–æ {photo_path} —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {e}")
        await message.reply(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
    if media_group_id:
        processed_media_groups.add(media_group_id)
        await state.update_data(processed_media_groups=processed_media_groups)

    await state.update_data(training_photos=training_photos)
    count = len(training_photos)

    logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}, media_group_id={media_group_id}")

    if count >= 10:
        text = (
            escape_md(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ–æ—Ç–æ. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë.", version=2) + "\n" +
            escape_md("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'.", version=2)
        )
        await message.reply(
            text,
            reply_markup=await create_training_keyboard(user_id, count),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        text = (
            escape_md(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ–æ—Ç–æ. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10. –ó–∞–≥—Ä—É–∑–∏ –µ—â—ë {10 - count}.", version=2)
        )
        await message.reply(
            text,
            reply_markup=await create_training_keyboard(user_id, count),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}: {text}")
